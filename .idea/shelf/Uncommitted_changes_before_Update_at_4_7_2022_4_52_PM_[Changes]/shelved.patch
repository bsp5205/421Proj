Index: node_modules/express-basic-auth/package.json
===================================================================
diff --git a/node_modules/express-basic-auth/package.json b/node_modules/express-basic-auth/package.json
deleted file mode 100644
--- a/node_modules/express-basic-auth/package.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,40 +0,0 @@
-{
-  "name": "express-basic-auth",
-  "version": "1.2.1",
-  "description": "Plug & play basic auth middleware for express",
-  "main": "index.js",
-  "types": "express-basic-auth.d.ts",
-  "scripts": {
-    "check-dts": "tsc express-basic-auth.d.ts",
-    "test": "mocha test.js && npm run check-dts"
-  },
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/LionC/express-basic-auth.git"
-  },
-  "keywords": [
-    "express",
-    "middleware",
-    "basic",
-    "auth",
-    "authentication",
-    "http"
-  ],
-  "author": "LionC <me@lionc.de>",
-  "license": "MIT",
-  "bugs": {
-    "url": "https://github.com/LionC/express-basic-auth/issues"
-  },
-  "homepage": "https://github.com/LionC/express-basic-auth#readme",
-  "dependencies": {
-    "basic-auth": "^2.0.1"
-  },
-  "devDependencies": {
-    "@types/express": "^4.16.0",
-    "express": "^4.16.4",
-    "mocha": "^9.1.3",
-    "should": "^11.2.1",
-    "supertest": "^3.3.0",
-    "typescript": "^2.9.2"
-  }
-}
Index: node_modules/iconv-lite/.travis.yml
===================================================================
diff --git a/node_modules/iconv-lite/.travis.yml b/node_modules/iconv-lite/.travis.yml
deleted file mode 100644
--- a/node_modules/iconv-lite/.travis.yml	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,23 +0,0 @@
- sudo: false
- language: node_js
- node_js:
-   - "0.10"
-   - "0.11"
-   - "0.12"
-   - "iojs"
-   - "4"
-   - "6"
-   - "8"
-   - "node"
-
-
- env:
-   - CXX=g++-4.8
- addons:
-   apt:
-     sources:
-       - ubuntu-toolchain-r-test
-     packages:
-       - gcc-4.8
-       - g++-4.8
-
Index: node_modules/express-basic-auth/index.js
===================================================================
diff --git a/node_modules/express-basic-auth/index.js b/node_modules/express-basic-auth/index.js
deleted file mode 100644
--- a/node_modules/express-basic-auth/index.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,98 +0,0 @@
-const auth = require('basic-auth')
-const assert = require('assert')
-const timingSafeEqual = require('crypto').timingSafeEqual
-
-// Credits for the actual algorithm go to github/@Bruce17
-// Thanks to github/@hraban for making me implement this
-function safeCompare(userInput, secret) {
-    const userInputLength = Buffer.byteLength(userInput)
-    const secretLength = Buffer.byteLength(secret)
-
-    const userInputBuffer = Buffer.alloc(userInputLength, 0, 'utf8')
-    userInputBuffer.write(userInput)
-    const secretBuffer = Buffer.alloc(userInputLength, 0, 'utf8')
-    secretBuffer.write(secret)
-
-    return !!(timingSafeEqual(userInputBuffer, secretBuffer) & userInputLength === secretLength)
-}
-
-function ensureFunction(option, defaultValue) {
-    if(option == undefined)
-        return function() { return defaultValue }
-
-    if(typeof option != 'function')
-        return function() { return option }
-
-    return option
-}
-
-function buildMiddleware(options) {
-    var challenge = options.challenge != undefined ? !!options.challenge : false
-    var users = options.users || {}
-    var authorizer = options.authorizer || staticUsersAuthorizer
-    var isAsync = options.authorizeAsync != undefined ? !!options.authorizeAsync : false
-    var getResponseBody = ensureFunction(options.unauthorizedResponse, '')
-    var realm = ensureFunction(options.realm)
-
-    assert(typeof users == 'object', 'Expected an object for the basic auth users, found ' + typeof users + ' instead')
-    assert(typeof authorizer == 'function', 'Expected a function for the basic auth authorizer, found ' + typeof authorizer + ' instead')
-
-    function staticUsersAuthorizer(username, password) {
-        for(var i in users)
-            if(safeCompare(username, i) & safeCompare(password, users[i]))
-                return true
-
-        return false
-    }
-
-    return function authMiddleware(req, res, next) {
-        var authentication = auth(req)
-
-        if(!authentication)
-            return unauthorized()
-
-        req.auth = {
-            user: authentication.name,
-            password: authentication.pass
-        }
-
-        if(isAsync)
-            return authorizer(authentication.name, authentication.pass, authorizerCallback)
-        else if(!authorizer(authentication.name, authentication.pass))
-            return unauthorized()
-
-        return next()
-
-        function unauthorized() {
-            if(challenge) {
-                var challengeString = 'Basic'
-                var realmName = realm(req)
-
-                if(realmName)
-                    challengeString += ' realm="' + realmName + '"'
-
-                res.set('WWW-Authenticate', challengeString)
-            }
-
-            //TODO: Allow response body to be JSON (maybe autodetect?)
-            const response = getResponseBody(req)
-
-            if(typeof response == 'string')
-                return res.status(401).send(response)
-
-            return res.status(401).json(response)
-        }
-
-        function authorizerCallback(err, approved) {
-            assert.ifError(err)
-
-            if(approved)
-                return next()
-
-            return unauthorized()
-        }
-    }
-}
-
-buildMiddleware.safeCompare = safeCompare
-module.exports = buildMiddleware
Index: node_modules/passport-http-bearer/lib/strategy.js
===================================================================
diff --git a/node_modules/passport-http-bearer/lib/strategy.js b/node_modules/passport-http-bearer/lib/strategy.js
deleted file mode 100644
--- a/node_modules/passport-http-bearer/lib/strategy.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,163 +0,0 @@
-/**
- * Module dependencies.
- */
-var passport = require('passport-strategy')
-  , util = require('util');
-
-
-/**
- * Creates an instance of `Strategy`.
- *
- * The HTTP Bearer authentication strategy authenticates requests based on
- * a bearer token contained in the `Authorization` header field, `access_token`
- * body parameter, or `access_token` query parameter.
- *
- * Applications must supply a `verify` callback, for which the function
- * signature is:
- *
- *     function(token, done) { ... }
- *
- * `token` is the bearer token provided as a credential.  The verify callback
- * is responsible for finding the user who posesses the token, and invoking
- * `done` with the following arguments:
- *
- *     done(err, user, info);
- *
- * If the token is not valid, `user` should be set to `false` to indicate an
- * authentication failure.  Additional token `info` can optionally be passed as
- * a third argument, which will be set by Passport at `req.authInfo`, where it
- * can be used by later middleware for access control.  This is typically used
- * to pass any scope associated with the token.
- *
- * Options:
- *
- *   - `realm`  authentication realm, defaults to "Users"
- *   - `scope`  list of scope values indicating the required scope of the access
- *              token for accessing the requested resource
- *
- * Examples:
- *
- *     passport.use(new BearerStrategy(
- *       function(token, done) {
- *         User.findByToken({ token: token }, function (err, user) {
- *           if (err) { return done(err); }
- *           if (!user) { return done(null, false); }
- *           return done(null, user, { scope: 'read' });
- *         });
- *       }
- *     ));
- *
- * For further details on HTTP Bearer authentication, refer to [The OAuth 2.0 Authorization Protocol: Bearer Tokens](http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer)
- *
- * @constructor
- * @param {Object} [options]
- * @param {Function} verify
- * @api public
- */
-function Strategy(options, verify) {
-  if (typeof options == 'function') {
-    verify = options;
-    options = {};
-  }
-  if (!verify) { throw new TypeError('HTTPBearerStrategy requires a verify callback'); }
-  
-  passport.Strategy.call(this);
-  this.name = 'bearer';
-  this._verify = verify;
-  this._realm = options.realm || 'Users';
-  if (options.scope) {
-    this._scope = (Array.isArray(options.scope)) ? options.scope : [ options.scope ];
-  }
-  this._passReqToCallback = options.passReqToCallback;
-}
-
-/**
- * Inherit from `passport.Strategy`.
- */
-util.inherits(Strategy, passport.Strategy);
-
-/**
- * Authenticate request based on the contents of a HTTP Bearer authorization
- * header, body parameter, or query parameter.
- *
- * @param {Object} req
- * @api protected
- */
-Strategy.prototype.authenticate = function(req) {
-  var token;
-  
-  if (req.headers && req.headers.authorization) {
-    var parts = req.headers.authorization.split(' ');
-    if (parts.length == 2) {
-      var scheme = parts[0]
-        , credentials = parts[1];
-        
-      if (/^Bearer$/i.test(scheme)) {
-        token = credentials;
-      }
-    } else {
-      return this.fail(400);
-    }
-  }
-
-  if (req.body && req.body.access_token) {
-    if (token) { return this.fail(400); }
-    token = req.body.access_token;
-  }
-
-  if (req.query && req.query.access_token) {
-    if (token) { return this.fail(400); }
-    token = req.query.access_token;
-  }
-  
-  if (!token) { return this.fail(this._challenge()); }
-  
-  var self = this;
-  
-  function verified(err, user, info) {
-    if (err) { return self.error(err); }
-    if (!user) {
-      if (typeof info == 'string') {
-        info = { message: info }
-      }
-      info = info || {};
-      return self.fail(self._challenge('invalid_token', info.message));
-    }
-    self.success(user, info);
-  }
-  
-  if (self._passReqToCallback) {
-    this._verify(req, token, verified);
-  } else {
-    this._verify(token, verified);
-  }
-};
-
-/**
- * Build authentication challenge.
- *
- * @api private
- */
-Strategy.prototype._challenge = function(code, desc, uri) {
-  var challenge = 'Bearer realm="' + this._realm + '"';
-  if (this._scope) {
-    challenge += ', scope="' + this._scope.join(' ') + '"';
-  }
-  if (code) {
-    challenge += ', error="' + code + '"';
-  }
-  if (desc && desc.length) {
-    challenge += ', error_description="' + desc + '"';
-  }
-  if (uri && uri.length) {
-    challenge += ', error_uri="' + uri + '"';
-  }
-  
-  return challenge;
-};
-
-
-/**
- * Expose `Strategy`.
- */
-module.exports = Strategy;
Index: node_modules/passport-http-bearer/.jshintrc
===================================================================
diff --git a/node_modules/passport-http-bearer/.jshintrc b/node_modules/passport-http-bearer/.jshintrc
deleted file mode 100644
--- a/node_modules/passport-http-bearer/.jshintrc	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,20 +0,0 @@
-{
-  "node": true,
-  
-  "bitwise": true,
-  "camelcase": true,
-  "curly": true,
-  "forin": true,
-  "immed": true,
-  "latedef": true,
-  "newcap": true,
-  "noarg": true,
-  "noempty": true,
-  "nonew": true,
-  "quotmark": "single",
-  "undef": true,
-  "unused": true,
-  "trailing": true,
-  
-  "laxcomma": true
-}
Index: node_modules/express-basic-auth/example.js
===================================================================
diff --git a/node_modules/express-basic-auth/example.js b/node_modules/express-basic-auth/example.js
deleted file mode 100644
--- a/node_modules/express-basic-auth/example.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,132 +0,0 @@
-const express = require('express')
-
-var app = express()
-
-const basicAuth = require('./index.js')
-
-/**
-* express-basic-auth
-*
-* Example server. Just run in the same folder:
-*
-* npm install express express-basic-auth
-*
-* and then run this file with node ('node example.js')
-*
-* You can send GET requests to localhost:8080/async , /custom, /challenge or /static
-* and see how it refuses or accepts your request matching the basic auth settings.
-*/
-
-//TODO: Implement some form of automatic testing against the example server
-
-//Requires basic auth with username 'Admin' and password 'secret1234'
-var staticUserAuth = basicAuth({
-    users: {
-        'Admin': 'secret1234'
-    },
-    challenge: false
-})
-
-//Uses a custom (synchronous) authorizer function
-var customAuthorizerAuth = basicAuth({
-    authorizer: myAuthorizer
-})
-
-//Same, but sends a basic auth challenge header when authorization fails
-var challengeAuth = basicAuth({
-    authorizer: myAuthorizer,
-    challenge: true
-})
-
-//Uses a custom asynchronous authorizer function
-var asyncAuth = basicAuth({
-    authorizer: myAsyncAuthorizer,
-    authorizeAsync: true
-})
-
-//Uses a custom response body function
-var customBodyAuth = basicAuth({
-    users: { 'Foo': 'bar' },
-    unauthorizedResponse: getUnauthorizedResponse
-})
-
-//Uses a static response body
-var staticBodyAuth = basicAuth({
-    unauthorizedResponse: 'Haaaaaha'
-})
-
-//Uses a JSON response body
-var jsonBodyAuth = basicAuth({
-    unauthorizedResponse: { foo: 'bar' }
-})
-
-//Uses a custom realm
-var realmAuth = basicAuth({
-    challenge: true,
-    realm: 'test'
-})
-
-//Uses a custom realm function
-var realmFunctionAuth = basicAuth({
-    challenge: true,
-    realm: function (req) {
-        return 'bla'
-    }
-})
-
-app.get('/static', staticUserAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/custom', customAuthorizerAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/challenge', challengeAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/async', asyncAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/custombody', customBodyAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/staticbody', staticBodyAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/jsonbody', jsonBodyAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/realm', realmAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/realmfunction', realmFunctionAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.listen(8080, function() {
-    console.log("Listening!")
-})
-
-//Custom authorizer checking if the username starts with 'A' and the password with 'secret'
-function myAuthorizer(username, password) {
-    return username.startsWith('A') && password.startsWith('secret')
-}
-
-//Same but asynchronous
-function myAsyncAuthorizer(username, password, cb) {
-    if(username.startsWith('A') && password.startsWith('secret'))
-        return cb(null, true)
-    else
-        return cb(null, false)
-}
-
-function getUnauthorizedResponse(req) {
-    return req.auth ? ('Credentials ' + req.auth.user + ':' + req.auth.password + ' rejected') : 'No credentials provided'
-}
Index: node_modules/express-basic-auth/express-basic-auth.d.ts
===================================================================
diff --git a/node_modules/express-basic-auth/express-basic-auth.d.ts b/node_modules/express-basic-auth/express-basic-auth.d.ts
deleted file mode 100644
--- a/node_modules/express-basic-auth/express-basic-auth.d.ts	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,151 +0,0 @@
-/// <reference types="express" />
-
-import { Request, RequestHandler } from 'express'
-
-/**
- * This is the middleware builder.
- *
- * Example:
- *     const users = { alice: '1234', bob: 'correcthorsebatterystaple' }
- *     app.use(basicAuth({ users, challenge: true }), myHandler)
- *
- * @param options The middleware's options (at least 'users' or 'authorizer' are mandatory).
- */
-declare function expressBasicAuth(options: expressBasicAuth.BasicAuthMiddlewareOptions): RequestHandler
-
-declare namespace expressBasicAuth {
-    /**
-     * Time safe string comparison function to protect against timing attacks.
-     * 
-     * It is important to provide the arguments in the correct order, as the runtime
-     * depends only on the `userInput` argument. Switching the order would expose the `secret`
-     * to timing attacks.
-     * 
-     * @param userInput The user input to be compared
-     * @param secret The secret value the user input should be compared with
-     * 
-     * @returns true if `userInput` matches `secret`, false if not
-     */
-    export function safeCompare(userInput: string, secret: string): boolean
-
-    /**
-     * The configuration you pass to the middleware can take three forms, either:
-     *  - A map of static users ({ bob: 'pa$$w0rd', ... }) ;
-     *  - An authorizer function
-     *  - An asynchronous authorizer function
-     */
-    export type BasicAuthMiddlewareOptions = IUsersOptions | (IAuthorizerOptions | IAsyncAuthorizerOptions)
-
-    /**
-     * express-basic-auth patches the request object to set an `auth` property that lets you retrieve the authed user.
-     *
-     * Example (TypeScript):
-     *     app.use(basicAuth({ ... }), (req: basicAuth.IBasicAuthedRequest, res, next) => {
-     *         res.end(`Welcome ${req.auth.user} (your password is ${req.auth.password})`)
-     *         next()
-     *     })
-     */
-    export interface IBasicAuthedRequest extends Request {
-        auth: { user: string, password: string }
-    }
-
-    type Authorizer = (username: string, password: string) => boolean
-
-    type AsyncAuthorizerCallback = (err: any, authed?: boolean) => void
-
-    type AsyncAuthorizer = (username: string, password: string, callback: AsyncAuthorizerCallback) => void
-
-    type ValueOrFunction<T> = T | ((req: IBasicAuthedRequest) => T)
-
-    interface IBaseOptions {
-        /**
-         * Per default the middleware will not add a WWW-Authenticate challenge header to responses of unauthorized requests.
-         * You can enable that by setting this to true, causing most browsers to show a popup to enter credentials
-         * on unauthorized responses.
-         *
-         * @default false
-         */
-        challenge?: boolean
-
-        /**
-         * You can set the realm (the realm identifies the system to authenticate against and can be used by clients to
-         * save credentials) of the challenge by passing a string or a function that gets passed the request and is
-         * expected to return the realm.
-         *
-         * @default undefined
-         */
-        realm?: ValueOrFunction<string>
-
-        /**
-         * Per default, the response body for unauthorized responses will be empty.
-         * It can be configured using the unauthorizedResponse option. You can either pass a static response or a
-         * function that gets passed the express request object and is expected to return the response body.
-         * If the response body is a string, it will be used as-is, otherwise it will be sent as JSON.
-         *
-         * @default ''
-         */
-        unauthorizedResponse?: ValueOrFunction<any>
-    }
-
-    interface IUsersOptions extends IBaseOptions {
-        /**
-         * If you simply want to check basic auth against one or multiple static credentials, you can pass those
-         * credentials in the users option.
-         *
-         * Example:
-         *     const users = { alice: '1234', bob: 'correcthorsebatterystaple' }
-         *     app.use(basicAuth({ users, challenge: true }), myHandler)
-         */
-        users: { [username: string]: string }
-    }
-
-    interface IAuthorizerOptions extends IBaseOptions {
-        /**
-         * Set to true if your authorizer is asynchronous.
-         */
-        authorizeAsync?: false
-
-        /**
-         * You can pass your own authorizer function, to check the credentials however you want.
-         * It will be called with a username and password and is expected to return true or false to indicate that the
-         * credentials were approved or not:
-         *
-         * Example:
-         *     app.use(basicAuth({ authorizer }))
-         *
-         *     function myAuthorizer(username: string, password: string) {
-         *         return username.startsWith('A') && password.startsWith('secret');
-         *     }
-         *
-         * This will authorize all requests with credentials where the username begins with 'A' and the password begins
-         * with 'secret'. In an actual application you would likely look up some data instead ;-)
-         */
-        authorizer: Authorizer
-    }
-
-    interface IAsyncAuthorizerOptions extends IBaseOptions {
-        /**
-         * Set it to true to use a asynchronous authorizer.
-         */
-        authorizeAsync: true
-
-        /**
-         * You can pass an asynchronous authorizer. It will be passed a callback as the third parameter, which is
-         * expected to be called by standard node convention with an error and a boolean to indicate if the credentials
-         * have been approved or not.
-         *
-         * Example:
-         *     app.use(basicAuth({ authorizer, authorizeAsync: true }));
-         *
-         *     function authorizer(username, password, authorize) {
-         *         if(username.startsWith('A') && password.startsWith('secret'))
-         *             return authorize(null, true)
-         *         
-         *         return authorize(null, false)
-         *     }
-         */
-        authorizer: AsyncAuthorizer
-    }
-}
-
-export = expressBasicAuth
Index: node_modules/express-basic-auth/test.js
===================================================================
diff --git a/node_modules/express-basic-auth/test.js b/node_modules/express-basic-auth/test.js
deleted file mode 100644
--- a/node_modules/express-basic-auth/test.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,318 +0,0 @@
-const should = require('should')
-const express = require('express')
-const supertest = require('supertest')
-
-const basicAuth = require('./index.js')
-
-var app = express()
-
-//Requires basic auth with username 'Admin' and password 'secret1234'
-var staticUserAuth = basicAuth({
-    users: {
-        'Admin': 'secret1234'
-    },
-    challenge: false
-})
-
-//Uses a custom (synchronous) authorizer function
-var customAuthorizerAuth = basicAuth({
-    authorizer: myAuthorizer
-})
-
-//Uses a custom (synchronous) authorizer function
-var customCompareAuth = basicAuth({
-    authorizer: myComparingAuthorizer
-})
-
-//Same, but sends a basic auth challenge header when authorization fails
-var challengeAuth = basicAuth({
-    authorizer: myAuthorizer,
-    challenge: true
-})
-
-//Uses a custom asynchronous authorizer function
-var asyncAuth = basicAuth({
-    authorizer: myAsyncAuthorizer,
-    authorizeAsync: true
-})
-
-//Uses a custom response body function
-var customBodyAuth = basicAuth({
-    users: { 'Foo': 'bar' },
-    unauthorizedResponse: getUnauthorizedResponse
-})
-
-//Uses a static response body
-var staticBodyAuth = basicAuth({
-    unauthorizedResponse: 'Haaaaaha'
-})
-
-//Uses a JSON response body
-var jsonBodyAuth = basicAuth({
-    unauthorizedResponse: { foo: 'bar' }
-})
-
-//Uses a custom realm
-var realmAuth = basicAuth({
-    challenge: true,
-    realm: 'test'
-})
-
-//Uses a custom realm function
-var realmFunctionAuth = basicAuth({
-    challenge: true,
-    realm: function (req) {
-        return 'bla'
-    }
-})
-
-app.get('/static', staticUserAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/custom', customAuthorizerAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/custom-compare', customCompareAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/challenge', challengeAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/async', asyncAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/custombody', customBodyAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/staticbody', staticBodyAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/jsonbody', jsonBodyAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/realm', realmAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-app.get('/realmfunction', realmFunctionAuth, function(req, res) {
-    res.status(200).send('You passed')
-})
-
-//Custom authorizer checking if the username starts with 'A' and the password with 'secret'
-function myAuthorizer(username, password) {
-    return username.startsWith('A') && password.startsWith('secret')
-}
-
-//Same but asynchronous
-function myAsyncAuthorizer(username, password, cb) {
-    if(username.startsWith('A') && password.startsWith('secret'))
-        return cb(null, true)
-    else
-        return cb(null, false)
-}
-
-function myComparingAuthorizer(username, password) {
-    return basicAuth.safeCompare(username, 'Testeroni') & basicAuth.safeCompare(password, 'testsecret')
-}
-
-function getUnauthorizedResponse(req) {
-    return req.auth ? ('Credentials ' + req.auth.user + ':' + req.auth.password + ' rejected') : 'No credentials provided'
-}
-
-describe('express-basic-auth', function() {
-    describe('safe compare', function() {
-        const safeCompare = basicAuth.safeCompare
-
-        it('should return false on different inputs', function() {
-            (!!safeCompare('asdf', 'rftghe')).should.be.false()
-        })
-
-        it('should return false on prefix inputs', function() {
-            (!!safeCompare('some', 'something')).should.be.false()
-        })
-
-        it('should return false on different inputs', function() {
-            (!!safeCompare('anothersecret', 'anothersecret')).should.be.true()
-        })
-    })
-
-    describe('static users', function() {
-        const endpoint = '/static'
-
-        it('should reject on missing header', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .expect(401, done)
-        })
-
-        it('should reject on wrong credentials', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('dude', 'stuff')
-                .expect(401, done)
-        })
-
-        it('should reject on shorter prefix', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('Admin', 'secret')
-                .expect(401, done)
-        })
-
-        it('should reject without challenge', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('dude', 'stuff')
-                .expect(function (res) {
-                    if(res.headers['WWW-Authenticate'])
-                        throw new Error('Response should not have a challenge')
-                })
-                .expect(401, done)
-        })
-
-        it('should accept correct credentials', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('Admin', 'secret1234')
-                .expect(200, 'You passed', done)
-        })
-    })
-
-    describe('custom authorizer', function() {
-        const endpoint = '/custom'
-
-        it('should reject on missing header', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .expect(401, done)
-        })
-
-        it('should reject on wrong credentials', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('dude', 'stuff')
-                .expect(401, done)
-        })
-
-        it('should accept fitting credentials', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('Aloha', 'secretverymuch')
-                .expect(200, 'You passed', done)
-        })
-
-        describe('with safe compare', function() {
-            const endpoint = '/custom-compare'
-            
-            it('should reject wrong credentials', function(done) {
-                supertest(app)
-                    .get(endpoint)
-                    .auth('bla', 'blub')
-                    .expect(401, done)
-            })
-
-            it('should reject prefix credentials', function(done) {
-                supertest(app)
-                    .get(endpoint)
-                    .auth('Test', 'test')
-                    .expect(401, done)
-            })
-
-            it('should accept fitting credentials', function(done) {
-                supertest(app)
-                    .get(endpoint)
-                    .auth('Testeroni', 'testsecret')
-                    .expect(200, 'You passed', done)
-            })
-        })
-    })
-
-    describe('async authorizer', function() {
-        const endpoint = '/async'
-
-        it('should reject on missing header', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .expect(401, done)
-        })
-
-        it('should reject on wrong credentials', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('dude', 'stuff')
-                .expect(401, done)
-        })
-
-        it('should accept fitting credentials', function(done) {
-            supertest(app)
-                .get(endpoint)
-                .auth('Aererer', 'secretiveStuff')
-                .expect(200, 'You passed', done)
-        })
-    })
-
-    describe('custom response body', function() {
-        it('should reject on missing header and generate resposne message', function(done) {
-            supertest(app)
-                .get('/custombody')
-                .expect(401, 'No credentials provided', done)
-        })
-
-        it('should reject on wrong credentials and generate response message', function(done) {
-            supertest(app)
-                .get('/custombody')
-                .auth('dude', 'stuff')
-                .expect(401, 'Credentials dude:stuff rejected', done)
-        })
-
-        it('should accept fitting credentials', function(done) {
-            supertest(app)
-                .get('/custombody')
-                .auth('Foo', 'bar')
-                .expect(200, 'You passed', done)
-        })
-
-        it('should reject and send static custom resposne message', function(done) {
-            supertest(app)
-            .get('/staticbody')
-            .expect(401, 'Haaaaaha', done)
-        })
-
-        it('should reject and send static custom json resposne message', function(done) {
-            supertest(app)
-            .get('/jsonbody')
-            .expect(401, { foo: 'bar' }, done)
-        })
-    })
-
-    describe('challenge', function() {
-        it('should reject with blank challenge', function(done) {
-            supertest(app)
-                .get('/challenge')
-                .expect('WWW-Authenticate', 'Basic')
-                .expect(401, done)
-        })
-
-        it('should reject with custom realm challenge', function(done) {
-            supertest(app)
-                .get('/realm')
-                .expect('WWW-Authenticate', 'Basic realm="test"')
-                .expect(401, done)
-        })
-
-        it('should reject with custom generated realm challenge', function(done) {
-            supertest(app)
-                .get('/realmfunction')
-                .expect('WWW-Authenticate', 'Basic realm="bla"')
-                .expect(401, done)
-        })
-    })
-})
Index: node_modules/passport-http-bearer/README.md
===================================================================
diff --git a/node_modules/passport-http-bearer/README.md b/node_modules/passport-http-bearer/README.md
deleted file mode 100644
--- a/node_modules/passport-http-bearer/README.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,87 +0,0 @@
-# passport-http-bearer
-
-[![Build](https://travis-ci.org/jaredhanson/passport-http-bearer.png)](http://travis-ci.org/jaredhanson/passport-http-bearer)
-[![Coverage](https://coveralls.io/repos/jaredhanson/passport-http-bearer/badge.png)](https://coveralls.io/r/jaredhanson/passport-http-bearer)
-[![Dependencies](https://david-dm.org/jaredhanson/passport-http-bearer.png)](http://david-dm.org/jaredhanson/passport-http-bearer)
-
-
-HTTP Bearer authentication strategy for [Passport](http://passportjs.org/).
-
-This module lets you authenticate HTTP requests using bearer tokens, as
-specified by [RFC 6750](http://tools.ietf.org/html/rfc6750), in your Node.js
-applications.  Bearer tokens are typically used protect API endpoints, and are
-often issued using OAuth 2.0.
-
-By plugging into Passport, bearer token support can be easily and unobtrusively
-integrated into any application or framework that supports
-[Connect](http://www.senchalabs.org/connect/)-style middleware, including
-[Express](http://expressjs.com/).
-
-## Install
-
-    $ npm install passport-http-bearer
-
-## Usage
-
-#### Configure Strategy
-
-The HTTP Bearer authentication strategy authenticates users using a bearer
-token.  The strategy requires a `verify` callback, which accepts that
-credential and calls `done` providing a user.  Optional `info` can be passed,
-typically including associated scope, which will be set by Passport at
-`req.authInfo` to be used by later middleware for authorization and access
-control.
-
-    passport.use(new BearerStrategy(
-      function(token, done) {
-        User.findOne({ token: token }, function (err, user) {
-          if (err) { return done(err); }
-          if (!user) { return done(null, false); }
-          return done(null, user, { scope: 'all' });
-        });
-      }
-    ));
-
-#### Authenticate Requests
-
-Use `passport.authenticate()`, specifying the `'bearer'` strategy, to
-authenticate requests.  Requests containing bearer tokens do not require session
-support, so the `session` option can be set to `false`.
-
-For example, as route middleware in an [Express](http://expressjs.com/)
-application:
-
-    app.get('/profile', 
-      passport.authenticate('bearer', { session: false }),
-      function(req, res) {
-        res.json(req.user);
-      });
-
-#### Issuing Tokens
-
-Bearer tokens are typically issued using OAuth 2.0.  [OAuth2orize](https://github.com/jaredhanson/oauth2orize)
-is a toolkit for implementing OAuth 2.0 servers and issuing bearer tokens.  Once
-issued, this module can be used to authenticate tokens as described above.
-
-## Examples
-
-For a complete, working example, refer to the [Bearer example](https://github.com/jaredhanson/passport-http-bearer/tree/master/examples/bearer).
-
-## Related Modules
-
-- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) — OAuth 2.0 authorization server toolkit
-
-## Tests
-
-    $ npm install
-    $ npm test
-
-## Credits
-
-  - [Jared Hanson](http://github.com/jaredhanson)
-
-## License
-
-[The MIT License](http://opensource.org/licenses/MIT)
-
-Copyright (c) 2011-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>
Index: node_modules/express-basic-auth/README.md
===================================================================
diff --git a/node_modules/express-basic-auth/README.md b/node_modules/express-basic-auth/README.md
deleted file mode 100644
--- a/node_modules/express-basic-auth/README.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,216 +0,0 @@
-# express-basic-auth
-
-[![npm version](https://badge.fury.io/js/express-basic-auth.svg)](https://badge.fury.io/js/express-basic-auth)
-[![npm](https://img.shields.io/npm/dm/express-basic-auth.svg)]()
-[![CircleCI](https://circleci.com/gh/LionC/express-basic-auth/tree/master.svg?style=shield&circle-token=74f7b1557100b45259e67d2492c263e4f99365d4)](https://circleci.com/gh/LionC/express-basic-auth/tree/master)
-[![David](https://img.shields.io/david/strongloop/express.svg)]()
-![TypeScript compatible](https://img.shields.io/badge/typescript-compatible-brightgreen.svg)
-[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)
-
-Simple plug & play HTTP basic auth middleware for Express.
-
-## How to install
-
-Just run
-
-```shell
-npm install express-basic-auth
-```
-
-## How to use
-
-The module will export a function, that you can call with an options object to
-get the middleware:
-
-```js
-const app = require('express')()
-const basicAuth = require('express-basic-auth')
-
-app.use(basicAuth({
-    users: { 'admin': 'supersecret' }
-}))
-```
-
-The middleware will now check incoming requests to match the credentials
-`admin:supersecret`.
-
-The middleware will check incoming requests for a basic auth (`Authorization`)
-header, parse it and check if the credentials are legit. If there are any
-credentials, an `auth` property will be added to the request, containing
-an object with `user` and `password` properties, filled with the credentials,
-no matter if they are legit or not.
-
-**If a request is found to not be authorized**, it will respond with HTTP 401
-and a configurable body (default empty).
-
-### Static Users
-
-If you simply want to check basic auth against one or multiple static credentials,
-you can pass those credentials in the `users` option:
-
-```js
-app.use(basicAuth({
-    users: {
-        'admin': 'supersecret',
-        'adam': 'password1234',
-        'eve': 'asdfghjkl',
-    }
-}))
-```
-
-The middleware will check incoming requests to have a basic auth header matching
-one of the three passed credentials.
-
-### Custom authorization
-
-Alternatively, you can pass your own `authorizer` function, to check the credentials
-however you want. It will be called with a username and password and is expected to
-return `true` or `false` to indicate that the credentials were approved or not.
-
-When using your own `authorizer`, make sure **not to use standard string comparison (`==` / `===`)**
-when comparing user input with secret credentials, as that would make you vulnerable against
-[timing attacks](https://en.wikipedia.org/wiki/Timing_attack). Use the provided `safeCompare`
-function instead - always provide the user input as its first argument. Also make sure to use bitwise
-logic operators (`|` and `&`) instead of the standard ones (`||` and `&&`) for the same reason, as
-the standard ones use shortcuts.
-
-```js
-app.use(basicAuth( { authorizer: myAuthorizer } ))
-
-function myAuthorizer(username, password) {
-    const userMatches = basicAuth.safeCompare(username, 'customuser')
-    const passwordMatches = basicAuth.safeCompare(password, 'custompassword')
-
-    return userMatches & passwordMatches
-}
-```
-
-This will authorize all requests with the credentials 'customuser:custompassword'.
-In an actual application you would likely look up some data instead ;-) You can do whatever you
-want in custom authorizers, just return `true` or `false` in the end and stay aware of timing
-attacks.
-
-### Custom Async Authorization
-
-Note that the `authorizer` function above is expected to be synchronous. This is
-the default behavior, you can pass `authorizeAsync: true` in the options object to indicate
-that your authorizer is asynchronous. In this case it will be passed a callback
-as the third parameter, which is expected to be called by standard node convention
-with an error and a boolean to indicate if the credentials have been approved or not.
-Let's look at the same authorizer again, but this time asynchronous:
-
-```js
-app.use(basicAuth({
-    authorizer: myAsyncAuthorizer,
-    authorizeAsync: true,
-}))
-
-function myAsyncAuthorizer(username, password, cb) {
-    if (username.startsWith('A') & password.startsWith('secret'))
-        return cb(null, true)
-    else
-        return cb(null, false)
-}
-```
-
-### Unauthorized Response Body
-
-Per default, the response body for unauthorized responses will be empty. It can
-be configured using the `unauthorizedResponse` option. You can either pass a
-static response or a function that gets passed the express request object and is
-expected to return the response body. If the response body is a string, it will
-be used as-is, otherwise it will be sent as JSON:
-
-```js
-app.use(basicAuth({
-    users: { 'Foo': 'bar' },
-    unauthorizedResponse: getUnauthorizedResponse
-}))
-
-function getUnauthorizedResponse(req) {
-    return req.auth
-        ? ('Credentials ' + req.auth.user + ':' + req.auth.password + ' rejected')
-        : 'No credentials provided'
-}
-```
-
-### Challenge
-
-Per default the middleware will not add a `WWW-Authenticate` challenge header to
-responses of unauthorized requests. You can enable that by adding `challenge: true`
-to the options object. This will cause most browsers to show a popup to enter
-credentials on unauthorized responses. You can set the realm (the realm
-identifies the system to authenticate against and can be used by clients to save
-credentials) of the challenge by passing a static string or a function that gets
-passed the request object and is expected to return the challenge:
-
-```js
-app.use(basicAuth({
-    users: { 'someuser': 'somepassword' },
-    challenge: true,
-    realm: 'Imb4T3st4pp',
-}))
-```
-
-## Try it
-
-The repository contains an `example.js` that you can run to play around and try
-the middleware. To use it just put it somewhere (or leave it where it is), run
-
-```shell
-npm install express express-basic-auth
-node example.js
-```
-
-This will start a small express server listening at port 8080. Just look at the file,
-try out the requests and play around with the options.
-
-## TypeScript usage
-
-A declaration file is bundled with the library. You don't have to install a `@types/` package.
-
-```typescript
-import * as basicAuth from 'express-basic-auth'
-```
-
-:bulb: **Using `req.auth`**
-
-express-basic-auth sets `req.auth` to an object containing the authorized credentials like `{ user: 'admin', password: 'supersecret' }`.
-
-In order to use that `req.auth` property in TypeScript without an unknown property error, use covariance to downcast the request type:
-
-```typescript
-app.use(basicAuth(options), (req: basicAuth.IBasicAuthedRequest, res, next) => {
-    res.end(`Welcome ${req.auth.user} (your password is ${req.auth.password})`)
-    next()
-})
-```
-
-:bulb: **A note about type inference on synchronous authorizers**
-
-Due to some TypeScript's type-system limitation, the arguments' type of the synchronous authorizers are not inferred.
-For example, on an asynchronous authorizer, the three arguments are correctly inferred:
-
-```typescript
-basicAuth({
-    authorizeAsync: true,
-    authorizer: (user, password, authorize) => authorize(null, password == 'secret'),
-})
-```
-
-However, on a synchronous authorizer, you'll have to type the arguments yourself:
-
-```typescript
-basicAuth({
-    authorizer: (user: string, password: string) => (password == 'secret')
-})
-```
-
-## Tests
-
-The cases in the `example.js` are also used for automated testing. So if you want  
-to contribute or just make sure that the package still works, simply run:
-
-```shell
-npm test
-```
Index: node_modules/passport-http-bearer/lib/index.js
===================================================================
diff --git a/node_modules/passport-http-bearer/lib/index.js b/node_modules/passport-http-bearer/lib/index.js
deleted file mode 100644
--- a/node_modules/passport-http-bearer/lib/index.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,15 +0,0 @@
-/**
- * Module dependencies.
- */
-var Strategy = require('./strategy');
-
-
-/**
- * Expose `Strategy` directly from package.
- */
-exports = module.exports = Strategy;
-
-/**
- * Export constructors.
- */
-exports.Strategy = Strategy;
Index: node_modules/passport-http-bearer/.travis.yml
===================================================================
diff --git a/node_modules/passport-http-bearer/.travis.yml b/node_modules/passport-http-bearer/.travis.yml
deleted file mode 100644
--- a/node_modules/passport-http-bearer/.travis.yml	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,15 +0,0 @@
-language: "node_js"
-node_js:
-  - "0.4"
-  - "0.6"
-  - "0.8"
-  - "0.10"
-
-before_install:
- - "npm install istanbul -g"
- - "npm install coveralls -g"
-
-script: "make ci-travis"
-
-after_success:
-  - "make submit-coverage-to-coveralls"
Index: node_modules/passport-http-bearer/package.json
===================================================================
diff --git a/node_modules/passport-http-bearer/package.json b/node_modules/passport-http-bearer/package.json
deleted file mode 100644
--- a/node_modules/passport-http-bearer/package.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,60 +0,0 @@
-{
-  "name": "passport-http-bearer",
-  "version": "1.0.1",
-  "description": "HTTP Bearer authentication strategy for Passport.",
-  "keywords": [
-    "passport",
-    "auth",
-    "authn",
-    "authentication",
-    "authz",
-    "authorization",
-    "http",
-    "bearer",
-    "token",
-    "oauth"
-  ],
-  "repository": {
-    "type": "git",
-    "url": "git://github.com/jaredhanson/passport-http-bearer.git"
-  },
-  "bugs": {
-    "url": "http://github.com/jaredhanson/passport-http-bearer/issues"
-  },
-  "author": {
-    "name": "Jared Hanson",
-    "email": "jaredhanson@gmail.com",
-    "url": "http://www.jaredhanson.net/"
-  },
-  "licenses": [
-    {
-      "type": "MIT",
-      "url": "http://www.opensource.org/licenses/MIT"
-    }
-  ],
-  "main": "./lib",
-  "dependencies": {
-    "passport-strategy": "1.x.x"
-  },
-  "devDependencies": {
-    "mocha": "1.x.x",
-    "chai": "1.x.x",
-    "chai-passport-strategy": "0.1.x"
-  },
-  "engines": {
-    "node": ">= 0.4.0"
-  },
-  "scripts": {
-    "test": "node_modules/.bin/mocha --reporter spec --require test/bootstrap/node test/*.test.js"
-  },
-  "testling": {
-    "browsers": [
-      "chrome/latest"
-    ],
-    "harness" : "mocha",
-    "files": [
-      "test/bootstrap/testling.js",
-      "test/*.test.js"
-    ]
-  }
-}
Index: node_modules/express-basic-auth/.circleci/config.yml
===================================================================
diff --git a/node_modules/express-basic-auth/.circleci/config.yml b/node_modules/express-basic-auth/.circleci/config.yml
deleted file mode 100644
--- a/node_modules/express-basic-auth/.circleci/config.yml	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ /dev/null	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
@@ -1,37 +0,0 @@
-# Javascript Node CircleCI 2.0 configuration file
-#
-# Check https://circleci.com/docs/2.0/language-javascript/ for more details
-#
-version: 2
-jobs:
-  build:
-    docker:
-      # specify the version you desire here
-      - image: circleci/node:7.10
-      
-      # Specify service dependencies here if necessary
-      # CircleCI maintains a library of pre-built images
-      # documented at https://circleci.com/docs/2.0/circleci-images/
-      # - image: circleci/mongo:3.4.4
-
-    working_directory: ~/repo
-
-    steps:
-      - checkout
-
-      # Download and cache dependencies
-      - restore_cache:
-          keys:
-          - v1-dependencies-{{ checksum "package.json" }}
-          # fallback to using the latest cache if no exact match is found
-          - v1-dependencies-
-
-      - run: npm install
-
-      - save_cache:
-          paths:
-            - node_modules
-          key: v1-dependencies-{{ checksum "package.json" }}
-        
-      # run tests!
-      - run: npm test
Index: views/login.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><head>\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\"></head>\r\n</head>\r\n<style>\r\n  .profile-image-pic{\r\n    height: 200px;\r\n    width: 200px;\r\n    object-fit: scale-down;\r\n  }\r\n  .cardbody-color{\r\n    background-color: lightgray;\r\n  }\r\n  a{\r\n    text-decoration: none;\r\n  }\r\n  .button:hover {\r\n    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.5),0 17px 50px 0 rgba(0,0,0,0.19);\r\n  }\r\n  .button {\r\n    background-color: rgb(54, 54, 54);\r\n    border: none;\r\n    color: white;\r\n    padding: 5px 20px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline;\r\n    font-size: 16px;\r\n    margin: 4px 2px;\r\n    cursor: pointer;\r\n    -webkit-transition-duration: 0.4s; /* Safari */\r\n    transition-duration: 0.4s;\r\n  }\r\n  body{\r\n    background-image: url(\"https://images.hdqwalls.com/wallpapers/vaporwave-zl.jpg\") !important;\r\n    background-size: cover;\r\n  }\r\n</style>\r\n<div class=\"background\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 offset-md-3\">\r\n        <div class=\"card my-5\">\r\n\r\n          <form class=\"card-body cardbody-color p-lg-5\">\r\n\r\n            <div class=\"text-center\">\r\n              <img src=\"./images/Logo.png\" class=\"img-fluid profile-image-pic img-thumbnail rounded-circle my-3\"\r\n                   alt=\"Logo\">\r\n            </div>\r\n\r\n            <div class=\"mb-3\">\r\n              <input type=\"text\" class=\"form-control\" id=\"Username\" aria-describedby=\"emailHelp\"\r\n                     placeholder=\"User Name\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"password\">\r\n            </div>\r\n            <div class=\"text-center\"><button type=\"submit\" class=\"button\">Login</button></div>\r\n            <div id=\"emailHelp\" class=\"form-text text-center mb-5 text-dark\">Not\r\n              Registered? <a href=\"#\" class=\"text-dark fw-bold\"> Create an\r\n                Account</a>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/login.ejs b/views/login.ejs
--- a/views/login.ejs	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/views/login.ejs	(date 1649271738599)
@@ -41,7 +41,7 @@
       <div class="col-md-6 offset-md-3">
         <div class="card my-5">
 
-          <form class="card-body cardbody-color p-lg-5">
+          <form action="http://localhost:3000/login" class="card-body cardbody-color p-lg-5" method="post">
 
             <div class="text-center">
               <img src="./images/Logo.png" class="img-fluid profile-image-pic img-thumbnail rounded-circle my-3"
@@ -49,11 +49,11 @@
             </div>
 
             <div class="mb-3">
-              <input type="text" class="form-control" id="Username" aria-describedby="emailHelp"
+              <input type="text" class="form-control" id="Username" name="username" aria-describedby="emailHelp"
                      placeholder="User Name">
             </div>
             <div class="mb-3">
-              <input type="password" class="form-control" id="password" placeholder="password">
+              <input type="password" class="form-control" id="password" name="password" placeholder="password">
             </div>
             <div class="text-center"><button type="submit" class="button">Login</button></div>
             <div id="emailHelp" class="form-text text-center mb-5 text-dark">Not
Index: node_modules/.package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"421proj\",\r\n  \"version\": \"0.0.0\",\r\n  \"lockfileVersion\": 2,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"node_modules/accepts\": {\r\n      \"version\": \"1.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz\",\r\n      \"integrity\": \"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\r\n      \"dependencies\": {\r\n        \"mime-types\": \"~2.1.34\",\r\n        \"negotiator\": \"0.6.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/array-flatten\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=\"\r\n    },\r\n    \"node_modules/basic-auth\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"5.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/bignumber.js\": {\r\n      \"version\": \"9.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.0.tgz\",\r\n      \"integrity\": \"sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A==\",\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/body-parser\": {\r\n      \"version\": \"1.18.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz\",\r\n      \"integrity\": \"sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=\",\r\n      \"dependencies\": {\r\n        \"bytes\": \"3.0.0\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"http-errors\": \"~1.6.3\",\r\n        \"iconv-lite\": \"0.4.23\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"qs\": \"6.5.2\",\r\n        \"raw-body\": \"2.3.3\",\r\n        \"type-is\": \"~1.6.16\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/bytes\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz\",\r\n      \"integrity\": \"sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/content-disposition\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz\",\r\n      \"integrity\": \"sha1-DPaLud318r55YcOoUXjLhdunjLQ=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/content-type\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/cookie\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/cookie-parser\": {\r\n      \"version\": \"1.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz\",\r\n      \"integrity\": \"sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==\",\r\n      \"dependencies\": {\r\n        \"cookie\": \"0.4.1\",\r\n        \"cookie-signature\": \"1.0.6\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/cookie-signature\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",\r\n      \"integrity\": \"sha1-4wOogrNCzD7oylE6eZmXNNqzriw=\"\r\n    },\r\n    \"node_modules/core-util-is\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\"\r\n    },\r\n    \"node_modules/debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"dependencies\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/depd\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/destroy\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz\",\r\n      \"integrity\": \"sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=\"\r\n    },\r\n    \"node_modules/ee-first\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=\"\r\n    },\r\n    \"node_modules/ejs\": {\r\n      \"version\": \"2.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ejs/-/ejs-2.6.2.tgz\",\r\n      \"integrity\": \"sha512-PcW2a0tyTuPHz3tWyYqtK6r1fZ3gp+3Sop8Ph+ZYN81Ob5rwmbHEzaqs10N3BEsaGTkh/ooniXK+WwszGlc2+Q==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/encodeurl\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/escape-html\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\r\n      \"integrity\": \"sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=\"\r\n    },\r\n    \"node_modules/etag\": {\r\n      \"version\": \"1.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\r\n      \"integrity\": \"sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/express\": {\r\n      \"version\": \"4.16.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.16.4.tgz\",\r\n      \"integrity\": \"sha512-j12Uuyb4FMrd/qQAm6uCHAkPtO8FDTRJZBDd5D2KOL2eLaz1yUNdUB/NOIyq0iU4q4cFarsUCrnFDPBcnksuOg==\",\r\n      \"dependencies\": {\r\n        \"accepts\": \"~1.3.5\",\r\n        \"array-flatten\": \"1.1.1\",\r\n        \"body-parser\": \"1.18.3\",\r\n        \"content-disposition\": \"0.5.2\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"cookie\": \"0.3.1\",\r\n        \"cookie-signature\": \"1.0.6\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"finalhandler\": \"1.1.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"merge-descriptors\": \"1.0.1\",\r\n        \"methods\": \"~1.1.2\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"path-to-regexp\": \"0.1.7\",\r\n        \"proxy-addr\": \"~2.0.4\",\r\n        \"qs\": \"6.5.2\",\r\n        \"range-parser\": \"~1.2.0\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"send\": \"0.16.2\",\r\n        \"serve-static\": \"1.13.2\",\r\n        \"setprototypeof\": \"1.1.0\",\r\n        \"statuses\": \"~1.4.0\",\r\n        \"type-is\": \"~1.6.16\",\r\n        \"utils-merge\": \"1.0.1\",\r\n        \"vary\": \"~1.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/express/node_modules/cookie\": {\r\n      \"version\": \"0.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz\",\r\n      \"integrity\": \"sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/finalhandler\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-Y1GUDo39ez4aHAw7MysnUD5JzYX+WaIj8I57kO3aEPT1fFRL4sr7mjei97FgnwhAyyzRYmQZaTHb2+9uZ1dPtg==\",\r\n      \"dependencies\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"statuses\": \"~1.4.0\",\r\n        \"unpipe\": \"~1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/forwarded\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz\",\r\n      \"integrity\": \"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/fresh\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\r\n      \"integrity\": \"sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/http-errors\": {\r\n      \"version\": \"1.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz\",\r\n      \"integrity\": \"sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=\",\r\n      \"dependencies\": {\r\n        \"depd\": \"~1.1.2\",\r\n        \"inherits\": \"2.0.3\",\r\n        \"setprototypeof\": \"1.1.0\",\r\n        \"statuses\": \">= 1.4.0 < 2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/iconv-lite\": {\r\n      \"version\": \"0.4.23\",\r\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz\",\r\n      \"integrity\": \"sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==\",\r\n      \"dependencies\": {\r\n        \"safer-buffer\": \">= 2.1.2 < 3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/inherits\": {\r\n      \"version\": \"2.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\r\n      \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\"\r\n    },\r\n    \"node_modules/ipaddr.js\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/isarray\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\"\r\n    },\r\n    \"node_modules/media-typer\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",\r\n      \"integrity\": \"sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/merge-descriptors\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=\"\r\n    },\r\n    \"node_modules/methods\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/mime\": {\r\n      \"version\": \"1.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.4.1.tgz\",\r\n      \"integrity\": \"sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==\",\r\n      \"bin\": {\r\n        \"mime\": \"cli.js\"\r\n      }\r\n    },\r\n    \"node_modules/mime-db\": {\r\n      \"version\": \"1.52.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\r\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/mime-types\": {\r\n      \"version\": \"2.1.35\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\r\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\r\n      \"dependencies\": {\r\n        \"mime-db\": \"1.52.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/morgan\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/morgan/-/morgan-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-HQStPIV4y3afTiCYVxirakhlCfGkI161c76kKFca7Fk1JusM//Qeo1ej2XaMniiNeaZklMVrh3vTtIzpzwbpmA==\",\r\n      \"dependencies\": {\r\n        \"basic-auth\": \"~2.0.0\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"on-headers\": \"~1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\"\r\n    },\r\n    \"node_modules/mysql\": {\r\n      \"version\": \"2.18.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/mysql/-/mysql-2.18.1.tgz\",\r\n      \"integrity\": \"sha512-Bca+gk2YWmqp2Uf6k5NFEurwY/0td0cpebAucFpY/3jhrwrVGuxU2uQFCHjU19SJfje0yQvi+rVWdq78hR5lig==\",\r\n      \"dependencies\": {\r\n        \"bignumber.js\": \"9.0.0\",\r\n        \"readable-stream\": \"2.3.7\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"sqlstring\": \"2.3.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/negotiator\": {\r\n      \"version\": \"0.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz\",\r\n      \"integrity\": \"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/on-finished\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",\r\n      \"integrity\": \"sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=\",\r\n      \"dependencies\": {\r\n        \"ee-first\": \"1.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/on-headers\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/parseurl\": {\r\n      \"version\": \"1.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\r\n      \"integrity\": \"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/path-to-regexp\": {\r\n      \"version\": \"0.1.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz\",\r\n      \"integrity\": \"sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=\"\r\n    },\r\n    \"node_modules/process-nextick-args\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\"\r\n    },\r\n    \"node_modules/proxy-addr\": {\r\n      \"version\": \"2.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\",\r\n      \"integrity\": \"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\",\r\n      \"dependencies\": {\r\n        \"forwarded\": \"0.2.0\",\r\n        \"ipaddr.js\": \"1.9.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/qs\": {\r\n      \"version\": \"6.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.5.2.tgz\",\r\n      \"integrity\": \"sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.6\"\r\n      }\r\n    },\r\n    \"node_modules/range-parser\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/raw-body\": {\r\n      \"version\": \"2.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz\",\r\n      \"integrity\": \"sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==\",\r\n      \"dependencies\": {\r\n        \"bytes\": \"3.0.0\",\r\n        \"http-errors\": \"1.6.3\",\r\n        \"iconv-lite\": \"0.4.23\",\r\n        \"unpipe\": \"1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/readable-stream\": {\r\n      \"version\": \"2.3.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz\",\r\n      \"integrity\": \"sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==\",\r\n      \"dependencies\": {\r\n        \"core-util-is\": \"~1.0.0\",\r\n        \"inherits\": \"~2.0.3\",\r\n        \"isarray\": \"~1.0.0\",\r\n        \"process-nextick-args\": \"~2.0.0\",\r\n        \"safe-buffer\": \"~5.1.1\",\r\n        \"string_decoder\": \"~1.1.1\",\r\n        \"util-deprecate\": \"~1.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/safe-buffer\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\r\n    },\r\n    \"node_modules/safer-buffer\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\"\r\n    },\r\n    \"node_modules/send\": {\r\n      \"version\": \"0.16.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.16.2.tgz\",\r\n      \"integrity\": \"sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw==\",\r\n      \"dependencies\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"destroy\": \"~1.0.4\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"http-errors\": \"~1.6.2\",\r\n        \"mime\": \"1.4.1\",\r\n        \"ms\": \"2.0.0\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"range-parser\": \"~1.2.0\",\r\n        \"statuses\": \"~1.4.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/serve-static\": {\r\n      \"version\": \"1.13.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz\",\r\n      \"integrity\": \"sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw==\",\r\n      \"dependencies\": {\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"send\": \"0.16.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/setprototypeof\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\"\r\n    },\r\n    \"node_modules/sqlstring\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz\",\r\n      \"integrity\": \"sha1-R1OT/56RR5rqYtyvDKPRSYOn+0A=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/statuses\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/string_decoder\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"~5.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/type-is\": {\r\n      \"version\": \"1.6.18\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\",\r\n      \"integrity\": \"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\r\n      \"dependencies\": {\r\n        \"media-typer\": \"0.3.0\",\r\n        \"mime-types\": \"~2.1.24\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/unpipe\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/util-deprecate\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=\"\r\n    },\r\n    \"node_modules/utils-merge\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/vary\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/.package-lock.json b/node_modules/.package-lock.json
--- a/node_modules/.package-lock.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/.package-lock.json	(date 1649271546923)
@@ -41,33 +41,123 @@
       }
     },
     "node_modules/body-parser": {
-      "version": "1.18.3",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
-      "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
+      "version": "1.20.0",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.0.tgz",
+      "integrity": "sha512-DfJ+q6EPcGKZD1QWUjSpqp+Q7bDQTsQIF4zfUAtZ6qk+H/3/QRhg9CEp39ss+/T2vw0+HaidC0ecJj/DRLIaKg==",
       "dependencies": {
-        "bytes": "3.0.0",
+        "bytes": "3.1.2",
         "content-type": "~1.0.4",
         "debug": "2.6.9",
-        "depd": "~1.1.2",
-        "http-errors": "~1.6.3",
-        "iconv-lite": "0.4.23",
-        "on-finished": "~2.3.0",
-        "qs": "6.5.2",
-        "raw-body": "2.3.3",
-        "type-is": "~1.6.16"
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "on-finished": "2.4.1",
+        "qs": "6.10.3",
+        "raw-body": "2.5.1",
+        "type-is": "~1.6.18",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
+      }
+    },
+    "node_modules/body-parser/node_modules/depd": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/body-parser/node_modules/destroy": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
+      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
+      "engines": {
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
+      }
+    },
+    "node_modules/body-parser/node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "dependencies": {
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/body-parser/node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+    },
+    "node_modules/body-parser/node_modules/on-finished": {
+      "version": "2.4.1",
+      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
+      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
+      "dependencies": {
+        "ee-first": "1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/body-parser/node_modules/qs": {
+      "version": "6.10.3",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.10.3.tgz",
+      "integrity": "sha512-wr7M2E0OFRfIfJZjKGieI8lBKb7fRCH4Fv5KNPEs7gJ8jadvotdsS08PzOKR7opXhZ/Xkjtt3WF9g38drmyRqQ==",
+      "dependencies": {
+        "side-channel": "^1.0.4"
+      },
+      "engines": {
+        "node": ">=0.6"
       },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/body-parser/node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+    },
+    "node_modules/body-parser/node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
       "engines": {
         "node": ">= 0.8"
       }
     },
     "node_modules/bytes": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
-      "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=",
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
+      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
       "engines": {
         "node": ">= 0.8"
       }
     },
+    "node_modules/call-bind": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
+      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
+      "dependencies": {
+        "function-bind": "^1.1.1",
+        "get-intrinsic": "^1.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/content-disposition": {
       "version": "0.5.2",
       "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz",
@@ -209,6 +299,34 @@
         "node": ">= 0.10.0"
       }
     },
+    "node_modules/express/node_modules/body-parser": {
+      "version": "1.18.3",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
+      "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
+      "dependencies": {
+        "bytes": "3.0.0",
+        "content-type": "~1.0.4",
+        "debug": "2.6.9",
+        "depd": "~1.1.2",
+        "http-errors": "~1.6.3",
+        "iconv-lite": "0.4.23",
+        "on-finished": "~2.3.0",
+        "qs": "6.5.2",
+        "raw-body": "2.3.3",
+        "type-is": "~1.6.16"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/express/node_modules/bytes": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
+      "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/express/node_modules/cookie": {
       "version": "0.3.1",
       "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
@@ -217,6 +335,31 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/express/node_modules/iconv-lite": {
+      "version": "0.4.23",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
+      "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/express/node_modules/raw-body": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
+      "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
+      "dependencies": {
+        "bytes": "3.0.0",
+        "http-errors": "1.6.3",
+        "iconv-lite": "0.4.23",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/finalhandler": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz",
@@ -250,6 +393,46 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/function-bind": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
+      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
+      "dependencies": {
+        "function-bind": "^1.1.1",
+        "has": "^1.0.3",
+        "has-symbols": "^1.0.1"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
+      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+      "dependencies": {
+        "function-bind": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
+      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/http-errors": {
       "version": "1.6.3",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
@@ -265,9 +448,9 @@
       }
     },
     "node_modules/iconv-lite": {
-      "version": "0.4.23",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
-      "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
+      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
       "dependencies": {
         "safer-buffer": ">= 2.1.2 < 3"
       },
@@ -383,6 +566,14 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/object-inspect": {
+      "version": "1.12.0",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.0.tgz",
+      "integrity": "sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g==",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/on-finished": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
@@ -410,11 +601,51 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/passport": {
+      "version": "0.5.2",
+      "resolved": "https://registry.npmjs.org/passport/-/passport-0.5.2.tgz",
+      "integrity": "sha512-w9n/Ot5I7orGD4y+7V3EFJCQEznE5RxHamUxcqLT2QoJY0f2JdN8GyHonYFvN0Vz+L6lUJfVhrk2aZz2LbuREw==",
+      "dependencies": {
+        "passport-strategy": "1.x.x",
+        "pause": "0.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/jaredhanson"
+      }
+    },
+    "node_modules/passport-local": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
+      "integrity": "sha1-H+YyaMkudWBmJkN+O5BmYsFbpu4=",
+      "dependencies": {
+        "passport-strategy": "1.x.x"
+      },
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
+    "node_modules/passport-strategy": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
+      "integrity": "sha1-tVOaqPwiWj0a0XlHbd8ja0QPUuQ=",
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
     "node_modules/path-to-regexp": {
       "version": "0.1.7",
       "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
       "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
     },
+    "node_modules/pause": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
+      "integrity": "sha1-HUCLP9t2kjuVQ9lvtMnf1TXZy10="
+    },
     "node_modules/process-nextick-args": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
@@ -449,15 +680,56 @@
       }
     },
     "node_modules/raw-body": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
-      "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
+      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
       "dependencies": {
-        "bytes": "3.0.0",
-        "http-errors": "1.6.3",
-        "iconv-lite": "0.4.23",
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
         "unpipe": "1.0.0"
       },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/raw-body/node_modules/depd": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/raw-body/node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "dependencies": {
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/raw-body/node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+    },
+    "node_modules/raw-body/node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+    },
+    "node_modules/raw-body/node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
       "engines": {
         "node": ">= 0.8"
       }
@@ -528,6 +800,19 @@
       "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
       "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ=="
     },
+    "node_modules/side-channel": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
+      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
+      "dependencies": {
+        "call-bind": "^1.0.0",
+        "get-intrinsic": "^1.0.2",
+        "object-inspect": "^1.9.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/sqlstring": {
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz",
@@ -552,6 +837,14 @@
         "safe-buffer": "~5.1.0"
       }
     },
+    "node_modules/toidentifier": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
+      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
+      "engines": {
+        "node": ">=0.6"
+      }
+    },
     "node_modules/type-is": {
       "version": "1.6.18",
       "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
Index: node_modules/body-parser/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"body-parser@1.18.3\",\r\n  \"_id\": \"body-parser@1.18.3\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=\",\r\n  \"_location\": \"/body-parser\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"version\",\r\n    \"registry\": true,\r\n    \"raw\": \"body-parser@1.18.3\",\r\n    \"name\": \"body-parser\",\r\n    \"escapedName\": \"body-parser\",\r\n    \"rawSpec\": \"1.18.3\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"1.18.3\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"/express\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz\",\r\n  \"_shasum\": \"5b292198ffdd553b3a0f20ded0592b956955c8b4\",\r\n  \"_spec\": \"body-parser@1.18.3\",\r\n  \"_where\": \"C:\\\\Users\\\\bsp5205\\\\WebstormProjects\\\\421Proj\\\\node_modules\\\\express\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/expressjs/body-parser/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Douglas Christopher Wilson\",\r\n      \"email\": \"doug@somethingdoug.com\"\r\n    },\r\n    {\r\n      \"name\": \"Jonathan Ong\",\r\n      \"email\": \"me@jongleberry.com\",\r\n      \"url\": \"http://jongleberry.com\"\r\n    }\r\n  ],\r\n  \"dependencies\": {\r\n    \"bytes\": \"3.0.0\",\r\n    \"content-type\": \"~1.0.4\",\r\n    \"debug\": \"2.6.9\",\r\n    \"depd\": \"~1.1.2\",\r\n    \"http-errors\": \"~1.6.3\",\r\n    \"iconv-lite\": \"0.4.23\",\r\n    \"on-finished\": \"~2.3.0\",\r\n    \"qs\": \"6.5.2\",\r\n    \"raw-body\": \"2.3.3\",\r\n    \"type-is\": \"~1.6.16\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"Node.js body parsing middleware\",\r\n  \"devDependencies\": {\r\n    \"eslint\": \"4.19.1\",\r\n    \"eslint-config-standard\": \"11.0.0\",\r\n    \"eslint-plugin-import\": \"2.11.0\",\r\n    \"eslint-plugin-markdown\": \"1.0.0-beta.6\",\r\n    \"eslint-plugin-node\": \"6.0.1\",\r\n    \"eslint-plugin-promise\": \"3.7.0\",\r\n    \"eslint-plugin-standard\": \"3.1.0\",\r\n    \"istanbul\": \"0.4.5\",\r\n    \"methods\": \"1.1.2\",\r\n    \"mocha\": \"2.5.3\",\r\n    \"safe-buffer\": \"5.1.2\",\r\n    \"supertest\": \"1.1.0\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">= 0.8\"\r\n  },\r\n  \"files\": [\r\n    \"lib/\",\r\n    \"LICENSE\",\r\n    \"HISTORY.md\",\r\n    \"index.js\"\r\n  ],\r\n  \"homepage\": \"https://github.com/expressjs/body-parser#readme\",\r\n  \"license\": \"MIT\",\r\n  \"name\": \"body-parser\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/expressjs/body-parser.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"lint\": \"eslint --plugin markdown --ext js,md .\",\r\n    \"test\": \"mocha --require test/support/env --reporter spec --check-leaks --bail test/\",\r\n    \"test-cov\": \"istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/\",\r\n    \"test-travis\": \"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/\"\r\n  },\r\n  \"version\": \"1.18.3\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/package.json b/node_modules/body-parser/package.json
--- a/node_modules/body-parser/package.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/body-parser/package.json	(date 1649271545256)
@@ -1,91 +1,56 @@
 {
-  "_from": "body-parser@1.18.3",
-  "_id": "body-parser@1.18.3",
-  "_inBundle": false,
-  "_integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
-  "_location": "/body-parser",
-  "_phantomChildren": {},
-  "_requested": {
-    "type": "version",
-    "registry": true,
-    "raw": "body-parser@1.18.3",
-    "name": "body-parser",
-    "escapedName": "body-parser",
-    "rawSpec": "1.18.3",
-    "saveSpec": null,
-    "fetchSpec": "1.18.3"
-  },
-  "_requiredBy": [
-    "/express"
-  ],
-  "_resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
-  "_shasum": "5b292198ffdd553b3a0f20ded0592b956955c8b4",
-  "_spec": "body-parser@1.18.3",
-  "_where": "C:\\Users\\bsp5205\\WebstormProjects\\421Proj\\node_modules\\express",
-  "bugs": {
-    "url": "https://github.com/expressjs/body-parser/issues"
-  },
-  "bundleDependencies": false,
+  "name": "body-parser",
+  "description": "Node.js body parsing middleware",
+  "version": "1.20.0",
   "contributors": [
-    {
-      "name": "Douglas Christopher Wilson",
-      "email": "doug@somethingdoug.com"
-    },
-    {
-      "name": "Jonathan Ong",
-      "email": "me@jongleberry.com",
-      "url": "http://jongleberry.com"
-    }
+    "Douglas Christopher Wilson <doug@somethingdoug.com>",
+    "Jonathan Ong <me@jongleberry.com> (http://jongleberry.com)"
   ],
+  "license": "MIT",
+  "repository": "expressjs/body-parser",
   "dependencies": {
-    "bytes": "3.0.0",
+    "bytes": "3.1.2",
     "content-type": "~1.0.4",
     "debug": "2.6.9",
-    "depd": "~1.1.2",
-    "http-errors": "~1.6.3",
-    "iconv-lite": "0.4.23",
-    "on-finished": "~2.3.0",
-    "qs": "6.5.2",
-    "raw-body": "2.3.3",
-    "type-is": "~1.6.16"
+    "depd": "2.0.0",
+    "destroy": "1.2.0",
+    "http-errors": "2.0.0",
+    "iconv-lite": "0.4.24",
+    "on-finished": "2.4.1",
+    "qs": "6.10.3",
+    "raw-body": "2.5.1",
+    "type-is": "~1.6.18",
+    "unpipe": "1.0.0"
   },
-  "deprecated": false,
-  "description": "Node.js body parsing middleware",
   "devDependencies": {
-    "eslint": "4.19.1",
-    "eslint-config-standard": "11.0.0",
-    "eslint-plugin-import": "2.11.0",
-    "eslint-plugin-markdown": "1.0.0-beta.6",
-    "eslint-plugin-node": "6.0.1",
-    "eslint-plugin-promise": "3.7.0",
-    "eslint-plugin-standard": "3.1.0",
-    "istanbul": "0.4.5",
+    "eslint": "7.32.0",
+    "eslint-config-standard": "14.1.1",
+    "eslint-plugin-import": "2.25.4",
+    "eslint-plugin-markdown": "2.2.1",
+    "eslint-plugin-node": "11.1.0",
+    "eslint-plugin-promise": "5.2.0",
+    "eslint-plugin-standard": "4.1.0",
     "methods": "1.1.2",
-    "mocha": "2.5.3",
-    "safe-buffer": "5.1.2",
-    "supertest": "1.1.0"
-  },
-  "engines": {
-    "node": ">= 0.8"
+    "mocha": "9.2.2",
+    "nyc": "15.1.0",
+    "safe-buffer": "5.2.1",
+    "supertest": "6.2.2"
   },
   "files": [
     "lib/",
     "LICENSE",
     "HISTORY.md",
+    "SECURITY.md",
     "index.js"
   ],
-  "homepage": "https://github.com/expressjs/body-parser#readme",
-  "license": "MIT",
-  "name": "body-parser",
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/expressjs/body-parser.git"
+  "engines": {
+    "node": ">= 0.8",
+    "npm": "1.2.8000 || >= 1.4.16"
   },
   "scripts": {
-    "lint": "eslint --plugin markdown --ext js,md .",
+    "lint": "eslint .",
     "test": "mocha --require test/support/env --reporter spec --check-leaks --bail test/",
-    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/",
-    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/"
-  },
-  "version": "1.18.3"
+    "test-ci": "nyc --reporter=lcov --reporter=text npm test",
+    "test-cov": "nyc --reporter=html --reporter=text npm test"
+  }
 }
Index: node_modules/iconv-lite/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"iconv-lite@0.4.23\",\r\n  \"_id\": \"iconv-lite@0.4.23\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==\",\r\n  \"_location\": \"/iconv-lite\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"version\",\r\n    \"registry\": true,\r\n    \"raw\": \"iconv-lite@0.4.23\",\r\n    \"name\": \"iconv-lite\",\r\n    \"escapedName\": \"iconv-lite\",\r\n    \"rawSpec\": \"0.4.23\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"0.4.23\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"/body-parser\",\r\n    \"/raw-body\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz\",\r\n  \"_shasum\": \"297871f63be507adcfbfca715d0cd0eed84e9a63\",\r\n  \"_spec\": \"iconv-lite@0.4.23\",\r\n  \"_where\": \"C:\\\\Users\\\\bsp5205\\\\WebstormProjects\\\\421Proj\\\\node_modules\\\\body-parser\",\r\n  \"author\": {\r\n    \"name\": \"Alexander Shtuchkin\",\r\n    \"email\": \"ashtuchkin@gmail.com\"\r\n  },\r\n  \"browser\": {\r\n    \"./lib/extend-node\": false,\r\n    \"./lib/streams\": false\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/ashtuchkin/iconv-lite/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"dependencies\": {\r\n    \"safer-buffer\": \">= 2.1.2 < 3\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"Convert character encodings in pure javascript.\",\r\n  \"devDependencies\": {\r\n    \"async\": \"*\",\r\n    \"errto\": \"*\",\r\n    \"iconv\": \"*\",\r\n    \"istanbul\": \"*\",\r\n    \"mocha\": \"^3.1.0\",\r\n    \"request\": \"~2.81.0\",\r\n    \"semver\": \"*\",\r\n    \"unorm\": \"*\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=0.10.0\"\r\n  },\r\n  \"homepage\": \"https://github.com/ashtuchkin/iconv-lite\",\r\n  \"keywords\": [\r\n    \"iconv\",\r\n    \"convert\",\r\n    \"charset\",\r\n    \"icu\"\r\n  ],\r\n  \"license\": \"MIT\",\r\n  \"main\": \"./lib/index.js\",\r\n  \"name\": \"iconv-lite\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/ashtuchkin/iconv-lite.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"coverage\": \"istanbul cover _mocha -- --grep .\",\r\n    \"coverage-open\": \"open coverage/lcov-report/index.html\",\r\n    \"test\": \"mocha --reporter spec --grep .\"\r\n  },\r\n  \"typings\": \"./lib/index.d.ts\",\r\n  \"version\": \"0.4.23\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/iconv-lite/package.json b/node_modules/iconv-lite/package.json
--- a/node_modules/iconv-lite/package.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/iconv-lite/package.json	(date 1649271545068)
@@ -1,77 +1,46 @@
 {
-  "_from": "iconv-lite@0.4.23",
-  "_id": "iconv-lite@0.4.23",
-  "_inBundle": false,
-  "_integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
-  "_location": "/iconv-lite",
-  "_phantomChildren": {},
-  "_requested": {
-    "type": "version",
-    "registry": true,
-    "raw": "iconv-lite@0.4.23",
     "name": "iconv-lite",
-    "escapedName": "iconv-lite",
-    "rawSpec": "0.4.23",
-    "saveSpec": null,
-    "fetchSpec": "0.4.23"
-  },
-  "_requiredBy": [
-    "/body-parser",
-    "/raw-body"
-  ],
-  "_resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
-  "_shasum": "297871f63be507adcfbfca715d0cd0eed84e9a63",
-  "_spec": "iconv-lite@0.4.23",
-  "_where": "C:\\Users\\bsp5205\\WebstormProjects\\421Proj\\node_modules\\body-parser",
-  "author": {
-    "name": "Alexander Shtuchkin",
-    "email": "ashtuchkin@gmail.com"
-  },
-  "browser": {
-    "./lib/extend-node": false,
-    "./lib/streams": false
-  },
-  "bugs": {
-    "url": "https://github.com/ashtuchkin/iconv-lite/issues"
-  },
-  "bundleDependencies": false,
-  "dependencies": {
-    "safer-buffer": ">= 2.1.2 < 3"
-  },
-  "deprecated": false,
-  "description": "Convert character encodings in pure javascript.",
-  "devDependencies": {
-    "async": "*",
-    "errto": "*",
-    "iconv": "*",
-    "istanbul": "*",
-    "mocha": "^3.1.0",
-    "request": "~2.81.0",
-    "semver": "*",
-    "unorm": "*"
-  },
-  "engines": {
-    "node": ">=0.10.0"
-  },
-  "homepage": "https://github.com/ashtuchkin/iconv-lite",
-  "keywords": [
-    "iconv",
-    "convert",
-    "charset",
-    "icu"
-  ],
-  "license": "MIT",
-  "main": "./lib/index.js",
-  "name": "iconv-lite",
-  "repository": {
-    "type": "git",
-    "url": "git://github.com/ashtuchkin/iconv-lite.git"
-  },
-  "scripts": {
-    "coverage": "istanbul cover _mocha -- --grep .",
-    "coverage-open": "open coverage/lcov-report/index.html",
-    "test": "mocha --reporter spec --grep ."
-  },
-  "typings": "./lib/index.d.ts",
-  "version": "0.4.23"
+    "description": "Convert character encodings in pure javascript.",
+    "version": "0.4.24",
+    "license": "MIT",
+    "keywords": [
+        "iconv",
+        "convert",
+        "charset",
+        "icu"
+    ],
+    "author": "Alexander Shtuchkin <ashtuchkin@gmail.com>",
+    "main": "./lib/index.js",
+    "typings": "./lib/index.d.ts",
+    "homepage": "https://github.com/ashtuchkin/iconv-lite",
+    "bugs": "https://github.com/ashtuchkin/iconv-lite/issues",
+    "repository": {
+        "type": "git",
+        "url": "git://github.com/ashtuchkin/iconv-lite.git"
+    },
+    "engines": {
+        "node": ">=0.10.0"
+    },
+    "scripts": {
+        "coverage": "istanbul cover _mocha -- --grep .",
+        "coverage-open": "open coverage/lcov-report/index.html",
+        "test": "mocha --reporter spec --grep ."
+    },
+    "browser": {
+        "./lib/extend-node": false,
+        "./lib/streams": false
+    },
+    "devDependencies": {
+        "mocha": "^3.1.0",
+        "request": "~2.87.0",
+        "unorm": "*",
+        "errto": "*",
+        "async": "*",
+        "istanbul": "*",
+        "semver": "*",
+        "iconv": "*"
+    },
+    "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3"
+    }
 }
Index: node_modules/iconv-lite/Changelog.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n# 0.4.23 / 2018-05-07\r\n\r\n  * Fix deprecation warning in Node v10 due to the last usage of `new Buffer` (#185, by @felixbuenemann)\r\n  * Switched from NodeBuffer to Buffer in typings (#155 by @felixfbecker, #186 by @larssn)\r\n\r\n\r\n# 0.4.22 / 2018-05-05\r\n\r\n  * Use older semver style for dependencies to be compatible with Node version 0.10 (#182, by @dougwilson)\r\n  * Fix tests to accomodate fixes in Node v10 (#182, by @dougwilson)\r\n\r\n\r\n# 0.4.21 / 2018-04-06\r\n\r\n  * Fix encoding canonicalization (#156)\r\n  * Fix the paths in the \"browser\" field in package.json (#174 by @LMLB)\r\n  * Removed \"contributors\" section in package.json - see Git history instead.\r\n\r\n\r\n# 0.4.20 / 2018-04-06\r\n\r\n  * Updated `new Buffer()` usages with recommended replacements as it's being deprecated in Node v10 (#176, #178 by @ChALkeR)\r\n\r\n\r\n# 0.4.19 / 2017-09-09\r\n\r\n  * Fixed iso8859-1 codec regression in handling untranslatable characters (#162, caused by #147)\r\n  * Re-generated windows1255 codec, because it was updated in iconv project\r\n  * Fixed grammar in error message when iconv-lite is loaded with encoding other than utf8\r\n\r\n\r\n# 0.4.18 / 2017-06-13\r\n\r\n  * Fixed CESU-8 regression in Node v8.\r\n\r\n\r\n# 0.4.17 / 2017-04-22\r\n\r\n * Updated typescript definition file to support Angular 2 AoT mode (#153 by @larssn)\r\n\r\n\r\n# 0.4.16 / 2017-04-22\r\n\r\n * Added support for React Native (#150)\r\n * Changed iso8859-1 encoding to usine internal 'binary' encoding, as it's the same thing (#147 by @mscdex)\r\n * Fixed typo in Readme (#138 by @jiangzhuo)\r\n * Fixed build for Node v6.10+ by making correct version comparison\r\n * Added a warning if iconv-lite is loaded not as utf-8 (see #142)\r\n\r\n\r\n# 0.4.15 / 2016-11-21\r\n\r\n * Fixed typescript type definition (#137)\r\n\r\n\r\n# 0.4.14 / 2016-11-20\r\n\r\n * Preparation for v1.0\r\n * Added Node v6 and latest Node versions to Travis CI test rig\r\n * Deprecated Node v0.8 support\r\n * Typescript typings (@larssn)\r\n * Fix encoding of Euro character in GB 18030 (inspired by @lygstate)\r\n * Add ms prefix to dbcs windows encodings (@rokoroku)\r\n\r\n\r\n# 0.4.13 / 2015-10-01\r\n\r\n * Fix silly mistake in deprecation notice.\r\n\r\n\r\n# 0.4.12 / 2015-09-26\r\n\r\n * Node v4 support:\r\n   * Added CESU-8 decoding (#106)\r\n   * Added deprecation notice for `extendNodeEncodings`\r\n   * Added Travis tests for Node v4 and io.js latest (#105 by @Mithgol)\r\n\r\n\r\n# 0.4.11 / 2015-07-03\r\n\r\n * Added CESU-8 encoding.\r\n\r\n\r\n# 0.4.10 / 2015-05-26\r\n\r\n * Changed UTF-16 endianness heuristic to take into account any ASCII chars, not\r\n   just spaces. This should minimize the importance of \"default\" endianness.\r\n\r\n\r\n# 0.4.9 / 2015-05-24\r\n\r\n * Streamlined BOM handling: strip BOM by default, add BOM when encoding if \r\n   addBOM: true. Added docs to Readme.\r\n * UTF16 now uses UTF16-LE by default.\r\n * Fixed minor issue with big5 encoding.\r\n * Added io.js testing on Travis; updated node-iconv version to test against.\r\n   Now we just skip testing SBCS encodings that node-iconv doesn't support.\r\n * (internal refactoring) Updated codec interface to use classes.\r\n * Use strict mode in all files.\r\n\r\n\r\n# 0.4.8 / 2015-04-14\r\n \r\n * added alias UNICODE-1-1-UTF-7 for UTF-7 encoding (#94)\r\n\r\n\r\n# 0.4.7 / 2015-02-05\r\n\r\n * stop official support of Node.js v0.8. Should still work, but no guarantees.\r\n   reason: Packages needed for testing are hard to get on Travis CI.\r\n * work in environment where Object.prototype is monkey patched with enumerable \r\n   props (#89).\r\n\r\n\r\n# 0.4.6 / 2015-01-12\r\n \r\n * fix rare aliases of single-byte encodings (thanks @mscdex)\r\n * double the timeout for dbcs tests to make them less flaky on travis\r\n\r\n\r\n# 0.4.5 / 2014-11-20\r\n\r\n * fix windows-31j and x-sjis encoding support (@nleush)\r\n * minor fix: undefined variable reference when internal error happens\r\n\r\n\r\n# 0.4.4 / 2014-07-16\r\n\r\n * added encodings UTF-7 (RFC2152) and UTF-7-IMAP (RFC3501 Section 5.1.3)\r\n * fixed streaming base64 encoding\r\n\r\n\r\n# 0.4.3 / 2014-06-14\r\n\r\n * added encodings UTF-16BE and UTF-16 with BOM\r\n\r\n\r\n# 0.4.2 / 2014-06-12\r\n\r\n * don't throw exception if `extendNodeEncodings()` is called more than once\r\n\r\n\r\n# 0.4.1 / 2014-06-11\r\n\r\n * codepage 808 added\r\n\r\n\r\n# 0.4.0 / 2014-06-10\r\n\r\n * code is rewritten from scratch\r\n * all widespread encodings are supported\r\n * streaming interface added\r\n * browserify compatibility added\r\n * (optional) extend core primitive encodings to make usage even simpler\r\n * moved from vows to mocha as the testing framework\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/iconv-lite/Changelog.md b/node_modules/iconv-lite/Changelog.md
--- a/node_modules/iconv-lite/Changelog.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/iconv-lite/Changelog.md	(date 1649271545074)
@@ -1,3 +1,7 @@
+# 0.4.24 / 2018-08-22
+
+  * Added MIK encoding (#196, by @Ivan-Kalatchev)
+
 
 # 0.4.23 / 2018-05-07
 
Index: node_modules/body-parser/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>1.18.3 / 2018-05-14\r\n===================\r\n\r\n  * Fix stack trace for strict json parse error\r\n  * deps: depd@~1.1.2\r\n    - perf: remove argument reassignment\r\n  * deps: http-errors@~1.6.3\r\n    - deps: depd@~1.1.2\r\n    - deps: setprototypeof@1.1.0\r\n    - deps: statuses@'>= 1.3.1 < 2'\r\n  * deps: iconv-lite@0.4.23\r\n    - Fix loading encoding with year appended\r\n    - Fix deprecation warnings on Node.js 10+\r\n  * deps: qs@6.5.2\r\n  * deps: raw-body@2.3.3\r\n    - deps: http-errors@1.6.3\r\n    - deps: iconv-lite@0.4.23\r\n  * deps: type-is@~1.6.16\r\n    - deps: mime-types@~2.1.18\r\n\r\n1.18.2 / 2017-09-22\r\n===================\r\n\r\n  * deps: debug@2.6.9\r\n  * perf: remove argument reassignment\r\n\r\n1.18.1 / 2017-09-12\r\n===================\r\n\r\n  * deps: content-type@~1.0.4\r\n    - perf: remove argument reassignment\r\n    - perf: skip parameter parsing when no parameters\r\n  * deps: iconv-lite@0.4.19\r\n    - Fix ISO-8859-1 regression\r\n    - Update Windows-1255\r\n  * deps: qs@6.5.1\r\n    - Fix parsing & compacting very deep objects\r\n  * deps: raw-body@2.3.2\r\n    - deps: iconv-lite@0.4.19\r\n\r\n1.18.0 / 2017-09-08\r\n===================\r\n\r\n  * Fix JSON strict violation error to match native parse error\r\n  * Include the `body` property on verify errors\r\n  * Include the `type` property on all generated errors\r\n  * Use `http-errors` to set status code on errors\r\n  * deps: bytes@3.0.0\r\n  * deps: debug@2.6.8\r\n  * deps: depd@~1.1.1\r\n    - Remove unnecessary `Buffer` loading\r\n  * deps: http-errors@~1.6.2\r\n    - deps: depd@1.1.1\r\n  * deps: iconv-lite@0.4.18\r\n    - Add support for React Native\r\n    - Add a warning if not loaded as utf-8\r\n    - Fix CESU-8 decoding in Node.js 8\r\n    - Improve speed of ISO-8859-1 encoding\r\n  * deps: qs@6.5.0\r\n  * deps: raw-body@2.3.1\r\n    - Use `http-errors` for standard emitted errors\r\n    - deps: bytes@3.0.0\r\n    - deps: iconv-lite@0.4.18\r\n    - perf: skip buffer decoding on overage chunk\r\n  * perf: prevent internal `throw` when missing charset\r\n\r\n1.17.2 / 2017-05-17\r\n===================\r\n\r\n  * deps: debug@2.6.7\r\n    - Fix `DEBUG_MAX_ARRAY_LENGTH`\r\n    - deps: ms@2.0.0\r\n  * deps: type-is@~1.6.15\r\n    - deps: mime-types@~2.1.15\r\n\r\n1.17.1 / 2017-03-06\r\n===================\r\n\r\n  * deps: qs@6.4.0\r\n    - Fix regression parsing keys starting with `[`\r\n\r\n1.17.0 / 2017-03-01\r\n===================\r\n\r\n  * deps: http-errors@~1.6.1\r\n    - Make `message` property enumerable for `HttpError`s\r\n    - deps: setprototypeof@1.0.3\r\n  * deps: qs@6.3.1\r\n    - Fix compacting nested arrays\r\n\r\n1.16.1 / 2017-02-10\r\n===================\r\n\r\n  * deps: debug@2.6.1\r\n    - Fix deprecation messages in WebStorm and other editors\r\n    - Undeprecate `DEBUG_FD` set to `1` or `2`\r\n\r\n1.16.0 / 2017-01-17\r\n===================\r\n\r\n  * deps: debug@2.6.0\r\n    - Allow colors in workers\r\n    - Deprecated `DEBUG_FD` environment variable\r\n    - Fix error when running under React Native\r\n    - Use same color for same namespace\r\n    - deps: ms@0.7.2\r\n  * deps: http-errors@~1.5.1\r\n    - deps: inherits@2.0.3\r\n    - deps: setprototypeof@1.0.2\r\n    - deps: statuses@'>= 1.3.1 < 2'\r\n  * deps: iconv-lite@0.4.15\r\n    - Added encoding MS-31J\r\n    - Added encoding MS-932\r\n    - Added encoding MS-936\r\n    - Added encoding MS-949\r\n    - Added encoding MS-950\r\n    - Fix GBK/GB18030 handling of Euro character\r\n  * deps: qs@6.2.1\r\n    - Fix array parsing from skipping empty values\r\n  * deps: raw-body@~2.2.0\r\n    - deps: iconv-lite@0.4.15\r\n  * deps: type-is@~1.6.14\r\n    - deps: mime-types@~2.1.13\r\n\r\n1.15.2 / 2016-06-19\r\n===================\r\n\r\n  * deps: bytes@2.4.0\r\n  * deps: content-type@~1.0.2\r\n    - perf: enable strict mode\r\n  * deps: http-errors@~1.5.0\r\n    - Use `setprototypeof` module to replace `__proto__` setting\r\n    - deps: statuses@'>= 1.3.0 < 2'\r\n    - perf: enable strict mode\r\n  * deps: qs@6.2.0\r\n  * deps: raw-body@~2.1.7\r\n    - deps: bytes@2.4.0\r\n    - perf: remove double-cleanup on happy path\r\n  * deps: type-is@~1.6.13\r\n    - deps: mime-types@~2.1.11\r\n\r\n1.15.1 / 2016-05-05\r\n===================\r\n\r\n  * deps: bytes@2.3.0\r\n    - Drop partial bytes on all parsed units\r\n    - Fix parsing byte string that looks like hex\r\n  * deps: raw-body@~2.1.6\r\n    - deps: bytes@2.3.0\r\n  * deps: type-is@~1.6.12\r\n    - deps: mime-types@~2.1.10\r\n\r\n1.15.0 / 2016-02-10\r\n===================\r\n\r\n  * deps: http-errors@~1.4.0\r\n    - Add `HttpError` export, for `err instanceof createError.HttpError`\r\n    - deps: inherits@2.0.1\r\n    - deps: statuses@'>= 1.2.1 < 2'\r\n  * deps: qs@6.1.0\r\n  * deps: type-is@~1.6.11\r\n    - deps: mime-types@~2.1.9\r\n\r\n1.14.2 / 2015-12-16\r\n===================\r\n\r\n  * deps: bytes@2.2.0\r\n  * deps: iconv-lite@0.4.13\r\n  * deps: qs@5.2.0\r\n  * deps: raw-body@~2.1.5\r\n    - deps: bytes@2.2.0\r\n    - deps: iconv-lite@0.4.13\r\n  * deps: type-is@~1.6.10\r\n    - deps: mime-types@~2.1.8\r\n\r\n1.14.1 / 2015-09-27\r\n===================\r\n\r\n  * Fix issue where invalid charset results in 400 when `verify` used\r\n  * deps: iconv-lite@0.4.12\r\n    - Fix CESU-8 decoding in Node.js 4.x\r\n  * deps: raw-body@~2.1.4\r\n    - Fix masking critical errors from `iconv-lite`\r\n    - deps: iconv-lite@0.4.12\r\n  * deps: type-is@~1.6.9\r\n    - deps: mime-types@~2.1.7\r\n\r\n1.14.0 / 2015-09-16\r\n===================\r\n\r\n  * Fix JSON strict parse error to match syntax errors\r\n  * Provide static `require` analysis in `urlencoded` parser\r\n  * deps: depd@~1.1.0\r\n    - Support web browser loading\r\n  * deps: qs@5.1.0\r\n  * deps: raw-body@~2.1.3\r\n    - Fix sync callback when attaching data listener causes sync read\r\n  * deps: type-is@~1.6.8\r\n    - Fix type error when given invalid type to match against\r\n    - deps: mime-types@~2.1.6\r\n\r\n1.13.3 / 2015-07-31\r\n===================\r\n\r\n  * deps: type-is@~1.6.6\r\n    - deps: mime-types@~2.1.4\r\n\r\n1.13.2 / 2015-07-05\r\n===================\r\n\r\n  * deps: iconv-lite@0.4.11\r\n  * deps: qs@4.0.0\r\n    - Fix dropping parameters like `hasOwnProperty`\r\n    - Fix user-visible incompatibilities from 3.1.0\r\n    - Fix various parsing edge cases\r\n  * deps: raw-body@~2.1.2\r\n    - Fix error stack traces to skip `makeError`\r\n    - deps: iconv-lite@0.4.11\r\n  * deps: type-is@~1.6.4\r\n    - deps: mime-types@~2.1.2\r\n    - perf: enable strict mode\r\n    - perf: remove argument reassignment\r\n\r\n1.13.1 / 2015-06-16\r\n===================\r\n\r\n  * deps: qs@2.4.2\r\n    - Downgraded from 3.1.0 because of user-visible incompatibilities\r\n\r\n1.13.0 / 2015-06-14\r\n===================\r\n\r\n  * Add `statusCode` property on `Error`s, in addition to `status`\r\n  * Change `type` default to `application/json` for JSON parser\r\n  * Change `type` default to `application/x-www-form-urlencoded` for urlencoded parser\r\n  * Provide static `require` analysis\r\n  * Use the `http-errors` module to generate errors\r\n  * deps: bytes@2.1.0\r\n    - Slight optimizations\r\n  * deps: iconv-lite@0.4.10\r\n    - The encoding UTF-16 without BOM now defaults to UTF-16LE when detection fails\r\n    - Leading BOM is now removed when decoding\r\n  * deps: on-finished@~2.3.0\r\n    - Add defined behavior for HTTP `CONNECT` requests\r\n    - Add defined behavior for HTTP `Upgrade` requests\r\n    - deps: ee-first@1.1.1\r\n  * deps: qs@3.1.0\r\n    - Fix dropping parameters like `hasOwnProperty`\r\n    - Fix various parsing edge cases\r\n    - Parsed object now has `null` prototype\r\n  * deps: raw-body@~2.1.1\r\n    - Use `unpipe` module for unpiping requests\r\n    - deps: iconv-lite@0.4.10\r\n  * deps: type-is@~1.6.3\r\n    - deps: mime-types@~2.1.1\r\n    - perf: reduce try block size\r\n    - perf: remove bitwise operations\r\n  * perf: enable strict mode\r\n  * perf: remove argument reassignment\r\n  * perf: remove delete call\r\n\r\n1.12.4 / 2015-05-10\r\n===================\r\n\r\n  * deps: debug@~2.2.0\r\n  * deps: qs@2.4.2\r\n    - Fix allowing parameters like `constructor`\r\n  * deps: on-finished@~2.2.1\r\n  * deps: raw-body@~2.0.1\r\n    - Fix a false-positive when unpiping in Node.js 0.8\r\n    - deps: bytes@2.0.1\r\n  * deps: type-is@~1.6.2\r\n    - deps: mime-types@~2.0.11\r\n\r\n1.12.3 / 2015-04-15\r\n===================\r\n\r\n  * Slight efficiency improvement when not debugging\r\n  * deps: depd@~1.0.1\r\n  * deps: iconv-lite@0.4.8\r\n    - Add encoding alias UNICODE-1-1-UTF-7\r\n  * deps: raw-body@1.3.4\r\n    - Fix hanging callback if request aborts during read\r\n    - deps: iconv-lite@0.4.8\r\n\r\n1.12.2 / 2015-03-16\r\n===================\r\n\r\n  * deps: qs@2.4.1\r\n    - Fix error when parameter `hasOwnProperty` is present\r\n\r\n1.12.1 / 2015-03-15\r\n===================\r\n\r\n  * deps: debug@~2.1.3\r\n    - Fix high intensity foreground color for bold\r\n    - deps: ms@0.7.0\r\n  * deps: type-is@~1.6.1\r\n    - deps: mime-types@~2.0.10\r\n\r\n1.12.0 / 2015-02-13\r\n===================\r\n\r\n  * add `debug` messages\r\n  * accept a function for the `type` option\r\n  * use `content-type` to parse `Content-Type` headers\r\n  * deps: iconv-lite@0.4.7\r\n    - Gracefully support enumerables on `Object.prototype`\r\n  * deps: raw-body@1.3.3\r\n    - deps: iconv-lite@0.4.7\r\n  * deps: type-is@~1.6.0\r\n    - fix argument reassignment\r\n    - fix false-positives in `hasBody` `Transfer-Encoding` check\r\n    - support wildcard for both type and subtype (`*/*`)\r\n    - deps: mime-types@~2.0.9\r\n\r\n1.11.0 / 2015-01-30\r\n===================\r\n\r\n  * make internal `extended: true` depth limit infinity\r\n  * deps: type-is@~1.5.6\r\n    - deps: mime-types@~2.0.8\r\n\r\n1.10.2 / 2015-01-20\r\n===================\r\n\r\n  * deps: iconv-lite@0.4.6\r\n    - Fix rare aliases of single-byte encodings\r\n  * deps: raw-body@1.3.2\r\n    - deps: iconv-lite@0.4.6\r\n\r\n1.10.1 / 2015-01-01\r\n===================\r\n\r\n  * deps: on-finished@~2.2.0\r\n  * deps: type-is@~1.5.5\r\n    - deps: mime-types@~2.0.7\r\n\r\n1.10.0 / 2014-12-02\r\n===================\r\n\r\n  * make internal `extended: true` array limit dynamic\r\n\r\n1.9.3 / 2014-11-21\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.5\r\n    - Fix Windows-31J and X-SJIS encoding support\r\n  * deps: qs@2.3.3\r\n    - Fix `arrayLimit` behavior\r\n  * deps: raw-body@1.3.1\r\n    - deps: iconv-lite@0.4.5\r\n  * deps: type-is@~1.5.3\r\n    - deps: mime-types@~2.0.3\r\n\r\n1.9.2 / 2014-10-27\r\n==================\r\n\r\n  * deps: qs@2.3.2\r\n    - Fix parsing of mixed objects and values\r\n\r\n1.9.1 / 2014-10-22\r\n==================\r\n\r\n  * deps: on-finished@~2.1.1\r\n    - Fix handling of pipelined requests\r\n  * deps: qs@2.3.0\r\n    - Fix parsing of mixed implicit and explicit arrays\r\n  * deps: type-is@~1.5.2\r\n    - deps: mime-types@~2.0.2\r\n\r\n1.9.0 / 2014-09-24\r\n==================\r\n\r\n  * include the charset in \"unsupported charset\" error message\r\n  * include the encoding in \"unsupported content encoding\" error message\r\n  * deps: depd@~1.0.0\r\n\r\n1.8.4 / 2014-09-23\r\n==================\r\n\r\n  * fix content encoding to be case-insensitive\r\n\r\n1.8.3 / 2014-09-19\r\n==================\r\n\r\n  * deps: qs@2.2.4\r\n    - Fix issue with object keys starting with numbers truncated\r\n\r\n1.8.2 / 2014-09-15\r\n==================\r\n\r\n  * deps: depd@0.4.5\r\n\r\n1.8.1 / 2014-09-07\r\n==================\r\n\r\n  * deps: media-typer@0.3.0\r\n  * deps: type-is@~1.5.1\r\n\r\n1.8.0 / 2014-09-05\r\n==================\r\n\r\n  * make empty-body-handling consistent between chunked requests\r\n    - empty `json` produces `{}`\r\n    - empty `raw` produces `new Buffer(0)`\r\n    - empty `text` produces `''`\r\n    - empty `urlencoded` produces `{}`\r\n  * deps: qs@2.2.3\r\n    - Fix issue where first empty value in array is discarded\r\n  * deps: type-is@~1.5.0\r\n    - fix `hasbody` to be true for `content-length: 0`\r\n\r\n1.7.0 / 2014-09-01\r\n==================\r\n\r\n  * add `parameterLimit` option to `urlencoded` parser\r\n  * change `urlencoded` extended array limit to 100\r\n  * respond with 413 when over `parameterLimit` in `urlencoded`\r\n\r\n1.6.7 / 2014-08-29\r\n==================\r\n\r\n  * deps: qs@2.2.2\r\n    - Remove unnecessary cloning\r\n\r\n1.6.6 / 2014-08-27\r\n==================\r\n\r\n  * deps: qs@2.2.0\r\n    - Array parsing fix\r\n    - Performance improvements\r\n\r\n1.6.5 / 2014-08-16\r\n==================\r\n\r\n  * deps: on-finished@2.1.0\r\n\r\n1.6.4 / 2014-08-14\r\n==================\r\n\r\n  * deps: qs@1.2.2\r\n\r\n1.6.3 / 2014-08-10\r\n==================\r\n\r\n  * deps: qs@1.2.1\r\n\r\n1.6.2 / 2014-08-07\r\n==================\r\n\r\n  * deps: qs@1.2.0\r\n    - Fix parsing array of objects\r\n\r\n1.6.1 / 2014-08-06\r\n==================\r\n\r\n  * deps: qs@1.1.0\r\n    - Accept urlencoded square brackets\r\n    - Accept empty values in implicit array notation\r\n\r\n1.6.0 / 2014-08-05\r\n==================\r\n\r\n  * deps: qs@1.0.2\r\n    - Complete rewrite\r\n    - Limits array length to 20\r\n    - Limits object depth to 5\r\n    - Limits parameters to 1,000\r\n\r\n1.5.2 / 2014-07-27\r\n==================\r\n\r\n  * deps: depd@0.4.4\r\n    - Work-around v8 generating empty stack traces\r\n\r\n1.5.1 / 2014-07-26\r\n==================\r\n\r\n  * deps: depd@0.4.3\r\n    - Fix exception when global `Error.stackTraceLimit` is too low\r\n\r\n1.5.0 / 2014-07-20\r\n==================\r\n\r\n  * deps: depd@0.4.2\r\n    - Add `TRACE_DEPRECATION` environment variable\r\n    - Remove non-standard grey color from color output\r\n    - Support `--no-deprecation` argument\r\n    - Support `--trace-deprecation` argument\r\n  * deps: iconv-lite@0.4.4\r\n    - Added encoding UTF-7\r\n  * deps: raw-body@1.3.0\r\n    - deps: iconv-lite@0.4.4\r\n    - Added encoding UTF-7\r\n    - Fix `Cannot switch to old mode now` error on Node.js 0.10+\r\n  * deps: type-is@~1.3.2\r\n\r\n1.4.3 / 2014-06-19\r\n==================\r\n\r\n  * deps: type-is@1.3.1\r\n    - fix global variable leak\r\n\r\n1.4.2 / 2014-06-19\r\n==================\r\n\r\n  * deps: type-is@1.3.0\r\n    - improve type parsing\r\n\r\n1.4.1 / 2014-06-19\r\n==================\r\n\r\n  * fix urlencoded extended deprecation message\r\n\r\n1.4.0 / 2014-06-19\r\n==================\r\n\r\n  * add `text` parser\r\n  * add `raw` parser\r\n  * check accepted charset in content-type (accepts utf-8)\r\n  * check accepted encoding in content-encoding (accepts identity)\r\n  * deprecate `bodyParser()` middleware; use `.json()` and `.urlencoded()` as needed\r\n  * deprecate `urlencoded()` without provided `extended` option\r\n  * lazy-load urlencoded parsers\r\n  * parsers split into files for reduced mem usage\r\n  * support gzip and deflate bodies\r\n    - set `inflate: false` to turn off\r\n  * deps: raw-body@1.2.2\r\n    - Support all encodings from `iconv-lite`\r\n\r\n1.3.1 / 2014-06-11\r\n==================\r\n\r\n  * deps: type-is@1.2.1\r\n    - Switch dependency from mime to mime-types@1.0.0\r\n\r\n1.3.0 / 2014-05-31\r\n==================\r\n\r\n  * add `extended` option to urlencoded parser\r\n\r\n1.2.2 / 2014-05-27\r\n==================\r\n\r\n  * deps: raw-body@1.1.6\r\n    - assert stream encoding on node.js 0.8\r\n    - assert stream encoding on node.js < 0.10.6\r\n    - deps: bytes@1\r\n\r\n1.2.1 / 2014-05-26\r\n==================\r\n\r\n  * invoke `next(err)` after request fully read\r\n    - prevents hung responses and socket hang ups\r\n\r\n1.2.0 / 2014-05-11\r\n==================\r\n\r\n  * add `verify` option\r\n  * deps: type-is@1.2.0\r\n    - support suffix matching\r\n\r\n1.1.2 / 2014-05-11\r\n==================\r\n\r\n  * improve json parser speed\r\n\r\n1.1.1 / 2014-05-11\r\n==================\r\n\r\n  * fix repeated limit parsing with every request\r\n\r\n1.1.0 / 2014-05-10\r\n==================\r\n\r\n  * add `type` option\r\n  * deps: pin for safety and consistency\r\n\r\n1.0.2 / 2014-04-14\r\n==================\r\n\r\n  * use `type-is` module\r\n\r\n1.0.1 / 2014-03-20\r\n==================\r\n\r\n  * lower default limits to 100kb\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/HISTORY.md b/node_modules/body-parser/HISTORY.md
--- a/node_modules/body-parser/HISTORY.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/body-parser/HISTORY.md	(date 1649271545260)
@@ -1,3 +1,66 @@
+1.20.0 / 2022-04-02
+===================
+
+  * Fix error message for json parse whitespace in `strict`
+  * Fix internal error when inflated body exceeds limit
+  * Prevent loss of async hooks context
+  * Prevent hanging when request already read
+  * deps: depd@2.0.0
+    - Replace internal `eval` usage with `Function` constructor
+    - Use instance methods on `process` to check for listeners
+  * deps: http-errors@2.0.0
+    - deps: depd@2.0.0
+    - deps: statuses@2.0.1
+  * deps: on-finished@2.4.1
+  * deps: qs@6.10.3
+  * deps: raw-body@2.5.1
+    - deps: http-errors@2.0.0
+
+1.19.2 / 2022-02-15
+===================
+
+  * deps: bytes@3.1.2
+  * deps: qs@6.9.7
+    * Fix handling of `__proto__` keys
+  * deps: raw-body@2.4.3
+    - deps: bytes@3.1.2
+
+1.19.1 / 2021-12-10
+===================
+
+  * deps: bytes@3.1.1
+  * deps: http-errors@1.8.1
+    - deps: inherits@2.0.4
+    - deps: toidentifier@1.0.1
+    - deps: setprototypeof@1.2.0
+  * deps: qs@6.9.6
+  * deps: raw-body@2.4.2
+    - deps: bytes@3.1.1
+    - deps: http-errors@1.8.1
+  * deps: safe-buffer@5.2.1
+  * deps: type-is@~1.6.18
+
+1.19.0 / 2019-04-25
+===================
+
+  * deps: bytes@3.1.0
+    - Add petabyte (`pb`) support
+  * deps: http-errors@1.7.2
+    - Set constructor name when possible
+    - deps: setprototypeof@1.1.1
+    - deps: statuses@'>= 1.5.0 < 2'
+  * deps: iconv-lite@0.4.24
+    - Added encoding MIK
+  * deps: qs@6.7.0
+    - Fix parsing array brackets after index
+  * deps: raw-body@2.4.0
+    - deps: bytes@3.1.0
+    - deps: http-errors@1.7.2
+    - deps: iconv-lite@0.4.24
+  * deps: type-is@~1.6.17
+    - deps: mime-types@~2.1.24
+    - perf: prevent internal `throw` on invalid type
+
 1.18.3 / 2018-05-14
 ===================
 
Index: node_modules/body-parser/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># body-parser\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n\r\nNode.js body parsing middleware.\r\n\r\nParse incoming request bodies in a middleware before your handlers, available\r\nunder the `req.body` property.\r\n\r\n**Note** As `req.body`'s shape is based on user-controlled input, all\r\nproperties and values in this object are untrusted and should be validated\r\nbefore trusting. For example, `req.body.foo.toString()` may fail in multiple\r\nways, for example the `foo` property may not be there or may not be a string,\r\nand `toString` may not be a function and instead a string or other user input.\r\n\r\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\r\n\r\n_This does not handle multipart bodies_, due to their complex and typically\r\nlarge nature. For multipart bodies, you may be interested in the following\r\nmodules:\r\n\r\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\r\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\r\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\r\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\r\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\r\n  * [multer](https://www.npmjs.org/package/multer#readme)\r\n\r\nThis module provides the following parsers:\r\n\r\n  * [JSON body parser](#bodyparserjsonoptions)\r\n  * [Raw body parser](#bodyparserrawoptions)\r\n  * [Text body parser](#bodyparsertextoptions)\r\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\r\n\r\nOther body parsers you might be interested in:\r\n\r\n- [body](https://www.npmjs.org/package/body#readme)\r\n- [co-body](https://www.npmjs.org/package/co-body#readme)\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install body-parser\r\n```\r\n\r\n## API\r\n\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n```js\r\nvar bodyParser = require('body-parser')\r\n```\r\n\r\nThe `bodyParser` object exposes various factories to create middlewares. All\r\nmiddlewares will populate the `req.body` property with the parsed body when\r\nthe `Content-Type` request header matches the `type` option, or an empty\r\nobject (`{}`) if there was no body to parse, the `Content-Type` was not matched,\r\nor an error occurred.\r\n\r\nThe various errors returned by this module are described in the\r\n[errors section](#errors).\r\n\r\n### bodyParser.json([options])\r\n\r\nReturns middleware that only parses `json` and only looks at requests where\r\nthe `Content-Type` header matches the `type` option. This parser accepts any\r\nUnicode encoding of the body and supports automatic inflation of `gzip` and\r\n`deflate` encodings.\r\n\r\nA new `body` object containing the parsed data is populated on the `request`\r\nobject after the middleware (i.e. `req.body`).\r\n\r\n#### Options\r\n\r\nThe `json` function takes an optional `options` object that may contain any of\r\nthe following keys:\r\n\r\n##### inflate\r\n\r\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\r\n`false`, deflated bodies are rejected. Defaults to `true`.\r\n\r\n##### limit\r\n\r\nControls the maximum request body size. If this is a number, then the value\r\nspecifies the number of bytes; if it is a string, the value is passed to the\r\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\r\nto `'100kb'`.\r\n\r\n##### reviver\r\n\r\nThe `reviver` option is passed directly to `JSON.parse` as the second\r\nargument. You can find more information on this argument\r\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\r\n\r\n##### strict\r\n\r\nWhen set to `true`, will only accept arrays and objects; when `false` will\r\naccept anything `JSON.parse` accepts. Defaults to `true`.\r\n\r\n##### type\r\n\r\nThe `type` option is used to determine what media type the middleware will\r\nparse. This option can be a string, array of strings, or a function. If not a\r\nfunction, `type` option is passed directly to the\r\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this can\r\nbe an extension name (like `json`), a mime type (like `application/json`), or\r\na mime type with a wildcard (like `*/*` or `*/json`). If a function, the `type`\r\noption is called as `fn(req)` and the request is parsed if it returns a truthy\r\nvalue. Defaults to `application/json`.\r\n\r\n##### verify\r\n\r\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\r\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\r\nencoding of the request. The parsing can be aborted by throwing an error.\r\n\r\n### bodyParser.raw([options])\r\n\r\nReturns middleware that parses all bodies as a `Buffer` and only looks at\r\nrequests where the `Content-Type` header matches the `type` option. This\r\nparser supports automatic inflation of `gzip` and `deflate` encodings.\r\n\r\nA new `body` object containing the parsed data is populated on the `request`\r\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\r\nof the body.\r\n\r\n#### Options\r\n\r\nThe `raw` function takes an optional `options` object that may contain any of\r\nthe following keys:\r\n\r\n##### inflate\r\n\r\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\r\n`false`, deflated bodies are rejected. Defaults to `true`.\r\n\r\n##### limit\r\n\r\nControls the maximum request body size. If this is a number, then the value\r\nspecifies the number of bytes; if it is a string, the value is passed to the\r\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\r\nto `'100kb'`.\r\n\r\n##### type\r\n\r\nThe `type` option is used to determine what media type the middleware will\r\nparse. This option can be a string, array of strings, or a function.\r\nIf not a function, `type` option is passed directly to the\r\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this\r\ncan be an extension name (like `bin`), a mime type (like\r\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\r\n`application/*`). If a function, the `type` option is called as `fn(req)`\r\nand the request is parsed if it returns a truthy value. Defaults to\r\n`application/octet-stream`.\r\n\r\n##### verify\r\n\r\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\r\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\r\nencoding of the request. The parsing can be aborted by throwing an error.\r\n\r\n### bodyParser.text([options])\r\n\r\nReturns middleware that parses all bodies as a string and only looks at\r\nrequests where the `Content-Type` header matches the `type` option. This\r\nparser supports automatic inflation of `gzip` and `deflate` encodings.\r\n\r\nA new `body` string containing the parsed data is populated on the `request`\r\nobject after the middleware (i.e. `req.body`). This will be a string of the\r\nbody.\r\n\r\n#### Options\r\n\r\nThe `text` function takes an optional `options` object that may contain any of\r\nthe following keys:\r\n\r\n##### defaultCharset\r\n\r\nSpecify the default character set for the text content if the charset is not\r\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\r\n\r\n##### inflate\r\n\r\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\r\n`false`, deflated bodies are rejected. Defaults to `true`.\r\n\r\n##### limit\r\n\r\nControls the maximum request body size. If this is a number, then the value\r\nspecifies the number of bytes; if it is a string, the value is passed to the\r\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\r\nto `'100kb'`.\r\n\r\n##### type\r\n\r\nThe `type` option is used to determine what media type the middleware will\r\nparse. This option can be a string, array of strings, or a function. If not\r\na function, `type` option is passed directly to the\r\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this can\r\nbe an extension name (like `txt`), a mime type (like `text/plain`), or a mime\r\ntype with a wildcard (like `*/*` or `text/*`). If a function, the `type`\r\noption is called as `fn(req)` and the request is parsed if it returns a\r\ntruthy value. Defaults to `text/plain`.\r\n\r\n##### verify\r\n\r\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\r\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\r\nencoding of the request. The parsing can be aborted by throwing an error.\r\n\r\n### bodyParser.urlencoded([options])\r\n\r\nReturns middleware that only parses `urlencoded` bodies and only looks at\r\nrequests where the `Content-Type` header matches the `type` option. This\r\nparser accepts only UTF-8 encoding of the body and supports automatic\r\ninflation of `gzip` and `deflate` encodings.\r\n\r\nA new `body` object containing the parsed data is populated on the `request`\r\nobject after the middleware (i.e. `req.body`). This object will contain\r\nkey-value pairs, where the value can be a string or array (when `extended` is\r\n`false`), or any type (when `extended` is `true`).\r\n\r\n#### Options\r\n\r\nThe `urlencoded` function takes an optional `options` object that may contain\r\nany of the following keys:\r\n\r\n##### extended\r\n\r\nThe `extended` option allows to choose between parsing the URL-encoded data\r\nwith the `querystring` library (when `false`) or the `qs` library (when\r\n`true`). The \"extended\" syntax allows for rich objects and arrays to be\r\nencoded into the URL-encoded format, allowing for a JSON-like experience\r\nwith URL-encoded. For more information, please\r\n[see the qs library](https://www.npmjs.org/package/qs#readme).\r\n\r\nDefaults to `true`, but using the default has been deprecated. Please\r\nresearch into the difference between `qs` and `querystring` and choose the\r\nappropriate setting.\r\n\r\n##### inflate\r\n\r\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\r\n`false`, deflated bodies are rejected. Defaults to `true`.\r\n\r\n##### limit\r\n\r\nControls the maximum request body size. If this is a number, then the value\r\nspecifies the number of bytes; if it is a string, the value is passed to the\r\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\r\nto `'100kb'`.\r\n\r\n##### parameterLimit\r\n\r\nThe `parameterLimit` option controls the maximum number of parameters that\r\nare allowed in the URL-encoded data. If a request contains more parameters\r\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\r\n\r\n##### type\r\n\r\nThe `type` option is used to determine what media type the middleware will\r\nparse. This option can be a string, array of strings, or a function. If not\r\na function, `type` option is passed directly to the\r\n[type-is](https://www.npmjs.org/package/type-is#readme) library and this can\r\nbe an extension name (like `urlencoded`), a mime type (like\r\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\r\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\r\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\r\nto `application/x-www-form-urlencoded`.\r\n\r\n##### verify\r\n\r\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\r\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\r\nencoding of the request. The parsing can be aborted by throwing an error.\r\n\r\n## Errors\r\n\r\nThe middlewares provided by this module create errors depending on the error\r\ncondition during parsing. The errors will typically have a `status`/`statusCode`\r\nproperty that contains the suggested HTTP response code, an `expose` property\r\nto determine if the `message` property should be displayed to the client, a\r\n`type` property to determine the type of error without matching against the\r\n`message`, and a `body` property containing the read body, if available.\r\n\r\nThe following are the common errors emitted, though any error can come through\r\nfor various reasons.\r\n\r\n### content encoding unsupported\r\n\r\nThis error will occur when the request had a `Content-Encoding` header that\r\ncontained an encoding but the \"inflation\" option was set to `false`. The\r\n`status` property is set to `415`, the `type` property is set to\r\n`'encoding.unsupported'`, and the `charset` property will be set to the\r\nencoding that is unsupported.\r\n\r\n### request aborted\r\n\r\nThis error will occur when the request is aborted by the client before reading\r\nthe body has finished. The `received` property will be set to the number of\r\nbytes received before the request was aborted and the `expected` property is\r\nset to the number of expected bytes. The `status` property is set to `400`\r\nand `type` property is set to `'request.aborted'`.\r\n\r\n### request entity too large\r\n\r\nThis error will occur when the request body's size is larger than the \"limit\"\r\noption. The `limit` property will be set to the byte limit and the `length`\r\nproperty will be set to the request body's length. The `status` property is\r\nset to `413` and the `type` property is set to `'entity.too.large'`.\r\n\r\n### request size did not match content length\r\n\r\nThis error will occur when the request's length did not match the length from\r\nthe `Content-Length` header. This typically occurs when the request is malformed,\r\ntypically when the `Content-Length` header was calculated based on characters\r\ninstead of bytes. The `status` property is set to `400` and the `type` property\r\nis set to `'request.size.invalid'`.\r\n\r\n### stream encoding should not be set\r\n\r\nThis error will occur when something called the `req.setEncoding` method prior\r\nto this middleware. This module operates directly on bytes only and you cannot\r\ncall `req.setEncoding` when using this module. The `status` property is set to\r\n`500` and the `type` property is set to `'stream.encoding.set'`.\r\n\r\n### too many parameters\r\n\r\nThis error will occur when the content of the request exceeds the configured\r\n`parameterLimit` for the `urlencoded` parser. The `status` property is set to\r\n`413` and the `type` property is set to `'parameters.too.many'`.\r\n\r\n### unsupported charset \"BOGUS\"\r\n\r\nThis error will occur when the request had a charset parameter in the\r\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\r\nparser does not support it. The charset is contained in the message as well\r\nas in the `charset` property. The `status` property is set to `415`, the\r\n`type` property is set to `'charset.unsupported'`, and the `charset` property\r\nis set to the charset that is unsupported.\r\n\r\n### unsupported content encoding \"bogus\"\r\n\r\nThis error will occur when the request had a `Content-Encoding` header that\r\ncontained an unsupported encoding. The encoding is contained in the message\r\nas well as in the `encoding` property. The `status` property is set to `415`,\r\nthe `type` property is set to `'encoding.unsupported'`, and the `encoding`\r\nproperty is set to the encoding that is unsupported.\r\n\r\n## Examples\r\n\r\n### Express/Connect top-level generic\r\n\r\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\r\ntop-level middleware, which will parse the bodies of all incoming requests.\r\nThis is the simplest setup.\r\n\r\n```js\r\nvar express = require('express')\r\nvar bodyParser = require('body-parser')\r\n\r\nvar app = express()\r\n\r\n// parse application/x-www-form-urlencoded\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\n\r\n// parse application/json\r\napp.use(bodyParser.json())\r\n\r\napp.use(function (req, res) {\r\n  res.setHeader('Content-Type', 'text/plain')\r\n  res.write('you posted:\\n')\r\n  res.end(JSON.stringify(req.body, null, 2))\r\n})\r\n```\r\n\r\n### Express route-specific\r\n\r\nThis example demonstrates adding body parsers specifically to the routes that\r\nneed them. In general, this is the most recommended way to use body-parser with\r\nExpress.\r\n\r\n```js\r\nvar express = require('express')\r\nvar bodyParser = require('body-parser')\r\n\r\nvar app = express()\r\n\r\n// create application/json parser\r\nvar jsonParser = bodyParser.json()\r\n\r\n// create application/x-www-form-urlencoded parser\r\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\r\n\r\n// POST /login gets urlencoded bodies\r\napp.post('/login', urlencodedParser, function (req, res) {\r\n  if (!req.body) return res.sendStatus(400)\r\n  res.send('welcome, ' + req.body.username)\r\n})\r\n\r\n// POST /api/users gets JSON bodies\r\napp.post('/api/users', jsonParser, function (req, res) {\r\n  if (!req.body) return res.sendStatus(400)\r\n  // create user in req.body\r\n})\r\n```\r\n\r\n### Change accepted type for parsers\r\n\r\nAll the parsers accept a `type` option which allows you to change the\r\n`Content-Type` that the middleware will parse.\r\n\r\n```js\r\nvar express = require('express')\r\nvar bodyParser = require('body-parser')\r\n\r\nvar app = express()\r\n\r\n// parse various different custom JSON types as JSON\r\napp.use(bodyParser.json({ type: 'application/*+json' }))\r\n\r\n// parse some custom thing into a Buffer\r\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\r\n\r\n// parse an HTML body into a string\r\napp.use(bodyParser.text({ type: 'text/html' }))\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/body-parser.svg\r\n[npm-url]: https://npmjs.org/package/body-parser\r\n[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg\r\n[travis-url]: https://travis-ci.org/expressjs/body-parser\r\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg\r\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/body-parser.svg\r\n[downloads-url]: https://npmjs.org/package/body-parser\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/README.md b/node_modules/body-parser/README.md
--- a/node_modules/body-parser/README.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/body-parser/README.md	(date 1649271545263)
@@ -2,7 +2,7 @@
 
 [![NPM Version][npm-image]][npm-url]
 [![NPM Downloads][downloads-image]][downloads-url]
-[![Build Status][travis-image]][travis-url]
+[![Build Status][github-actions-ci-image]][github-actions-ci-url]
 [![Test Coverage][coveralls-image]][coveralls-url]
 
 Node.js body parsing middleware.
@@ -49,8 +49,6 @@
 
 ## API
 
-<!-- eslint-disable no-unused-vars -->
-
 ```js
 var bodyParser = require('body-parser')
 ```
@@ -281,14 +279,15 @@
 
 ## Errors
 
-The middlewares provided by this module create errors depending on the error
-condition during parsing. The errors will typically have a `status`/`statusCode`
-property that contains the suggested HTTP response code, an `expose` property
-to determine if the `message` property should be displayed to the client, a
-`type` property to determine the type of error without matching against the
-`message`, and a `body` property containing the read body, if available.
+The middlewares provided by this module create errors using the
+[`http-errors` module](https://www.npmjs.com/package/http-errors). The errors
+will typically have a `status`/`statusCode` property that contains the suggested
+HTTP response code, an `expose` property to determine if the `message` property
+should be displayed to the client, a `type` property to determine the type of
+error without matching against the `message`, and a `body` property containing
+the read body, if available.
 
-The following are the common errors emitted, though any error can come through
+The following are the common errors created, though any error can come through
 for various reasons.
 
 ### content encoding unsupported
@@ -299,6 +298,20 @@
 `'encoding.unsupported'`, and the `charset` property will be set to the
 encoding that is unsupported.
 
+### entity parse failed
+
+This error will occur when the request contained an entity that could not be
+parsed by the middleware. The `status` property is set to `400`, the `type`
+property is set to `'entity.parse.failed'`, and the `body` property is set to
+the entity value that failed parsing.
+
+### entity verify failed
+
+This error will occur when the request contained an entity that could not be
+failed verification by the defined `verify` option. The `status` property is
+set to `403`, the `type` property is set to `'entity.verify.failed'`, and the
+`body` property is set to the entity value that failed verification.
+
 ### request aborted
 
 This error will occur when the request is aborted by the client before reading
@@ -329,6 +342,14 @@
 call `req.setEncoding` when using this module. The `status` property is set to
 `500` and the `type` property is set to `'stream.encoding.set'`.
 
+### stream is not readable
+
+This error will occur when the request is no longer readable when this middleware
+attempts to read it. This typically means something other than a middleware from
+this module read the reqest body already and the middleware was also configured to
+read the same request. The `status` property is set to `500` and the `type`
+property is set to `'stream.not.readable'`.
+
 ### too many parameters
 
 This error will occur when the content of the request exceeds the configured
@@ -399,13 +420,11 @@
 
 // POST /login gets urlencoded bodies
 app.post('/login', urlencodedParser, function (req, res) {
-  if (!req.body) return res.sendStatus(400)
   res.send('welcome, ' + req.body.username)
 })
 
 // POST /api/users gets JSON bodies
 app.post('/api/users', jsonParser, function (req, res) {
-  if (!req.body) return res.sendStatus(400)
   // create user in req.body
 })
 ```
@@ -437,9 +456,9 @@
 
 [npm-image]: https://img.shields.io/npm/v/body-parser.svg
 [npm-url]: https://npmjs.org/package/body-parser
-[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg
-[travis-url]: https://travis-ci.org/expressjs/body-parser
 [coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg
 [coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master
 [downloads-image]: https://img.shields.io/npm/dm/body-parser.svg
 [downloads-url]: https://npmjs.org/package/body-parser
+[github-actions-ci-image]: https://img.shields.io/github/workflow/status/expressjs/body-parser/ci/master?label=ci
+[github-actions-ci-url]: https://github.com/expressjs/body-parser/actions/workflows/ci.yml
Index: node_modules/bytes/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"bytes@3.0.0\",\r\n  \"_id\": \"bytes@3.0.0\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=\",\r\n  \"_location\": \"/bytes\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"version\",\r\n    \"registry\": true,\r\n    \"raw\": \"bytes@3.0.0\",\r\n    \"name\": \"bytes\",\r\n    \"escapedName\": \"bytes\",\r\n    \"rawSpec\": \"3.0.0\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"3.0.0\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"/body-parser\",\r\n    \"/raw-body\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz\",\r\n  \"_shasum\": \"d32815404d689699f85a4ea4fa8755dd13a96048\",\r\n  \"_spec\": \"bytes@3.0.0\",\r\n  \"_where\": \"C:\\\\Users\\\\bsp5205\\\\WebstormProjects\\\\421Proj\\\\node_modules\\\\body-parser\",\r\n  \"author\": {\r\n    \"name\": \"TJ Holowaychuk\",\r\n    \"email\": \"tj@vision-media.ca\",\r\n    \"url\": \"http://tjholowaychuk.com\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/visionmedia/bytes.js/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Jed Watson\",\r\n      \"email\": \"jed.watson@me.com\"\r\n    },\r\n    {\r\n      \"name\": \"Théo FIDRY\",\r\n      \"email\": \"theo.fidry@gmail.com\"\r\n    }\r\n  ],\r\n  \"deprecated\": false,\r\n  \"description\": \"Utility to parse a string bytes to bytes and vice-versa\",\r\n  \"devDependencies\": {\r\n    \"mocha\": \"2.5.3\",\r\n    \"nyc\": \"10.3.2\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">= 0.8\"\r\n  },\r\n  \"files\": [\r\n    \"History.md\",\r\n    \"LICENSE\",\r\n    \"Readme.md\",\r\n    \"index.js\"\r\n  ],\r\n  \"homepage\": \"https://github.com/visionmedia/bytes.js#readme\",\r\n  \"keywords\": [\r\n    \"byte\",\r\n    \"bytes\",\r\n    \"utility\",\r\n    \"parse\",\r\n    \"parser\",\r\n    \"convert\",\r\n    \"converter\"\r\n  ],\r\n  \"license\": \"MIT\",\r\n  \"name\": \"bytes\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/visionmedia/bytes.js.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --check-leaks --reporter spec\",\r\n    \"test-ci\": \"nyc --reporter=text npm test\",\r\n    \"test-cov\": \"nyc --reporter=html --reporter=text npm test\"\r\n  },\r\n  \"version\": \"3.0.0\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/bytes/package.json b/node_modules/bytes/package.json
--- a/node_modules/bytes/package.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/bytes/package.json	(date 1649271545079)
@@ -1,63 +1,13 @@
 {
-  "_from": "bytes@3.0.0",
-  "_id": "bytes@3.0.0",
-  "_inBundle": false,
-  "_integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=",
-  "_location": "/bytes",
-  "_phantomChildren": {},
-  "_requested": {
-    "type": "version",
-    "registry": true,
-    "raw": "bytes@3.0.0",
-    "name": "bytes",
-    "escapedName": "bytes",
-    "rawSpec": "3.0.0",
-    "saveSpec": null,
-    "fetchSpec": "3.0.0"
-  },
-  "_requiredBy": [
-    "/body-parser",
-    "/raw-body"
-  ],
-  "_resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
-  "_shasum": "d32815404d689699f85a4ea4fa8755dd13a96048",
-  "_spec": "bytes@3.0.0",
-  "_where": "C:\\Users\\bsp5205\\WebstormProjects\\421Proj\\node_modules\\body-parser",
-  "author": {
-    "name": "TJ Holowaychuk",
-    "email": "tj@vision-media.ca",
-    "url": "http://tjholowaychuk.com"
-  },
-  "bugs": {
-    "url": "https://github.com/visionmedia/bytes.js/issues"
-  },
-  "bundleDependencies": false,
-  "contributors": [
-    {
-      "name": "Jed Watson",
-      "email": "jed.watson@me.com"
-    },
-    {
-      "name": "Théo FIDRY",
-      "email": "theo.fidry@gmail.com"
-    }
-  ],
-  "deprecated": false,
+  "name": "bytes",
   "description": "Utility to parse a string bytes to bytes and vice-versa",
-  "devDependencies": {
-    "mocha": "2.5.3",
-    "nyc": "10.3.2"
-  },
-  "engines": {
-    "node": ">= 0.8"
-  },
-  "files": [
-    "History.md",
-    "LICENSE",
-    "Readme.md",
-    "index.js"
+  "version": "3.1.2",
+  "author": "TJ Holowaychuk <tj@vision-media.ca> (http://tjholowaychuk.com)",
+  "contributors": [
+    "Jed Watson <jed.watson@me.com>",
+    "Théo FIDRY <theo.fidry@gmail.com>"
   ],
-  "homepage": "https://github.com/visionmedia/bytes.js#readme",
+  "license": "MIT",
   "keywords": [
     "byte",
     "bytes",
@@ -67,16 +17,26 @@
     "convert",
     "converter"
   ],
-  "license": "MIT",
-  "name": "bytes",
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/visionmedia/bytes.js.git"
+  "repository": "visionmedia/bytes.js",
+  "devDependencies": {
+    "eslint": "7.32.0",
+    "eslint-plugin-markdown": "2.2.1",
+    "mocha": "9.2.0",
+    "nyc": "15.1.0"
+  },
+  "files": [
+    "History.md",
+    "LICENSE",
+    "Readme.md",
+    "index.js"
+  ],
+  "engines": {
+    "node": ">= 0.8"
   },
   "scripts": {
+    "lint": "eslint .",
     "test": "mocha --check-leaks --reporter spec",
-    "test-ci": "nyc --reporter=text npm test",
+    "test-ci": "nyc --reporter=lcov --reporter=text npm test",
     "test-cov": "nyc --reporter=html --reporter=text npm test"
-  },
-  "version": "3.0.0"
+  }
 }
Index: node_modules/bytes/History.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>3.0.0 / 2017-08-31\r\n==================\r\n\r\n  * Change \"kB\" to \"KB\" in format output\r\n  * Remove support for Node.js 0.6\r\n  * Remove support for ComponentJS\r\n\r\n2.5.0 / 2017-03-24\r\n==================\r\n\r\n  * Add option \"unit\"\r\n\r\n2.4.0 / 2016-06-01\r\n==================\r\n\r\n  * Add option \"unitSeparator\"\r\n\r\n2.3.0 / 2016-02-15\r\n==================\r\n\r\n  * Drop partial bytes on all parsed units\r\n  * Fix non-finite numbers to `.format` to return `null`\r\n  * Fix parsing byte string that looks like hex\r\n  * perf: hoist regular expressions\r\n\r\n2.2.0 / 2015-11-13\r\n==================\r\n\r\n  * add option \"decimalPlaces\"\r\n  * add option \"fixedDecimals\"\r\n\r\n2.1.0 / 2015-05-21\r\n==================\r\n\r\n  * add `.format` export\r\n  * add `.parse` export\r\n\r\n2.0.2 / 2015-05-20\r\n==================\r\n\r\n  * remove map recreation\r\n  * remove unnecessary object construction\r\n\r\n2.0.1 / 2015-05-07\r\n==================\r\n\r\n  * fix browserify require\r\n  * remove node.extend dependency\r\n\r\n2.0.0 / 2015-04-12\r\n==================\r\n\r\n  * add option \"case\"\r\n  * add option \"thousandsSeparator\"\r\n  * return \"null\" on invalid parse input\r\n  * support proper round-trip: bytes(bytes(num)) === num\r\n  * units no longer case sensitive when parsing\r\n\r\n1.0.0 / 2014-05-05\r\n==================\r\n\r\n * add negative support. fixes #6\r\n\r\n0.3.0 / 2014-03-19\r\n==================\r\n\r\n * added terabyte support\r\n\r\n0.2.1 / 2013-04-01\r\n==================\r\n\r\n  * add .component\r\n\r\n0.2.0 / 2012-10-28\r\n==================\r\n\r\n  * bytes(200).should.eql('200b')\r\n\r\n0.1.0 / 2012-07-04\r\n==================\r\n\r\n  * add bytes to string conversion [yields]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/bytes/History.md b/node_modules/bytes/History.md
--- a/node_modules/bytes/History.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/bytes/History.md	(date 1649271545084)
@@ -1,3 +1,18 @@
+3.1.2 / 2022-01-27
+==================
+
+  * Fix return value for un-parsable strings
+
+3.1.1 / 2021-11-15
+==================
+
+  * Fix "thousandsSeparator" incorrecting formatting fractional part
+
+3.1.0 / 2019-01-22
+==================
+
+  * Add petabyte (`pb`) support
+
 3.0.0 / 2017-08-31
 ==================
 
Index: node_modules/bytes/Readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Bytes utility\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n\r\nUtility to parse a string bytes (ex: `1TB`) to bytes (`1099511627776`) and vice-versa.\r\n\r\n## Installation\r\n\r\nThis is a [Node.js](https://nodejs.org/en/) module available through the\r\n[npm registry](https://www.npmjs.com/). Installation is done using the\r\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\r\n\r\n```bash\r\n$ npm install bytes\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar bytes = require('bytes');\r\n```\r\n\r\n#### bytes.format(number value, [options]): string｜null\r\n\r\nFormat the given value in bytes into a string. If the value is negative, it is kept as such. If it is a float, it is\r\n rounded.\r\n\r\n**Arguments**\r\n\r\n| Name    | Type     | Description        |\r\n|---------|----------|--------------------|\r\n| value   | `number` | Value in bytes     |\r\n| options | `Object` | Conversion options |\r\n\r\n**Options**\r\n\r\n| Property          | Type   | Description                                                                             |\r\n|-------------------|--------|-----------------------------------------------------------------------------------------|\r\n| decimalPlaces | `number`｜`null` | Maximum number of decimal places to include in output. Default value to `2`. |\r\n| fixedDecimals | `boolean`｜`null` | Whether to always display the maximum number of decimal places. Default value to `false` |\r\n| thousandsSeparator | `string`｜`null` | Example of values: `' '`, `','` and `.`... Default value to `''`. |\r\n| unit | `string`｜`null` | The unit in which the result will be returned (B/KB/MB/GB/TB). Default value to `''` (which means auto detect). |\r\n| unitSeparator | `string`｜`null` | Separator to use between number and unit. Default value to `''`. |\r\n\r\n**Returns**\r\n\r\n| Name    | Type             | Description                                     |\r\n|---------|------------------|-------------------------------------------------|\r\n| results | `string`｜`null` | Return null upon error. String value otherwise. |\r\n\r\n**Example**\r\n\r\n```js\r\nbytes(1024);\r\n// output: '1KB'\r\n\r\nbytes(1000);\r\n// output: '1000B'\r\n\r\nbytes(1000, {thousandsSeparator: ' '});\r\n// output: '1 000B'\r\n\r\nbytes(1024 * 1.7, {decimalPlaces: 0});\r\n// output: '2KB'\r\n\r\nbytes(1024, {unitSeparator: ' '});\r\n// output: '1 KB'\r\n\r\n```\r\n\r\n#### bytes.parse(string｜number value): number｜null\r\n\r\nParse the string value into an integer in bytes. If no unit is given, or `value`\r\nis a number, it is assumed the value is in bytes.\r\n\r\nSupported units and abbreviations are as follows and are case-insensitive:\r\n\r\n  * `b` for bytes\r\n  * `kb` for kilobytes\r\n  * `mb` for megabytes\r\n  * `gb` for gigabytes\r\n  * `tb` for terabytes\r\n\r\nThe units are in powers of two, not ten. This means 1kb = 1024b according to this parser.\r\n\r\n**Arguments**\r\n\r\n| Name          | Type   | Description        |\r\n|---------------|--------|--------------------|\r\n| value   | `string`｜`number` | String to parse, or number in bytes.   |\r\n\r\n**Returns**\r\n\r\n| Name    | Type        | Description             |\r\n|---------|-------------|-------------------------|\r\n| results | `number`｜`null` | Return null upon error. Value in bytes otherwise. |\r\n\r\n**Example**\r\n\r\n```js\r\nbytes('1KB');\r\n// output: 1024\r\n\r\nbytes('1024');\r\n// output: 1024\r\n\r\nbytes(1024);\r\n// output: 1024\r\n```\r\n\r\n## License \r\n\r\n[MIT](LICENSE)\r\n\r\n[downloads-image]: https://img.shields.io/npm/dm/bytes.svg\r\n[downloads-url]: https://npmjs.org/package/bytes\r\n[npm-image]: https://img.shields.io/npm/v/bytes.svg\r\n[npm-url]: https://npmjs.org/package/bytes\r\n[travis-image]: https://img.shields.io/travis/visionmedia/bytes.js/master.svg\r\n[travis-url]: https://travis-ci.org/visionmedia/bytes.js\r\n[coveralls-image]: https://img.shields.io/coveralls/visionmedia/bytes.js/master.svg\r\n[coveralls-url]: https://coveralls.io/r/visionmedia/bytes.js?branch=master\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/bytes/Readme.md b/node_modules/bytes/Readme.md
--- a/node_modules/bytes/Readme.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/bytes/Readme.md	(date 1649271545095)
@@ -2,7 +2,7 @@
 
 [![NPM Version][npm-image]][npm-url]
 [![NPM Downloads][downloads-image]][downloads-url]
-[![Build Status][travis-image]][travis-url]
+[![Build Status][ci-image]][ci-url]
 [![Test Coverage][coveralls-image]][coveralls-url]
 
 Utility to parse a string bytes (ex: `1TB`) to bytes (`1099511627776`) and vice-versa.
@@ -23,6 +23,33 @@
 var bytes = require('bytes');
 ```
 
+#### bytes(number｜string value, [options]): number｜string｜null
+
+Default export function. Delegates to either `bytes.format` or `bytes.parse` based on the type of `value`.
+
+**Arguments**
+
+| Name    | Type     | Description        |
+|---------|----------|--------------------|
+| value   | `number`｜`string` | Number value to format or string value to parse |
+| options | `Object` | Conversion options for `format` |
+
+**Returns**
+
+| Name    | Type             | Description                                     |
+|---------|------------------|-------------------------------------------------|
+| results | `string`｜`number`｜`null` | Return null upon error. Numeric value in bytes, or string value otherwise. |
+
+**Example**
+
+```js
+bytes(1024);
+// output: '1KB'
+
+bytes('1KB');
+// output: 1024
+```
+
 #### bytes.format(number value, [options]): string｜null
 
 Format the given value in bytes into a string. If the value is negative, it is kept as such. If it is a float, it is
@@ -41,7 +68,7 @@
 |-------------------|--------|-----------------------------------------------------------------------------------------|
 | decimalPlaces | `number`｜`null` | Maximum number of decimal places to include in output. Default value to `2`. |
 | fixedDecimals | `boolean`｜`null` | Whether to always display the maximum number of decimal places. Default value to `false` |
-| thousandsSeparator | `string`｜`null` | Example of values: `' '`, `','` and `.`... Default value to `''`. |
+| thousandsSeparator | `string`｜`null` | Example of values: `' '`, `','` and `'.'`... Default value to `''`. |
 | unit | `string`｜`null` | The unit in which the result will be returned (B/KB/MB/GB/TB). Default value to `''` (which means auto detect). |
 | unitSeparator | `string`｜`null` | Separator to use between number and unit. Default value to `''`. |
 
@@ -54,21 +81,20 @@
 **Example**
 
 ```js
-bytes(1024);
+bytes.format(1024);
 // output: '1KB'
 
-bytes(1000);
+bytes.format(1000);
 // output: '1000B'
 
-bytes(1000, {thousandsSeparator: ' '});
+bytes.format(1000, {thousandsSeparator: ' '});
 // output: '1 000B'
 
-bytes(1024 * 1.7, {decimalPlaces: 0});
+bytes.format(1024 * 1.7, {decimalPlaces: 0});
 // output: '2KB'
 
-bytes(1024, {unitSeparator: ' '});
+bytes.format(1024, {unitSeparator: ' '});
 // output: '1 KB'
-
 ```
 
 #### bytes.parse(string｜number value): number｜null
@@ -83,6 +109,7 @@
   * `mb` for megabytes
   * `gb` for gigabytes
   * `tb` for terabytes
+  * `pb` for petabytes
 
 The units are in powers of two, not ten. This means 1kb = 1024b according to this parser.
 
@@ -101,25 +128,25 @@
 **Example**
 
 ```js
-bytes('1KB');
+bytes.parse('1KB');
 // output: 1024
 
-bytes('1024');
+bytes.parse('1024');
 // output: 1024
 
-bytes(1024);
+bytes.parse(1024);
 // output: 1024
 ```
 
-## License 
+## License
 
 [MIT](LICENSE)
 
-[downloads-image]: https://img.shields.io/npm/dm/bytes.svg
+[ci-image]: https://badgen.net/github/checks/visionmedia/bytes.js/master?label=ci
+[ci-url]: https://github.com/visionmedia/bytes.js/actions?query=workflow%3Aci
+[coveralls-image]: https://badgen.net/coveralls/c/github/visionmedia/bytes.js/master
+[coveralls-url]: https://coveralls.io/r/visionmedia/bytes.js?branch=master
+[downloads-image]: https://badgen.net/npm/dm/bytes
 [downloads-url]: https://npmjs.org/package/bytes
-[npm-image]: https://img.shields.io/npm/v/bytes.svg
+[npm-image]: https://badgen.net/npm/v/bytes
 [npm-url]: https://npmjs.org/package/bytes
-[travis-image]: https://img.shields.io/travis/visionmedia/bytes.js/master.svg
-[travis-url]: https://travis-ci.org/visionmedia/bytes.js
-[coveralls-image]: https://img.shields.io/coveralls/visionmedia/bytes.js/master.svg
-[coveralls-url]: https://coveralls.io/r/visionmedia/bytes.js?branch=master
Index: node_modules/bytes/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*!\r\n * bytes\r\n * Copyright(c) 2012-2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Jed Watson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = bytes;\r\nmodule.exports.format = format;\r\nmodule.exports.parse = parse;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n\r\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\r\n\r\nvar map = {\r\n  b:  1,\r\n  kb: 1 << 10,\r\n  mb: 1 << 20,\r\n  gb: 1 << 30,\r\n  tb: ((1 << 30) * 1024)\r\n};\r\n\r\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb)$/i;\r\n\r\n/**\r\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\r\n *\r\n * @param {string|number} value\r\n * @param {{\r\n *  case: [string],\r\n *  decimalPlaces: [number]\r\n *  fixedDecimals: [boolean]\r\n *  thousandsSeparator: [string]\r\n *  unitSeparator: [string]\r\n *  }} [options] bytes options.\r\n *\r\n * @returns {string|number|null}\r\n */\r\n\r\nfunction bytes(value, options) {\r\n  if (typeof value === 'string') {\r\n    return parse(value);\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return format(value, options);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Format the given value in bytes into a string.\r\n *\r\n * If the value is negative, it is kept as such. If it is a float,\r\n * it is rounded.\r\n *\r\n * @param {number} value\r\n * @param {object} [options]\r\n * @param {number} [options.decimalPlaces=2]\r\n * @param {number} [options.fixedDecimals=false]\r\n * @param {string} [options.thousandsSeparator=]\r\n * @param {string} [options.unit=]\r\n * @param {string} [options.unitSeparator=]\r\n *\r\n * @returns {string|null}\r\n * @public\r\n */\r\n\r\nfunction format(value, options) {\r\n  if (!Number.isFinite(value)) {\r\n    return null;\r\n  }\r\n\r\n  var mag = Math.abs(value);\r\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\r\n  var unitSeparator = (options && options.unitSeparator) || '';\r\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\r\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\r\n  var unit = (options && options.unit) || '';\r\n\r\n  if (!unit || !map[unit.toLowerCase()]) {\r\n    if (mag >= map.tb) {\r\n      unit = 'TB';\r\n    } else if (mag >= map.gb) {\r\n      unit = 'GB';\r\n    } else if (mag >= map.mb) {\r\n      unit = 'MB';\r\n    } else if (mag >= map.kb) {\r\n      unit = 'KB';\r\n    } else {\r\n      unit = 'B';\r\n    }\r\n  }\r\n\r\n  var val = value / map[unit.toLowerCase()];\r\n  var str = val.toFixed(decimalPlaces);\r\n\r\n  if (!fixedDecimals) {\r\n    str = str.replace(formatDecimalsRegExp, '$1');\r\n  }\r\n\r\n  if (thousandsSeparator) {\r\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\r\n  }\r\n\r\n  return str + unitSeparator + unit;\r\n}\r\n\r\n/**\r\n * Parse the string value into an integer in bytes.\r\n *\r\n * If no unit is given, it is assumed the value is in bytes.\r\n *\r\n * @param {number|string} val\r\n *\r\n * @returns {number|null}\r\n * @public\r\n */\r\n\r\nfunction parse(val) {\r\n  if (typeof val === 'number' && !isNaN(val)) {\r\n    return val;\r\n  }\r\n\r\n  if (typeof val !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  // Test if the string passed is valid\r\n  var results = parseRegExp.exec(val);\r\n  var floatValue;\r\n  var unit = 'b';\r\n\r\n  if (!results) {\r\n    // Nothing could be extracted from the given string\r\n    floatValue = parseInt(val, 10);\r\n    unit = 'b'\r\n  } else {\r\n    // Retrieve the value and the unit\r\n    floatValue = parseFloat(results[1]);\r\n    unit = results[4].toLowerCase();\r\n  }\r\n\r\n  return Math.floor(map[unit] * floatValue);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/bytes/index.js b/node_modules/bytes/index.js
--- a/node_modules/bytes/index.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/bytes/index.js	(date 1649271545074)
@@ -30,10 +30,11 @@
   kb: 1 << 10,
   mb: 1 << 20,
   gb: 1 << 30,
-  tb: ((1 << 30) * 1024)
+  tb: Math.pow(1024, 4),
+  pb: Math.pow(1024, 5),
 };
 
-var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb)$/i;
+var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;
 
 /**
  * Convert the given value in bytes into a string or parse to string to an integer in bytes.
@@ -93,7 +94,9 @@
   var unit = (options && options.unit) || '';
 
   if (!unit || !map[unit.toLowerCase()]) {
-    if (mag >= map.tb) {
+    if (mag >= map.pb) {
+      unit = 'PB';
+    } else if (mag >= map.tb) {
       unit = 'TB';
     } else if (mag >= map.gb) {
       unit = 'GB';
@@ -114,7 +117,11 @@
   }
 
   if (thousandsSeparator) {
-    str = str.replace(formatThousandsRegExp, thousandsSeparator);
+    str = str.split('.').map(function (s, i) {
+      return i === 0
+        ? s.replace(formatThousandsRegExp, thousandsSeparator)
+        : s
+    }).join('.');
   }
 
   return str + unitSeparator + unit;
@@ -155,5 +162,9 @@
     unit = results[4].toLowerCase();
   }
 
+  if (isNaN(floatValue)) {
+    return null;
+  }
+
   return Math.floor(map[unit] * floatValue);
 }
Index: node_modules/body-parser/lib/read.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar createError = require('http-errors')\r\nvar getBody = require('raw-body')\r\nvar iconv = require('iconv-lite')\r\nvar onFinished = require('on-finished')\r\nvar zlib = require('zlib')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = read\r\n\r\n/**\r\n * Read a request into a buffer and parse.\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n * @param {function} next\r\n * @param {function} parse\r\n * @param {function} debug\r\n * @param {object} options\r\n * @private\r\n */\r\n\r\nfunction read (req, res, next, parse, debug, options) {\r\n  var length\r\n  var opts = options\r\n  var stream\r\n\r\n  // flag as parsed\r\n  req._body = true\r\n\r\n  // read options\r\n  var encoding = opts.encoding !== null\r\n    ? opts.encoding\r\n    : null\r\n  var verify = opts.verify\r\n\r\n  try {\r\n    // get the content stream\r\n    stream = contentstream(req, debug, opts.inflate)\r\n    length = stream.length\r\n    stream.length = undefined\r\n  } catch (err) {\r\n    return next(err)\r\n  }\r\n\r\n  // set raw-body options\r\n  opts.length = length\r\n  opts.encoding = verify\r\n    ? null\r\n    : encoding\r\n\r\n  // assert charset is supported\r\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\r\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n      charset: encoding.toLowerCase(),\r\n      type: 'charset.unsupported'\r\n    }))\r\n  }\r\n\r\n  // read body\r\n  debug('read body')\r\n  getBody(stream, opts, function (error, body) {\r\n    if (error) {\r\n      var _error\r\n\r\n      if (error.type === 'encoding.unsupported') {\r\n        // echo back charset\r\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n          charset: encoding.toLowerCase(),\r\n          type: 'charset.unsupported'\r\n        })\r\n      } else {\r\n        // set status code on error\r\n        _error = createError(400, error)\r\n      }\r\n\r\n      // read off entire request\r\n      stream.resume()\r\n      onFinished(req, function onfinished () {\r\n        next(createError(400, _error))\r\n      })\r\n      return\r\n    }\r\n\r\n    // verify\r\n    if (verify) {\r\n      try {\r\n        debug('verify body')\r\n        verify(req, res, body, encoding)\r\n      } catch (err) {\r\n        next(createError(403, err, {\r\n          body: body,\r\n          type: err.type || 'entity.verify.failed'\r\n        }))\r\n        return\r\n      }\r\n    }\r\n\r\n    // parse\r\n    var str = body\r\n    try {\r\n      debug('parse body')\r\n      str = typeof body !== 'string' && encoding !== null\r\n        ? iconv.decode(body, encoding)\r\n        : body\r\n      req.body = parse(str)\r\n    } catch (err) {\r\n      next(createError(400, err, {\r\n        body: str,\r\n        type: err.type || 'entity.parse.failed'\r\n      }))\r\n      return\r\n    }\r\n\r\n    next()\r\n  })\r\n}\r\n\r\n/**\r\n * Get the content stream of the request.\r\n *\r\n * @param {object} req\r\n * @param {function} debug\r\n * @param {boolean} [inflate=true]\r\n * @return {object}\r\n * @api private\r\n */\r\n\r\nfunction contentstream (req, debug, inflate) {\r\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\r\n  var length = req.headers['content-length']\r\n  var stream\r\n\r\n  debug('content-encoding \"%s\"', encoding)\r\n\r\n  if (inflate === false && encoding !== 'identity') {\r\n    throw createError(415, 'content encoding unsupported', {\r\n      encoding: encoding,\r\n      type: 'encoding.unsupported'\r\n    })\r\n  }\r\n\r\n  switch (encoding) {\r\n    case 'deflate':\r\n      stream = zlib.createInflate()\r\n      debug('inflate body')\r\n      req.pipe(stream)\r\n      break\r\n    case 'gzip':\r\n      stream = zlib.createGunzip()\r\n      debug('gunzip body')\r\n      req.pipe(stream)\r\n      break\r\n    case 'identity':\r\n      stream = req\r\n      stream.length = length\r\n      break\r\n    default:\r\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\r\n        encoding: encoding,\r\n        type: 'encoding.unsupported'\r\n      })\r\n  }\r\n\r\n  return stream\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/lib/read.js b/node_modules/body-parser/lib/read.js
--- a/node_modules/body-parser/lib/read.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/body-parser/lib/read.js	(date 1649271545216)
@@ -12,9 +12,11 @@
  */
 
 var createError = require('http-errors')
+var destroy = require('destroy')
 var getBody = require('raw-body')
 var iconv = require('iconv-lite')
 var onFinished = require('on-finished')
+var unpipe = require('unpipe')
 var zlib = require('zlib')
 
 /**
@@ -89,9 +91,14 @@
         _error = createError(400, error)
       }
 
+      // unpipe from stream and destroy
+      if (stream !== req) {
+        unpipe(req)
+        destroy(stream, true)
+      }
+
       // read off entire request
-      stream.resume()
-      onFinished(req, function onfinished () {
+      dump(req, function onfinished () {
         next(createError(400, _error))
       })
       return
@@ -179,3 +186,20 @@
 
   return stream
 }
+
+/**
+ * Dump the contents of a request.
+ *
+ * @param {object} req
+ * @param {function} callback
+ * @api private
+ */
+
+function dump (req, callback) {
+  if (onFinished.isFinished(req)) {
+    callback(null)
+  } else {
+    onFinished(req, callback)
+    req.resume()
+  }
+}
Index: node_modules/body-parser/lib/types/json.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*!\r\n * body-parser\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar contentType = require('content-type')\r\nvar createError = require('http-errors')\r\nvar debug = require('debug')('body-parser:json')\r\nvar read = require('../read')\r\nvar typeis = require('type-is')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = json\r\n\r\n/**\r\n * RegExp to match the first non-space in a string.\r\n *\r\n * Allowed whitespace is defined in RFC 7159:\r\n *\r\n *    ws = *(\r\n *            %x20 /              ; Space\r\n *            %x09 /              ; Horizontal tab\r\n *            %x0A /              ; Line feed or New line\r\n *            %x0D )              ; Carriage return\r\n */\r\n\r\nvar FIRST_CHAR_REGEXP = /^[\\x20\\x09\\x0a\\x0d]*(.)/ // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * Create a middleware to parse JSON bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @public\r\n */\r\n\r\nfunction json (options) {\r\n  var opts = options || {}\r\n\r\n  var limit = typeof opts.limit !== 'number'\r\n    ? bytes.parse(opts.limit || '100kb')\r\n    : opts.limit\r\n  var inflate = opts.inflate !== false\r\n  var reviver = opts.reviver\r\n  var strict = opts.strict !== false\r\n  var type = opts.type || 'application/json'\r\n  var verify = opts.verify || false\r\n\r\n  if (verify !== false && typeof verify !== 'function') {\r\n    throw new TypeError('option verify must be function')\r\n  }\r\n\r\n  // create the appropriate type checking function\r\n  var shouldParse = typeof type !== 'function'\r\n    ? typeChecker(type)\r\n    : type\r\n\r\n  function parse (body) {\r\n    if (body.length === 0) {\r\n      // special-case empty json body, as it's a common client-side mistake\r\n      // TODO: maybe make this configurable or part of \"strict\" option\r\n      return {}\r\n    }\r\n\r\n    if (strict) {\r\n      var first = firstchar(body)\r\n\r\n      if (first !== '{' && first !== '[') {\r\n        debug('strict violation')\r\n        throw createStrictSyntaxError(body, first)\r\n      }\r\n    }\r\n\r\n    try {\r\n      debug('parse json')\r\n      return JSON.parse(body, reviver)\r\n    } catch (e) {\r\n      throw normalizeJsonSyntaxError(e, {\r\n        message: e.message,\r\n        stack: e.stack\r\n      })\r\n    }\r\n  }\r\n\r\n  return function jsonParser (req, res, next) {\r\n    if (req._body) {\r\n      debug('body already parsed')\r\n      next()\r\n      return\r\n    }\r\n\r\n    req.body = req.body || {}\r\n\r\n    // skip requests without bodies\r\n    if (!typeis.hasBody(req)) {\r\n      debug('skip empty body')\r\n      next()\r\n      return\r\n    }\r\n\r\n    debug('content-type %j', req.headers['content-type'])\r\n\r\n    // determine if request should be parsed\r\n    if (!shouldParse(req)) {\r\n      debug('skip parsing')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // assert charset per RFC 7159 sec 8.1\r\n    var charset = getCharset(req) || 'utf-8'\r\n    if (charset.substr(0, 4) !== 'utf-') {\r\n      debug('invalid charset')\r\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\r\n        charset: charset,\r\n        type: 'charset.unsupported'\r\n      }))\r\n      return\r\n    }\r\n\r\n    // read\r\n    read(req, res, next, parse, debug, {\r\n      encoding: charset,\r\n      inflate: inflate,\r\n      limit: limit,\r\n      verify: verify\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Create strict violation syntax error matching native error.\r\n *\r\n * @param {string} str\r\n * @param {string} char\r\n * @return {Error}\r\n * @private\r\n */\r\n\r\nfunction createStrictSyntaxError (str, char) {\r\n  var index = str.indexOf(char)\r\n  var partial = str.substring(0, index) + '#'\r\n\r\n  try {\r\n    JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')\r\n  } catch (e) {\r\n    return normalizeJsonSyntaxError(e, {\r\n      message: e.message.replace('#', char),\r\n      stack: e.stack\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the first non-whitespace character in a string.\r\n *\r\n * @param {string} str\r\n * @return {function}\r\n * @private\r\n */\r\n\r\nfunction firstchar (str) {\r\n  return FIRST_CHAR_REGEXP.exec(str)[1]\r\n}\r\n\r\n/**\r\n * Get the charset of a request.\r\n *\r\n * @param {object} req\r\n * @api private\r\n */\r\n\r\nfunction getCharset (req) {\r\n  try {\r\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\r\n  } catch (e) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Normalize a SyntaxError for JSON.parse.\r\n *\r\n * @param {SyntaxError} error\r\n * @param {object} obj\r\n * @return {SyntaxError}\r\n */\r\n\r\nfunction normalizeJsonSyntaxError (error, obj) {\r\n  var keys = Object.getOwnPropertyNames(error)\r\n\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var key = keys[i]\r\n    if (key !== 'stack' && key !== 'message') {\r\n      delete error[key]\r\n    }\r\n  }\r\n\r\n  // replace stack before message for Node.js 0.10 and below\r\n  error.stack = obj.stack.replace(error.message, obj.message)\r\n  error.message = obj.message\r\n\r\n  return error\r\n}\r\n\r\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\r\n\r\nfunction typeChecker (type) {\r\n  return function checkType (req) {\r\n    return Boolean(typeis(req, type))\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/lib/types/json.js b/node_modules/body-parser/lib/types/json.js
--- a/node_modules/body-parser/lib/types/json.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/body-parser/lib/types/json.js	(date 1649271545184)
@@ -37,7 +37,7 @@
  *            %x0D )              ; Carriage return
  */
 
-var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*(.)/ // eslint-disable-line no-control-regex
+var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*([^\x20\x09\x0a\x0d])/ // eslint-disable-line no-control-regex
 
 /**
  * Create a middleware to parse JSON bodies.
@@ -122,7 +122,7 @@
 
     // assert charset per RFC 7159 sec 8.1
     var charset = getCharset(req) || 'utf-8'
-    if (charset.substr(0, 4) !== 'utf-') {
+    if (charset.slice(0, 4) !== 'utf-') {
       debug('invalid charset')
       next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
         charset: charset,
@@ -152,7 +152,9 @@
 
 function createStrictSyntaxError (str, char) {
   var index = str.indexOf(char)
-  var partial = str.substring(0, index) + '#'
+  var partial = index !== -1
+    ? str.substring(0, index) + '#'
+    : ''
 
   try {
     JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')
@@ -173,7 +175,11 @@
  */
 
 function firstchar (str) {
-  return FIRST_CHAR_REGEXP.exec(str)[1]
+  var match = FIRST_CHAR_REGEXP.exec(str)
+
+  return match
+    ? match[1]
+    : undefined
 }
 
 /**
Index: node_modules/body-parser/lib/types/urlencoded.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*!\r\n * body-parser\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar contentType = require('content-type')\r\nvar createError = require('http-errors')\r\nvar debug = require('debug')('body-parser:urlencoded')\r\nvar deprecate = require('depd')('body-parser')\r\nvar read = require('../read')\r\nvar typeis = require('type-is')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = urlencoded\r\n\r\n/**\r\n * Cache of parser modules.\r\n */\r\n\r\nvar parsers = Object.create(null)\r\n\r\n/**\r\n * Create a middleware to parse urlencoded bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @public\r\n */\r\n\r\nfunction urlencoded (options) {\r\n  var opts = options || {}\r\n\r\n  // notice because option default will flip in next major\r\n  if (opts.extended === undefined) {\r\n    deprecate('undefined extended: provide extended option')\r\n  }\r\n\r\n  var extended = opts.extended !== false\r\n  var inflate = opts.inflate !== false\r\n  var limit = typeof opts.limit !== 'number'\r\n    ? bytes.parse(opts.limit || '100kb')\r\n    : opts.limit\r\n  var type = opts.type || 'application/x-www-form-urlencoded'\r\n  var verify = opts.verify || false\r\n\r\n  if (verify !== false && typeof verify !== 'function') {\r\n    throw new TypeError('option verify must be function')\r\n  }\r\n\r\n  // create the appropriate query parser\r\n  var queryparse = extended\r\n    ? extendedparser(opts)\r\n    : simpleparser(opts)\r\n\r\n  // create the appropriate type checking function\r\n  var shouldParse = typeof type !== 'function'\r\n    ? typeChecker(type)\r\n    : type\r\n\r\n  function parse (body) {\r\n    return body.length\r\n      ? queryparse(body)\r\n      : {}\r\n  }\r\n\r\n  return function urlencodedParser (req, res, next) {\r\n    if (req._body) {\r\n      debug('body already parsed')\r\n      next()\r\n      return\r\n    }\r\n\r\n    req.body = req.body || {}\r\n\r\n    // skip requests without bodies\r\n    if (!typeis.hasBody(req)) {\r\n      debug('skip empty body')\r\n      next()\r\n      return\r\n    }\r\n\r\n    debug('content-type %j', req.headers['content-type'])\r\n\r\n    // determine if request should be parsed\r\n    if (!shouldParse(req)) {\r\n      debug('skip parsing')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // assert charset\r\n    var charset = getCharset(req) || 'utf-8'\r\n    if (charset !== 'utf-8') {\r\n      debug('invalid charset')\r\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\r\n        charset: charset,\r\n        type: 'charset.unsupported'\r\n      }))\r\n      return\r\n    }\r\n\r\n    // read\r\n    read(req, res, next, parse, debug, {\r\n      debug: debug,\r\n      encoding: charset,\r\n      inflate: inflate,\r\n      limit: limit,\r\n      verify: verify\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the extended query parser.\r\n *\r\n * @param {object} options\r\n */\r\n\r\nfunction extendedparser (options) {\r\n  var parameterLimit = options.parameterLimit !== undefined\r\n    ? options.parameterLimit\r\n    : 1000\r\n  var parse = parser('qs')\r\n\r\n  if (isNaN(parameterLimit) || parameterLimit < 1) {\r\n    throw new TypeError('option parameterLimit must be a positive number')\r\n  }\r\n\r\n  if (isFinite(parameterLimit)) {\r\n    parameterLimit = parameterLimit | 0\r\n  }\r\n\r\n  return function queryparse (body) {\r\n    var paramCount = parameterCount(body, parameterLimit)\r\n\r\n    if (paramCount === undefined) {\r\n      debug('too many parameters')\r\n      throw createError(413, 'too many parameters', {\r\n        type: 'parameters.too.many'\r\n      })\r\n    }\r\n\r\n    var arrayLimit = Math.max(100, paramCount)\r\n\r\n    debug('parse extended urlencoding')\r\n    return parse(body, {\r\n      allowPrototypes: true,\r\n      arrayLimit: arrayLimit,\r\n      depth: Infinity,\r\n      parameterLimit: parameterLimit\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the charset of a request.\r\n *\r\n * @param {object} req\r\n * @api private\r\n */\r\n\r\nfunction getCharset (req) {\r\n  try {\r\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\r\n  } catch (e) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Count the number of parameters, stopping once limit reached\r\n *\r\n * @param {string} body\r\n * @param {number} limit\r\n * @api private\r\n */\r\n\r\nfunction parameterCount (body, limit) {\r\n  var count = 0\r\n  var index = 0\r\n\r\n  while ((index = body.indexOf('&', index)) !== -1) {\r\n    count++\r\n    index++\r\n\r\n    if (count === limit) {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  return count\r\n}\r\n\r\n/**\r\n * Get parser for module name dynamically.\r\n *\r\n * @param {string} name\r\n * @return {function}\r\n * @api private\r\n */\r\n\r\nfunction parser (name) {\r\n  var mod = parsers[name]\r\n\r\n  if (mod !== undefined) {\r\n    return mod.parse\r\n  }\r\n\r\n  // this uses a switch for static require analysis\r\n  switch (name) {\r\n    case 'qs':\r\n      mod = require('qs')\r\n      break\r\n    case 'querystring':\r\n      mod = require('querystring')\r\n      break\r\n  }\r\n\r\n  // store to prevent invoking require()\r\n  parsers[name] = mod\r\n\r\n  return mod.parse\r\n}\r\n\r\n/**\r\n * Get the simple query parser.\r\n *\r\n * @param {object} options\r\n */\r\n\r\nfunction simpleparser (options) {\r\n  var parameterLimit = options.parameterLimit !== undefined\r\n    ? options.parameterLimit\r\n    : 1000\r\n  var parse = parser('querystring')\r\n\r\n  if (isNaN(parameterLimit) || parameterLimit < 1) {\r\n    throw new TypeError('option parameterLimit must be a positive number')\r\n  }\r\n\r\n  if (isFinite(parameterLimit)) {\r\n    parameterLimit = parameterLimit | 0\r\n  }\r\n\r\n  return function queryparse (body) {\r\n    var paramCount = parameterCount(body, parameterLimit)\r\n\r\n    if (paramCount === undefined) {\r\n      debug('too many parameters')\r\n      throw createError(413, 'too many parameters', {\r\n        type: 'parameters.too.many'\r\n      })\r\n    }\r\n\r\n    debug('parse urlencoding')\r\n    return parse(body, undefined, undefined, {maxKeys: parameterLimit})\r\n  }\r\n}\r\n\r\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\r\n\r\nfunction typeChecker (type) {\r\n  return function checkType (req) {\r\n    return Boolean(typeis(req, type))\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/body-parser/lib/types/urlencoded.js b/node_modules/body-parser/lib/types/urlencoded.js
--- a/node_modules/body-parser/lib/types/urlencoded.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/body-parser/lib/types/urlencoded.js	(date 1649271545240)
@@ -266,7 +266,7 @@
     }
 
     debug('parse urlencoding')
-    return parse(body, undefined, undefined, {maxKeys: parameterLimit})
+    return parse(body, undefined, undefined, { maxKeys: parameterLimit })
   }
 }
 
Index: node_modules/iconv-lite/encodings/sbcs-codec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use strict\";\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\n\r\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\r\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \r\n\r\nexports._sbcs = SBCSCodec;\r\nfunction SBCSCodec(codecOptions, iconv) {\r\n    if (!codecOptions)\r\n        throw new Error(\"SBCS codec is called without the data.\")\r\n    \r\n    // Prepare char buffer for decoding.\r\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\r\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\r\n    \r\n    if (codecOptions.chars.length === 128) {\r\n        var asciiString = \"\";\r\n        for (var i = 0; i < 128; i++)\r\n            asciiString += String.fromCharCode(i);\r\n        codecOptions.chars = asciiString + codecOptions.chars;\r\n    }\r\n\r\n    this.decodeBuf = new Buffer.from(codecOptions.chars, 'ucs2');\r\n    \r\n    // Encoding buffer.\r\n    var encodeBuf = new Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\r\n\r\n    for (var i = 0; i < codecOptions.chars.length; i++)\r\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\r\n\r\n    this.encodeBuf = encodeBuf;\r\n}\r\n\r\nSBCSCodec.prototype.encoder = SBCSEncoder;\r\nSBCSCodec.prototype.decoder = SBCSDecoder;\r\n\r\n\r\nfunction SBCSEncoder(options, codec) {\r\n    this.encodeBuf = codec.encodeBuf;\r\n}\r\n\r\nSBCSEncoder.prototype.write = function(str) {\r\n    var buf = Buffer.alloc(str.length);\r\n    for (var i = 0; i < str.length; i++)\r\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\r\n    \r\n    return buf;\r\n}\r\n\r\nSBCSEncoder.prototype.end = function() {\r\n}\r\n\r\n\r\nfunction SBCSDecoder(options, codec) {\r\n    this.decodeBuf = codec.decodeBuf;\r\n}\r\n\r\nSBCSDecoder.prototype.write = function(buf) {\r\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\r\n    var decodeBuf = this.decodeBuf;\r\n    var newBuf = Buffer.alloc(buf.length*2);\r\n    var idx1 = 0, idx2 = 0;\r\n    for (var i = 0; i < buf.length; i++) {\r\n        idx1 = buf[i]*2; idx2 = i*2;\r\n        newBuf[idx2] = decodeBuf[idx1];\r\n        newBuf[idx2+1] = decodeBuf[idx1+1];\r\n    }\r\n    return newBuf.toString('ucs2');\r\n}\r\n\r\nSBCSDecoder.prototype.end = function() {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/iconv-lite/encodings/sbcs-codec.js b/node_modules/iconv-lite/encodings/sbcs-codec.js
--- a/node_modules/iconv-lite/encodings/sbcs-codec.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/iconv-lite/encodings/sbcs-codec.js	(date 1649271545150)
@@ -20,10 +20,10 @@
         codecOptions.chars = asciiString + codecOptions.chars;
     }
 
-    this.decodeBuf = new Buffer.from(codecOptions.chars, 'ucs2');
+    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');
     
     // Encoding buffer.
-    var encodeBuf = new Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
+    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
 
     for (var i = 0; i < codecOptions.chars.length; i++)
         encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
Index: node_modules/iconv-lite/encodings/sbcs-data.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use strict\";\r\n\r\n// Manually added data to be used by sbcs codec in addition to generated one.\r\n\r\nmodule.exports = {\r\n    // Not supported by iconv, not sure why.\r\n    \"10029\": \"maccenteuro\",\r\n    \"maccenteuro\": {\r\n        \"type\": \"_sbcs\",\r\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\r\n    },\r\n\r\n    \"808\": \"cp808\",\r\n    \"ibm808\": \"cp808\",\r\n    \"cp808\": {\r\n        \"type\": \"_sbcs\",\r\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\r\n    },\r\n\r\n    // Aliases of generated encodings.\r\n    \"ascii8bit\": \"ascii\",\r\n    \"usascii\": \"ascii\",\r\n    \"ansix34\": \"ascii\",\r\n    \"ansix341968\": \"ascii\",\r\n    \"ansix341986\": \"ascii\",\r\n    \"csascii\": \"ascii\",\r\n    \"cp367\": \"ascii\",\r\n    \"ibm367\": \"ascii\",\r\n    \"isoir6\": \"ascii\",\r\n    \"iso646us\": \"ascii\",\r\n    \"iso646irv\": \"ascii\",\r\n    \"us\": \"ascii\",\r\n\r\n    \"latin1\": \"iso88591\",\r\n    \"latin2\": \"iso88592\",\r\n    \"latin3\": \"iso88593\",\r\n    \"latin4\": \"iso88594\",\r\n    \"latin5\": \"iso88599\",\r\n    \"latin6\": \"iso885910\",\r\n    \"latin7\": \"iso885913\",\r\n    \"latin8\": \"iso885914\",\r\n    \"latin9\": \"iso885915\",\r\n    \"latin10\": \"iso885916\",\r\n\r\n    \"csisolatin1\": \"iso88591\",\r\n    \"csisolatin2\": \"iso88592\",\r\n    \"csisolatin3\": \"iso88593\",\r\n    \"csisolatin4\": \"iso88594\",\r\n    \"csisolatincyrillic\": \"iso88595\",\r\n    \"csisolatinarabic\": \"iso88596\",\r\n    \"csisolatingreek\" : \"iso88597\",\r\n    \"csisolatinhebrew\": \"iso88598\",\r\n    \"csisolatin5\": \"iso88599\",\r\n    \"csisolatin6\": \"iso885910\",\r\n\r\n    \"l1\": \"iso88591\",\r\n    \"l2\": \"iso88592\",\r\n    \"l3\": \"iso88593\",\r\n    \"l4\": \"iso88594\",\r\n    \"l5\": \"iso88599\",\r\n    \"l6\": \"iso885910\",\r\n    \"l7\": \"iso885913\",\r\n    \"l8\": \"iso885914\",\r\n    \"l9\": \"iso885915\",\r\n    \"l10\": \"iso885916\",\r\n\r\n    \"isoir14\": \"iso646jp\",\r\n    \"isoir57\": \"iso646cn\",\r\n    \"isoir100\": \"iso88591\",\r\n    \"isoir101\": \"iso88592\",\r\n    \"isoir109\": \"iso88593\",\r\n    \"isoir110\": \"iso88594\",\r\n    \"isoir144\": \"iso88595\",\r\n    \"isoir127\": \"iso88596\",\r\n    \"isoir126\": \"iso88597\",\r\n    \"isoir138\": \"iso88598\",\r\n    \"isoir148\": \"iso88599\",\r\n    \"isoir157\": \"iso885910\",\r\n    \"isoir166\": \"tis620\",\r\n    \"isoir179\": \"iso885913\",\r\n    \"isoir199\": \"iso885914\",\r\n    \"isoir203\": \"iso885915\",\r\n    \"isoir226\": \"iso885916\",\r\n\r\n    \"cp819\": \"iso88591\",\r\n    \"ibm819\": \"iso88591\",\r\n\r\n    \"cyrillic\": \"iso88595\",\r\n\r\n    \"arabic\": \"iso88596\",\r\n    \"arabic8\": \"iso88596\",\r\n    \"ecma114\": \"iso88596\",\r\n    \"asmo708\": \"iso88596\",\r\n\r\n    \"greek\" : \"iso88597\",\r\n    \"greek8\" : \"iso88597\",\r\n    \"ecma118\" : \"iso88597\",\r\n    \"elot928\" : \"iso88597\",\r\n\r\n    \"hebrew\": \"iso88598\",\r\n    \"hebrew8\": \"iso88598\",\r\n\r\n    \"turkish\": \"iso88599\",\r\n    \"turkish8\": \"iso88599\",\r\n\r\n    \"thai\": \"iso885911\",\r\n    \"thai8\": \"iso885911\",\r\n\r\n    \"celtic\": \"iso885914\",\r\n    \"celtic8\": \"iso885914\",\r\n    \"isoceltic\": \"iso885914\",\r\n\r\n    \"tis6200\": \"tis620\",\r\n    \"tis62025291\": \"tis620\",\r\n    \"tis62025330\": \"tis620\",\r\n\r\n    \"10000\": \"macroman\",\r\n    \"10006\": \"macgreek\",\r\n    \"10007\": \"maccyrillic\",\r\n    \"10079\": \"maciceland\",\r\n    \"10081\": \"macturkish\",\r\n\r\n    \"cspc8codepage437\": \"cp437\",\r\n    \"cspc775baltic\": \"cp775\",\r\n    \"cspc850multilingual\": \"cp850\",\r\n    \"cspcp852\": \"cp852\",\r\n    \"cspc862latinhebrew\": \"cp862\",\r\n    \"cpgr\": \"cp869\",\r\n\r\n    \"msee\": \"cp1250\",\r\n    \"mscyrl\": \"cp1251\",\r\n    \"msansi\": \"cp1252\",\r\n    \"msgreek\": \"cp1253\",\r\n    \"msturk\": \"cp1254\",\r\n    \"mshebr\": \"cp1255\",\r\n    \"msarab\": \"cp1256\",\r\n    \"winbaltrim\": \"cp1257\",\r\n\r\n    \"cp20866\": \"koi8r\",\r\n    \"20866\": \"koi8r\",\r\n    \"ibm878\": \"koi8r\",\r\n    \"cskoi8r\": \"koi8r\",\r\n\r\n    \"cp21866\": \"koi8u\",\r\n    \"21866\": \"koi8u\",\r\n    \"ibm1168\": \"koi8u\",\r\n\r\n    \"strk10482002\": \"rk1048\",\r\n\r\n    \"tcvn5712\": \"tcvn\",\r\n    \"tcvn57121\": \"tcvn\",\r\n\r\n    \"gb198880\": \"iso646cn\",\r\n    \"cn\": \"iso646cn\",\r\n\r\n    \"csiso14jisc6220ro\": \"iso646jp\",\r\n    \"jisc62201969ro\": \"iso646jp\",\r\n    \"jp\": \"iso646jp\",\r\n\r\n    \"cshproman8\": \"hproman8\",\r\n    \"r8\": \"hproman8\",\r\n    \"roman8\": \"hproman8\",\r\n    \"xroman8\": \"hproman8\",\r\n    \"ibm1051\": \"hproman8\",\r\n\r\n    \"mac\": \"macintosh\",\r\n    \"csmacintosh\": \"macintosh\",\r\n};\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/iconv-lite/encodings/sbcs-data.js b/node_modules/iconv-lite/encodings/sbcs-data.js
--- a/node_modules/iconv-lite/encodings/sbcs-data.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/iconv-lite/encodings/sbcs-data.js	(date 1649271545179)
@@ -17,6 +17,11 @@
         "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
     },
 
+    "mik": {
+        "type": "_sbcs",
+        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
+    },
+
     // Aliases of generated encodings.
     "ascii8bit": "ascii",
     "usascii": "ascii",
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"421proj\",\r\n  \"version\": \"0.0.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"start\": \"node ./bin/www\"\r\n  },\r\n  \"dependencies\": {\r\n    \"cookie-parser\": \"~1.4.4\",\r\n    \"debug\": \"~2.6.9\",\r\n    \"ejs\": \"~2.6.1\",\r\n    \"express\": \"~4.16.1\",\r\n    \"http-errors\": \"~1.6.3\",\r\n    \"morgan\": \"~1.9.1\",\r\n    \"mysql\": \"^2.18.1\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/package.json	(date 1649271546914)
@@ -6,12 +6,15 @@
     "start": "node ./bin/www"
   },
   "dependencies": {
+    "body-parser": "^1.20.0",
     "cookie-parser": "~1.4.4",
     "debug": "~2.6.9",
     "ejs": "~2.6.1",
     "express": "~4.16.1",
     "http-errors": "~1.6.3",
     "morgan": "~1.9.1",
-    "mysql": "^2.18.1"
+    "mysql": "^2.18.1",
+    "passport": "^0.5.2",
+    "passport-local": "^1.0.0"
   }
 }
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"421proj\",\r\n  \"version\": \"0.0.0\",\r\n  \"lockfileVersion\": 2,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"\": {\r\n      \"name\": \"421proj\",\r\n      \"version\": \"0.0.0\",\r\n      \"dependencies\": {\r\n        \"cookie-parser\": \"~1.4.4\",\r\n        \"debug\": \"~2.6.9\",\r\n        \"ejs\": \"~2.6.1\",\r\n        \"express\": \"~4.16.1\",\r\n        \"http-errors\": \"~1.6.3\",\r\n        \"morgan\": \"~1.9.1\",\r\n        \"mysql\": \"^2.18.1\"\r\n      }\r\n    },\r\n    \"node_modules/accepts\": {\r\n      \"version\": \"1.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz\",\r\n      \"integrity\": \"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\r\n      \"dependencies\": {\r\n        \"mime-types\": \"~2.1.34\",\r\n        \"negotiator\": \"0.6.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/array-flatten\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=\"\r\n    },\r\n    \"node_modules/basic-auth\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"5.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/bignumber.js\": {\r\n      \"version\": \"9.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.0.tgz\",\r\n      \"integrity\": \"sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A==\",\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/body-parser\": {\r\n      \"version\": \"1.18.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz\",\r\n      \"integrity\": \"sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=\",\r\n      \"dependencies\": {\r\n        \"bytes\": \"3.0.0\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"http-errors\": \"~1.6.3\",\r\n        \"iconv-lite\": \"0.4.23\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"qs\": \"6.5.2\",\r\n        \"raw-body\": \"2.3.3\",\r\n        \"type-is\": \"~1.6.16\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/bytes\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz\",\r\n      \"integrity\": \"sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/content-disposition\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz\",\r\n      \"integrity\": \"sha1-DPaLud318r55YcOoUXjLhdunjLQ=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/content-type\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/cookie\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/cookie-parser\": {\r\n      \"version\": \"1.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz\",\r\n      \"integrity\": \"sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==\",\r\n      \"dependencies\": {\r\n        \"cookie\": \"0.4.1\",\r\n        \"cookie-signature\": \"1.0.6\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/cookie-signature\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",\r\n      \"integrity\": \"sha1-4wOogrNCzD7oylE6eZmXNNqzriw=\"\r\n    },\r\n    \"node_modules/core-util-is\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\"\r\n    },\r\n    \"node_modules/debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"dependencies\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/depd\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/destroy\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz\",\r\n      \"integrity\": \"sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=\"\r\n    },\r\n    \"node_modules/ee-first\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=\"\r\n    },\r\n    \"node_modules/ejs\": {\r\n      \"version\": \"2.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ejs/-/ejs-2.6.2.tgz\",\r\n      \"integrity\": \"sha512-PcW2a0tyTuPHz3tWyYqtK6r1fZ3gp+3Sop8Ph+ZYN81Ob5rwmbHEzaqs10N3BEsaGTkh/ooniXK+WwszGlc2+Q==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/encodeurl\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/escape-html\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\r\n      \"integrity\": \"sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=\"\r\n    },\r\n    \"node_modules/etag\": {\r\n      \"version\": \"1.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\r\n      \"integrity\": \"sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/express\": {\r\n      \"version\": \"4.16.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.16.4.tgz\",\r\n      \"integrity\": \"sha512-j12Uuyb4FMrd/qQAm6uCHAkPtO8FDTRJZBDd5D2KOL2eLaz1yUNdUB/NOIyq0iU4q4cFarsUCrnFDPBcnksuOg==\",\r\n      \"dependencies\": {\r\n        \"accepts\": \"~1.3.5\",\r\n        \"array-flatten\": \"1.1.1\",\r\n        \"body-parser\": \"1.18.3\",\r\n        \"content-disposition\": \"0.5.2\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"cookie\": \"0.3.1\",\r\n        \"cookie-signature\": \"1.0.6\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"finalhandler\": \"1.1.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"merge-descriptors\": \"1.0.1\",\r\n        \"methods\": \"~1.1.2\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"path-to-regexp\": \"0.1.7\",\r\n        \"proxy-addr\": \"~2.0.4\",\r\n        \"qs\": \"6.5.2\",\r\n        \"range-parser\": \"~1.2.0\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"send\": \"0.16.2\",\r\n        \"serve-static\": \"1.13.2\",\r\n        \"setprototypeof\": \"1.1.0\",\r\n        \"statuses\": \"~1.4.0\",\r\n        \"type-is\": \"~1.6.16\",\r\n        \"utils-merge\": \"1.0.1\",\r\n        \"vary\": \"~1.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/express/node_modules/cookie\": {\r\n      \"version\": \"0.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz\",\r\n      \"integrity\": \"sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/finalhandler\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-Y1GUDo39ez4aHAw7MysnUD5JzYX+WaIj8I57kO3aEPT1fFRL4sr7mjei97FgnwhAyyzRYmQZaTHb2+9uZ1dPtg==\",\r\n      \"dependencies\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"statuses\": \"~1.4.0\",\r\n        \"unpipe\": \"~1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/forwarded\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz\",\r\n      \"integrity\": \"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/fresh\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\r\n      \"integrity\": \"sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/http-errors\": {\r\n      \"version\": \"1.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz\",\r\n      \"integrity\": \"sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=\",\r\n      \"dependencies\": {\r\n        \"depd\": \"~1.1.2\",\r\n        \"inherits\": \"2.0.3\",\r\n        \"setprototypeof\": \"1.1.0\",\r\n        \"statuses\": \">= 1.4.0 < 2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/iconv-lite\": {\r\n      \"version\": \"0.4.23\",\r\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz\",\r\n      \"integrity\": \"sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==\",\r\n      \"dependencies\": {\r\n        \"safer-buffer\": \">= 2.1.2 < 3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/inherits\": {\r\n      \"version\": \"2.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\r\n      \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\"\r\n    },\r\n    \"node_modules/ipaddr.js\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/isarray\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\"\r\n    },\r\n    \"node_modules/media-typer\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",\r\n      \"integrity\": \"sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/merge-descriptors\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=\"\r\n    },\r\n    \"node_modules/methods\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/mime\": {\r\n      \"version\": \"1.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.4.1.tgz\",\r\n      \"integrity\": \"sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==\",\r\n      \"bin\": {\r\n        \"mime\": \"cli.js\"\r\n      }\r\n    },\r\n    \"node_modules/mime-db\": {\r\n      \"version\": \"1.52.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\r\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/mime-types\": {\r\n      \"version\": \"2.1.35\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\r\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\r\n      \"dependencies\": {\r\n        \"mime-db\": \"1.52.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/morgan\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/morgan/-/morgan-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-HQStPIV4y3afTiCYVxirakhlCfGkI161c76kKFca7Fk1JusM//Qeo1ej2XaMniiNeaZklMVrh3vTtIzpzwbpmA==\",\r\n      \"dependencies\": {\r\n        \"basic-auth\": \"~2.0.0\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"on-headers\": \"~1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\"\r\n    },\r\n    \"node_modules/mysql\": {\r\n      \"version\": \"2.18.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/mysql/-/mysql-2.18.1.tgz\",\r\n      \"integrity\": \"sha512-Bca+gk2YWmqp2Uf6k5NFEurwY/0td0cpebAucFpY/3jhrwrVGuxU2uQFCHjU19SJfje0yQvi+rVWdq78hR5lig==\",\r\n      \"dependencies\": {\r\n        \"bignumber.js\": \"9.0.0\",\r\n        \"readable-stream\": \"2.3.7\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"sqlstring\": \"2.3.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/negotiator\": {\r\n      \"version\": \"0.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz\",\r\n      \"integrity\": \"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/on-finished\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",\r\n      \"integrity\": \"sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=\",\r\n      \"dependencies\": {\r\n        \"ee-first\": \"1.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/on-headers\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/parseurl\": {\r\n      \"version\": \"1.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\r\n      \"integrity\": \"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/path-to-regexp\": {\r\n      \"version\": \"0.1.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz\",\r\n      \"integrity\": \"sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=\"\r\n    },\r\n    \"node_modules/process-nextick-args\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\"\r\n    },\r\n    \"node_modules/proxy-addr\": {\r\n      \"version\": \"2.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\",\r\n      \"integrity\": \"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\",\r\n      \"dependencies\": {\r\n        \"forwarded\": \"0.2.0\",\r\n        \"ipaddr.js\": \"1.9.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/qs\": {\r\n      \"version\": \"6.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.5.2.tgz\",\r\n      \"integrity\": \"sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.6\"\r\n      }\r\n    },\r\n    \"node_modules/range-parser\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/raw-body\": {\r\n      \"version\": \"2.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz\",\r\n      \"integrity\": \"sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==\",\r\n      \"dependencies\": {\r\n        \"bytes\": \"3.0.0\",\r\n        \"http-errors\": \"1.6.3\",\r\n        \"iconv-lite\": \"0.4.23\",\r\n        \"unpipe\": \"1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/readable-stream\": {\r\n      \"version\": \"2.3.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz\",\r\n      \"integrity\": \"sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==\",\r\n      \"dependencies\": {\r\n        \"core-util-is\": \"~1.0.0\",\r\n        \"inherits\": \"~2.0.3\",\r\n        \"isarray\": \"~1.0.0\",\r\n        \"process-nextick-args\": \"~2.0.0\",\r\n        \"safe-buffer\": \"~5.1.1\",\r\n        \"string_decoder\": \"~1.1.1\",\r\n        \"util-deprecate\": \"~1.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/safe-buffer\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\r\n    },\r\n    \"node_modules/safer-buffer\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\"\r\n    },\r\n    \"node_modules/send\": {\r\n      \"version\": \"0.16.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.16.2.tgz\",\r\n      \"integrity\": \"sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw==\",\r\n      \"dependencies\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"destroy\": \"~1.0.4\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"http-errors\": \"~1.6.2\",\r\n        \"mime\": \"1.4.1\",\r\n        \"ms\": \"2.0.0\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"range-parser\": \"~1.2.0\",\r\n        \"statuses\": \"~1.4.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/serve-static\": {\r\n      \"version\": \"1.13.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz\",\r\n      \"integrity\": \"sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw==\",\r\n      \"dependencies\": {\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"send\": \"0.16.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/setprototypeof\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\"\r\n    },\r\n    \"node_modules/sqlstring\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz\",\r\n      \"integrity\": \"sha1-R1OT/56RR5rqYtyvDKPRSYOn+0A=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/statuses\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/string_decoder\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"~5.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/type-is\": {\r\n      \"version\": \"1.6.18\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\",\r\n      \"integrity\": \"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\r\n      \"dependencies\": {\r\n        \"media-typer\": \"0.3.0\",\r\n        \"mime-types\": \"~2.1.24\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/unpipe\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/util-deprecate\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=\"\r\n    },\r\n    \"node_modules/utils-merge\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/vary\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    }\r\n  },\r\n  \"dependencies\": {\r\n    \"accepts\": {\r\n      \"version\": \"1.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz\",\r\n      \"integrity\": \"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\r\n      \"requires\": {\r\n        \"mime-types\": \"~2.1.34\",\r\n        \"negotiator\": \"0.6.3\"\r\n      }\r\n    },\r\n    \"array-flatten\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=\"\r\n    },\r\n    \"basic-auth\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==\",\r\n      \"requires\": {\r\n        \"safe-buffer\": \"5.1.2\"\r\n      }\r\n    },\r\n    \"bignumber.js\": {\r\n      \"version\": \"9.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.0.tgz\",\r\n      \"integrity\": \"sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A==\"\r\n    },\r\n    \"body-parser\": {\r\n      \"version\": \"1.18.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz\",\r\n      \"integrity\": \"sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=\",\r\n      \"requires\": {\r\n        \"bytes\": \"3.0.0\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"http-errors\": \"~1.6.3\",\r\n        \"iconv-lite\": \"0.4.23\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"qs\": \"6.5.2\",\r\n        \"raw-body\": \"2.3.3\",\r\n        \"type-is\": \"~1.6.16\"\r\n      }\r\n    },\r\n    \"bytes\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz\",\r\n      \"integrity\": \"sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=\"\r\n    },\r\n    \"content-disposition\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz\",\r\n      \"integrity\": \"sha1-DPaLud318r55YcOoUXjLhdunjLQ=\"\r\n    },\r\n    \"content-type\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==\"\r\n    },\r\n    \"cookie\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==\"\r\n    },\r\n    \"cookie-parser\": {\r\n      \"version\": \"1.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz\",\r\n      \"integrity\": \"sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==\",\r\n      \"requires\": {\r\n        \"cookie\": \"0.4.1\",\r\n        \"cookie-signature\": \"1.0.6\"\r\n      }\r\n    },\r\n    \"cookie-signature\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",\r\n      \"integrity\": \"sha1-4wOogrNCzD7oylE6eZmXNNqzriw=\"\r\n    },\r\n    \"core-util-is\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\"\r\n    },\r\n    \"debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"requires\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"depd\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=\"\r\n    },\r\n    \"destroy\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz\",\r\n      \"integrity\": \"sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=\"\r\n    },\r\n    \"ee-first\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=\"\r\n    },\r\n    \"ejs\": {\r\n      \"version\": \"2.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ejs/-/ejs-2.6.2.tgz\",\r\n      \"integrity\": \"sha512-PcW2a0tyTuPHz3tWyYqtK6r1fZ3gp+3Sop8Ph+ZYN81Ob5rwmbHEzaqs10N3BEsaGTkh/ooniXK+WwszGlc2+Q==\"\r\n    },\r\n    \"encodeurl\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=\"\r\n    },\r\n    \"escape-html\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\r\n      \"integrity\": \"sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=\"\r\n    },\r\n    \"etag\": {\r\n      \"version\": \"1.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\r\n      \"integrity\": \"sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=\"\r\n    },\r\n    \"express\": {\r\n      \"version\": \"4.16.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.16.4.tgz\",\r\n      \"integrity\": \"sha512-j12Uuyb4FMrd/qQAm6uCHAkPtO8FDTRJZBDd5D2KOL2eLaz1yUNdUB/NOIyq0iU4q4cFarsUCrnFDPBcnksuOg==\",\r\n      \"requires\": {\r\n        \"accepts\": \"~1.3.5\",\r\n        \"array-flatten\": \"1.1.1\",\r\n        \"body-parser\": \"1.18.3\",\r\n        \"content-disposition\": \"0.5.2\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"cookie\": \"0.3.1\",\r\n        \"cookie-signature\": \"1.0.6\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"finalhandler\": \"1.1.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"merge-descriptors\": \"1.0.1\",\r\n        \"methods\": \"~1.1.2\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"path-to-regexp\": \"0.1.7\",\r\n        \"proxy-addr\": \"~2.0.4\",\r\n        \"qs\": \"6.5.2\",\r\n        \"range-parser\": \"~1.2.0\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"send\": \"0.16.2\",\r\n        \"serve-static\": \"1.13.2\",\r\n        \"setprototypeof\": \"1.1.0\",\r\n        \"statuses\": \"~1.4.0\",\r\n        \"type-is\": \"~1.6.16\",\r\n        \"utils-merge\": \"1.0.1\",\r\n        \"vary\": \"~1.1.2\"\r\n      },\r\n      \"dependencies\": {\r\n        \"cookie\": {\r\n          \"version\": \"0.3.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz\",\r\n          \"integrity\": \"sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=\"\r\n        }\r\n      }\r\n    },\r\n    \"finalhandler\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-Y1GUDo39ez4aHAw7MysnUD5JzYX+WaIj8I57kO3aEPT1fFRL4sr7mjei97FgnwhAyyzRYmQZaTHb2+9uZ1dPtg==\",\r\n      \"requires\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"statuses\": \"~1.4.0\",\r\n        \"unpipe\": \"~1.0.0\"\r\n      }\r\n    },\r\n    \"forwarded\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz\",\r\n      \"integrity\": \"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\"\r\n    },\r\n    \"fresh\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\r\n      \"integrity\": \"sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=\"\r\n    },\r\n    \"http-errors\": {\r\n      \"version\": \"1.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz\",\r\n      \"integrity\": \"sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=\",\r\n      \"requires\": {\r\n        \"depd\": \"~1.1.2\",\r\n        \"inherits\": \"2.0.3\",\r\n        \"setprototypeof\": \"1.1.0\",\r\n        \"statuses\": \">= 1.4.0 < 2\"\r\n      }\r\n    },\r\n    \"iconv-lite\": {\r\n      \"version\": \"0.4.23\",\r\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz\",\r\n      \"integrity\": \"sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==\",\r\n      \"requires\": {\r\n        \"safer-buffer\": \">= 2.1.2 < 3\"\r\n      }\r\n    },\r\n    \"inherits\": {\r\n      \"version\": \"2.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\r\n      \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\"\r\n    },\r\n    \"ipaddr.js\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\"\r\n    },\r\n    \"isarray\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\"\r\n    },\r\n    \"media-typer\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",\r\n      \"integrity\": \"sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=\"\r\n    },\r\n    \"merge-descriptors\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=\"\r\n    },\r\n    \"methods\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=\"\r\n    },\r\n    \"mime\": {\r\n      \"version\": \"1.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.4.1.tgz\",\r\n      \"integrity\": \"sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==\"\r\n    },\r\n    \"mime-db\": {\r\n      \"version\": \"1.52.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\r\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\"\r\n    },\r\n    \"mime-types\": {\r\n      \"version\": \"2.1.35\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\r\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\r\n      \"requires\": {\r\n        \"mime-db\": \"1.52.0\"\r\n      }\r\n    },\r\n    \"morgan\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/morgan/-/morgan-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-HQStPIV4y3afTiCYVxirakhlCfGkI161c76kKFca7Fk1JusM//Qeo1ej2XaMniiNeaZklMVrh3vTtIzpzwbpmA==\",\r\n      \"requires\": {\r\n        \"basic-auth\": \"~2.0.0\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"on-headers\": \"~1.0.1\"\r\n      }\r\n    },\r\n    \"ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\"\r\n    },\r\n    \"mysql\": {\r\n      \"version\": \"2.18.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/mysql/-/mysql-2.18.1.tgz\",\r\n      \"integrity\": \"sha512-Bca+gk2YWmqp2Uf6k5NFEurwY/0td0cpebAucFpY/3jhrwrVGuxU2uQFCHjU19SJfje0yQvi+rVWdq78hR5lig==\",\r\n      \"requires\": {\r\n        \"bignumber.js\": \"9.0.0\",\r\n        \"readable-stream\": \"2.3.7\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"sqlstring\": \"2.3.1\"\r\n      }\r\n    },\r\n    \"negotiator\": {\r\n      \"version\": \"0.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz\",\r\n      \"integrity\": \"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\"\r\n    },\r\n    \"on-finished\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",\r\n      \"integrity\": \"sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=\",\r\n      \"requires\": {\r\n        \"ee-first\": \"1.1.1\"\r\n      }\r\n    },\r\n    \"on-headers\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==\"\r\n    },\r\n    \"parseurl\": {\r\n      \"version\": \"1.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\r\n      \"integrity\": \"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\"\r\n    },\r\n    \"path-to-regexp\": {\r\n      \"version\": \"0.1.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz\",\r\n      \"integrity\": \"sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=\"\r\n    },\r\n    \"process-nextick-args\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\"\r\n    },\r\n    \"proxy-addr\": {\r\n      \"version\": \"2.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\",\r\n      \"integrity\": \"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\",\r\n      \"requires\": {\r\n        \"forwarded\": \"0.2.0\",\r\n        \"ipaddr.js\": \"1.9.1\"\r\n      }\r\n    },\r\n    \"qs\": {\r\n      \"version\": \"6.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.5.2.tgz\",\r\n      \"integrity\": \"sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==\"\r\n    },\r\n    \"range-parser\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\"\r\n    },\r\n    \"raw-body\": {\r\n      \"version\": \"2.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz\",\r\n      \"integrity\": \"sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==\",\r\n      \"requires\": {\r\n        \"bytes\": \"3.0.0\",\r\n        \"http-errors\": \"1.6.3\",\r\n        \"iconv-lite\": \"0.4.23\",\r\n        \"unpipe\": \"1.0.0\"\r\n      }\r\n    },\r\n    \"readable-stream\": {\r\n      \"version\": \"2.3.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz\",\r\n      \"integrity\": \"sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==\",\r\n      \"requires\": {\r\n        \"core-util-is\": \"~1.0.0\",\r\n        \"inherits\": \"~2.0.3\",\r\n        \"isarray\": \"~1.0.0\",\r\n        \"process-nextick-args\": \"~2.0.0\",\r\n        \"safe-buffer\": \"~5.1.1\",\r\n        \"string_decoder\": \"~1.1.1\",\r\n        \"util-deprecate\": \"~1.0.1\"\r\n      }\r\n    },\r\n    \"safe-buffer\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\r\n    },\r\n    \"safer-buffer\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\"\r\n    },\r\n    \"send\": {\r\n      \"version\": \"0.16.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.16.2.tgz\",\r\n      \"integrity\": \"sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw==\",\r\n      \"requires\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"destroy\": \"~1.0.4\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"http-errors\": \"~1.6.2\",\r\n        \"mime\": \"1.4.1\",\r\n        \"ms\": \"2.0.0\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"range-parser\": \"~1.2.0\",\r\n        \"statuses\": \"~1.4.0\"\r\n      }\r\n    },\r\n    \"serve-static\": {\r\n      \"version\": \"1.13.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz\",\r\n      \"integrity\": \"sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw==\",\r\n      \"requires\": {\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"parseurl\": \"~1.3.2\",\r\n        \"send\": \"0.16.2\"\r\n      }\r\n    },\r\n    \"setprototypeof\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\"\r\n    },\r\n    \"sqlstring\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz\",\r\n      \"integrity\": \"sha1-R1OT/56RR5rqYtyvDKPRSYOn+0A=\"\r\n    },\r\n    \"statuses\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew==\"\r\n    },\r\n    \"string_decoder\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\r\n      \"requires\": {\r\n        \"safe-buffer\": \"~5.1.0\"\r\n      }\r\n    },\r\n    \"type-is\": {\r\n      \"version\": \"1.6.18\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\",\r\n      \"integrity\": \"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\r\n      \"requires\": {\r\n        \"media-typer\": \"0.3.0\",\r\n        \"mime-types\": \"~2.1.24\"\r\n      }\r\n    },\r\n    \"unpipe\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=\"\r\n    },\r\n    \"util-deprecate\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=\"\r\n    },\r\n    \"utils-merge\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=\"\r\n    },\r\n    \"vary\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=\"\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package-lock.json b/package-lock.json
--- a/package-lock.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/package-lock.json	(date 1649271546913)
@@ -8,13 +8,16 @@
       "name": "421proj",
       "version": "0.0.0",
       "dependencies": {
+        "body-parser": "^1.20.0",
         "cookie-parser": "~1.4.4",
         "debug": "~2.6.9",
         "ejs": "~2.6.1",
         "express": "~4.16.1",
         "http-errors": "~1.6.3",
         "morgan": "~1.9.1",
-        "mysql": "^2.18.1"
+        "mysql": "^2.18.1",
+        "passport": "^0.5.2",
+        "passport-local": "^1.0.0"
       }
     },
     "node_modules/accepts": {
@@ -54,33 +57,123 @@
       }
     },
     "node_modules/body-parser": {
-      "version": "1.18.3",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
-      "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
+      "version": "1.20.0",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.0.tgz",
+      "integrity": "sha512-DfJ+q6EPcGKZD1QWUjSpqp+Q7bDQTsQIF4zfUAtZ6qk+H/3/QRhg9CEp39ss+/T2vw0+HaidC0ecJj/DRLIaKg==",
       "dependencies": {
-        "bytes": "3.0.0",
+        "bytes": "3.1.2",
         "content-type": "~1.0.4",
         "debug": "2.6.9",
-        "depd": "~1.1.2",
-        "http-errors": "~1.6.3",
-        "iconv-lite": "0.4.23",
-        "on-finished": "~2.3.0",
-        "qs": "6.5.2",
-        "raw-body": "2.3.3",
-        "type-is": "~1.6.16"
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "on-finished": "2.4.1",
+        "qs": "6.10.3",
+        "raw-body": "2.5.1",
+        "type-is": "~1.6.18",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
+      }
+    },
+    "node_modules/body-parser/node_modules/depd": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/body-parser/node_modules/destroy": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
+      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
+      "engines": {
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
+      }
+    },
+    "node_modules/body-parser/node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "dependencies": {
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/body-parser/node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+    },
+    "node_modules/body-parser/node_modules/on-finished": {
+      "version": "2.4.1",
+      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
+      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
+      "dependencies": {
+        "ee-first": "1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/body-parser/node_modules/qs": {
+      "version": "6.10.3",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.10.3.tgz",
+      "integrity": "sha512-wr7M2E0OFRfIfJZjKGieI8lBKb7fRCH4Fv5KNPEs7gJ8jadvotdsS08PzOKR7opXhZ/Xkjtt3WF9g38drmyRqQ==",
+      "dependencies": {
+        "side-channel": "^1.0.4"
+      },
+      "engines": {
+        "node": ">=0.6"
       },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/body-parser/node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+    },
+    "node_modules/body-parser/node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
       "engines": {
         "node": ">= 0.8"
       }
     },
     "node_modules/bytes": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
-      "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=",
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
+      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
       "engines": {
         "node": ">= 0.8"
       }
     },
+    "node_modules/call-bind": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
+      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
+      "dependencies": {
+        "function-bind": "^1.1.1",
+        "get-intrinsic": "^1.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/content-disposition": {
       "version": "0.5.2",
       "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz",
@@ -222,6 +315,34 @@
         "node": ">= 0.10.0"
       }
     },
+    "node_modules/express/node_modules/body-parser": {
+      "version": "1.18.3",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
+      "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
+      "dependencies": {
+        "bytes": "3.0.0",
+        "content-type": "~1.0.4",
+        "debug": "2.6.9",
+        "depd": "~1.1.2",
+        "http-errors": "~1.6.3",
+        "iconv-lite": "0.4.23",
+        "on-finished": "~2.3.0",
+        "qs": "6.5.2",
+        "raw-body": "2.3.3",
+        "type-is": "~1.6.16"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/express/node_modules/bytes": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
+      "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/express/node_modules/cookie": {
       "version": "0.3.1",
       "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
@@ -230,6 +351,31 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/express/node_modules/iconv-lite": {
+      "version": "0.4.23",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
+      "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/express/node_modules/raw-body": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
+      "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
+      "dependencies": {
+        "bytes": "3.0.0",
+        "http-errors": "1.6.3",
+        "iconv-lite": "0.4.23",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/finalhandler": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz",
@@ -263,6 +409,46 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/function-bind": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
+      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
+      "dependencies": {
+        "function-bind": "^1.1.1",
+        "has": "^1.0.3",
+        "has-symbols": "^1.0.1"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
+      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+      "dependencies": {
+        "function-bind": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
+      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/http-errors": {
       "version": "1.6.3",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
@@ -278,9 +464,9 @@
       }
     },
     "node_modules/iconv-lite": {
-      "version": "0.4.23",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
-      "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
+      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
       "dependencies": {
         "safer-buffer": ">= 2.1.2 < 3"
       },
@@ -396,6 +582,14 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/object-inspect": {
+      "version": "1.12.0",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.0.tgz",
+      "integrity": "sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g==",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/on-finished": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
@@ -423,11 +617,51 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/passport": {
+      "version": "0.5.2",
+      "resolved": "https://registry.npmjs.org/passport/-/passport-0.5.2.tgz",
+      "integrity": "sha512-w9n/Ot5I7orGD4y+7V3EFJCQEznE5RxHamUxcqLT2QoJY0f2JdN8GyHonYFvN0Vz+L6lUJfVhrk2aZz2LbuREw==",
+      "dependencies": {
+        "passport-strategy": "1.x.x",
+        "pause": "0.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/jaredhanson"
+      }
+    },
+    "node_modules/passport-local": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
+      "integrity": "sha1-H+YyaMkudWBmJkN+O5BmYsFbpu4=",
+      "dependencies": {
+        "passport-strategy": "1.x.x"
+      },
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
+    "node_modules/passport-strategy": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
+      "integrity": "sha1-tVOaqPwiWj0a0XlHbd8ja0QPUuQ=",
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
     "node_modules/path-to-regexp": {
       "version": "0.1.7",
       "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
       "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
     },
+    "node_modules/pause": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
+      "integrity": "sha1-HUCLP9t2kjuVQ9lvtMnf1TXZy10="
+    },
     "node_modules/process-nextick-args": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
@@ -462,15 +696,56 @@
       }
     },
     "node_modules/raw-body": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
-      "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
+      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
       "dependencies": {
-        "bytes": "3.0.0",
-        "http-errors": "1.6.3",
-        "iconv-lite": "0.4.23",
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
         "unpipe": "1.0.0"
       },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/raw-body/node_modules/depd": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/raw-body/node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "dependencies": {
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/raw-body/node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+    },
+    "node_modules/raw-body/node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+    },
+    "node_modules/raw-body/node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
       "engines": {
         "node": ">= 0.8"
       }
@@ -541,6 +816,19 @@
       "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
       "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ=="
     },
+    "node_modules/side-channel": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
+      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
+      "dependencies": {
+        "call-bind": "^1.0.0",
+        "get-intrinsic": "^1.0.2",
+        "object-inspect": "^1.9.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/sqlstring": {
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz",
@@ -565,6 +853,14 @@
         "safe-buffer": "~5.1.0"
       }
     },
+    "node_modules/toidentifier": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
+      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
+      "engines": {
+        "node": ">=0.6"
+      }
+    },
     "node_modules/type-is": {
       "version": "1.6.18",
       "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
@@ -636,26 +932,92 @@
       "integrity": "sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A=="
     },
     "body-parser": {
-      "version": "1.18.3",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
-      "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
+      "version": "1.20.0",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.0.tgz",
+      "integrity": "sha512-DfJ+q6EPcGKZD1QWUjSpqp+Q7bDQTsQIF4zfUAtZ6qk+H/3/QRhg9CEp39ss+/T2vw0+HaidC0ecJj/DRLIaKg==",
       "requires": {
-        "bytes": "3.0.0",
+        "bytes": "3.1.2",
         "content-type": "~1.0.4",
         "debug": "2.6.9",
-        "depd": "~1.1.2",
-        "http-errors": "~1.6.3",
-        "iconv-lite": "0.4.23",
-        "on-finished": "~2.3.0",
-        "qs": "6.5.2",
-        "raw-body": "2.3.3",
-        "type-is": "~1.6.16"
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "on-finished": "2.4.1",
+        "qs": "6.10.3",
+        "raw-body": "2.5.1",
+        "type-is": "~1.6.18",
+        "unpipe": "1.0.0"
+      },
+      "dependencies": {
+        "depd": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+          "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
+        },
+        "destroy": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
+          "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
+        },
+        "http-errors": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+          "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+          "requires": {
+            "depd": "2.0.0",
+            "inherits": "2.0.4",
+            "setprototypeof": "1.2.0",
+            "statuses": "2.0.1",
+            "toidentifier": "1.0.1"
+          }
+        },
+        "inherits": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+          "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+        },
+        "on-finished": {
+          "version": "2.4.1",
+          "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
+          "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
+          "requires": {
+            "ee-first": "1.1.1"
+          }
+        },
+        "qs": {
+          "version": "6.10.3",
+          "resolved": "https://registry.npmjs.org/qs/-/qs-6.10.3.tgz",
+          "integrity": "sha512-wr7M2E0OFRfIfJZjKGieI8lBKb7fRCH4Fv5KNPEs7gJ8jadvotdsS08PzOKR7opXhZ/Xkjtt3WF9g38drmyRqQ==",
+          "requires": {
+            "side-channel": "^1.0.4"
+          }
+        },
+        "setprototypeof": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+          "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+        },
+        "statuses": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+          "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
+        }
       }
     },
     "bytes": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
-      "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg="
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
+      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
+    },
+    "call-bind": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
+      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
+      "requires": {
+        "function-bind": "^1.1.1",
+        "get-intrinsic": "^1.0.2"
+      }
     },
     "content-disposition": {
       "version": "0.5.2",
@@ -771,10 +1133,51 @@
         "vary": "~1.1.2"
       },
       "dependencies": {
+        "body-parser": {
+          "version": "1.18.3",
+          "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
+          "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
+          "requires": {
+            "bytes": "3.0.0",
+            "content-type": "~1.0.4",
+            "debug": "2.6.9",
+            "depd": "~1.1.2",
+            "http-errors": "~1.6.3",
+            "iconv-lite": "0.4.23",
+            "on-finished": "~2.3.0",
+            "qs": "6.5.2",
+            "raw-body": "2.3.3",
+            "type-is": "~1.6.16"
+          }
+        },
+        "bytes": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
+          "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg="
+        },
         "cookie": {
           "version": "0.3.1",
           "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
           "integrity": "sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s="
+        },
+        "iconv-lite": {
+          "version": "0.4.23",
+          "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
+          "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
+          "requires": {
+            "safer-buffer": ">= 2.1.2 < 3"
+          }
+        },
+        "raw-body": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
+          "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
+          "requires": {
+            "bytes": "3.0.0",
+            "http-errors": "1.6.3",
+            "iconv-lite": "0.4.23",
+            "unpipe": "1.0.0"
+          }
         }
       }
     },
@@ -802,6 +1205,34 @@
       "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
       "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac="
     },
+    "function-bind": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
+    },
+    "get-intrinsic": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
+      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
+      "requires": {
+        "function-bind": "^1.1.1",
+        "has": "^1.0.3",
+        "has-symbols": "^1.0.1"
+      }
+    },
+    "has": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
+      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
+      "requires": {
+        "function-bind": "^1.1.1"
+      }
+    },
+    "has-symbols": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
+      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
+    },
     "http-errors": {
       "version": "1.6.3",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
@@ -814,9 +1245,9 @@
       }
     },
     "iconv-lite": {
-      "version": "0.4.23",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
-      "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
+      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
       "requires": {
         "safer-buffer": ">= 2.1.2 < 3"
       }
@@ -902,6 +1333,11 @@
       "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
       "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
     },
+    "object-inspect": {
+      "version": "1.12.0",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.0.tgz",
+      "integrity": "sha512-Ho2z80bVIvJloH+YzRmpZVQe87+qASmBUKZDWgx9cu+KDrX2ZDH/3tMy+gXbZETVGs2M8YdxObOh7XAtim9Y0g=="
+    },
     "on-finished": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
@@ -920,11 +1356,38 @@
       "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
       "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
     },
+    "passport": {
+      "version": "0.5.2",
+      "resolved": "https://registry.npmjs.org/passport/-/passport-0.5.2.tgz",
+      "integrity": "sha512-w9n/Ot5I7orGD4y+7V3EFJCQEznE5RxHamUxcqLT2QoJY0f2JdN8GyHonYFvN0Vz+L6lUJfVhrk2aZz2LbuREw==",
+      "requires": {
+        "passport-strategy": "1.x.x",
+        "pause": "0.0.1"
+      }
+    },
+    "passport-local": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
+      "integrity": "sha1-H+YyaMkudWBmJkN+O5BmYsFbpu4=",
+      "requires": {
+        "passport-strategy": "1.x.x"
+      }
+    },
+    "passport-strategy": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
+      "integrity": "sha1-tVOaqPwiWj0a0XlHbd8ja0QPUuQ="
+    },
     "path-to-regexp": {
       "version": "0.1.7",
       "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
       "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
     },
+    "pause": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
+      "integrity": "sha1-HUCLP9t2kjuVQ9lvtMnf1TXZy10="
+    },
     "process-nextick-args": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
@@ -950,14 +1413,48 @@
       "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
     },
     "raw-body": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
-      "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
+      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
       "requires": {
-        "bytes": "3.0.0",
-        "http-errors": "1.6.3",
-        "iconv-lite": "0.4.23",
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
         "unpipe": "1.0.0"
+      },
+      "dependencies": {
+        "depd": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+          "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
+        },
+        "http-errors": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+          "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+          "requires": {
+            "depd": "2.0.0",
+            "inherits": "2.0.4",
+            "setprototypeof": "1.2.0",
+            "statuses": "2.0.1",
+            "toidentifier": "1.0.1"
+          }
+        },
+        "inherits": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+          "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+        },
+        "setprototypeof": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+          "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+        },
+        "statuses": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+          "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
+        }
       }
     },
     "readable-stream": {
@@ -1020,6 +1517,16 @@
       "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
       "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ=="
     },
+    "side-channel": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
+      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
+      "requires": {
+        "call-bind": "^1.0.0",
+        "get-intrinsic": "^1.0.2",
+        "object-inspect": "^1.9.0"
+      }
+    },
     "sqlstring": {
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz",
@@ -1038,6 +1545,11 @@
         "safe-buffer": "~5.1.0"
       }
     },
+    "toidentifier": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
+      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
+    },
     "type-is": {
       "version": "1.6.18",
       "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
Index: main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express')\r\nvar path = require('path');\r\nconst response = require(\"express\");\r\nconst createError = require(\"http-errors\");\r\nconst sql = require('mysql');\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\napp.set(\"views\",path.resolve(__dirname,\"views\"));\r\napp.set(\"view engine\",\"ejs\");\r\n\r\napp.use(express.static(path.join(__dirname,'public')));\r\n\r\n\r\napp.get(\"/\", function(req,res){\r\n    res.render(\"index\", {title:\"FUABAR | Home\",message:\"This is a message\"});\r\n});\r\n\r\napp.get(\"/login\", (req, res) => {\r\n    res.render(\"login.ejs\", {title: \"FUBAR | Login\"});\r\n});\r\napp.get(\"/post_name\", (req, res) => {\r\n    res.render(\"post\", {title:\"Post Title\", post_content:\"Post content\"});\r\n});\r\n\r\napp.listen(port, () => {\r\n    console.log(`App listening at http://localhost:${port}`)\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.js b/main.js
--- a/main.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/main.js	(date 1649272158756)
@@ -12,9 +12,55 @@
 
 app.use(express.static(path.join(__dirname,'public')));
 
+var passport = require('passport');
+var bodyParser = require('body-parser');
+var localStrategy = require('passport-local').Strategy;
+
+var UserList = [{username:'admin', password:'admin'}];
+
+app.use(bodyParser.urlencoded({extended: false}));
+app.use(passport.initialize());
+
+passport.use('local', new localStrategy(
+    function(username, password, done) {
+
+        var Check_user = username;
+        var Info = UserList.find((element) => {
+            if (element.username == Check_user) {
+                return element;
+            }
+        });
+
+        console.log("Auth found this " + Info);
+        if (Info == undefined || Info == null) {
+            return done(null, false, {message: 'Incorrect username'});
+        }
+        if (Info.password != password) {
+            return done(null, false, {message: 'Incorrect password'});
+        } else {
+            console.log("Accepted");
+            return done(null, Info);
+        }
+    }
+));
+
+app.post('/login', passport.authenticate('local',{
+        successRedirect: "/success",
+        failureRedirect: "/login",
+        session:false
+    })
+);
+
+app.get("/login", (req,res)=>
+    res.render("login.ejs", {title: "FUBAR | Login"})
+);
+
+app.get("/success", (req,res)=>
+    res.render("success.ejs",{title: "FUBAR | success"})
+);
 
 app.get("/", function(req,res){
-    res.render("index", {title:"FUABAR | Home",message:"This is a message"});
+    res.render("index", {title:"FUABAR | Home", message:"This is a message"});
 });
 
 app.get("/login", (req, res) => {
Index: views/success.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/success.ejs b/views/success.ejs
new file mode 100644
--- /dev/null	(date 1649272190249)
+++ b/views/success.ejs	(date 1649272190249)
@@ -0,0 +1,2 @@
+<%- include('head.ejs')%>
+<p>Login successful</p>
\ No newline at end of file
Index: node_modules/raw-body/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"raw-body@2.3.3\",\r\n  \"_id\": \"raw-body@2.3.3\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==\",\r\n  \"_location\": \"/raw-body\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"version\",\r\n    \"registry\": true,\r\n    \"raw\": \"raw-body@2.3.3\",\r\n    \"name\": \"raw-body\",\r\n    \"escapedName\": \"raw-body\",\r\n    \"rawSpec\": \"2.3.3\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"2.3.3\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"/body-parser\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz\",\r\n  \"_shasum\": \"1b324ece6b5706e153855bc1148c65bb7f6ea0c3\",\r\n  \"_spec\": \"raw-body@2.3.3\",\r\n  \"_where\": \"C:\\\\Users\\\\bsp5205\\\\WebstormProjects\\\\421Proj\\\\node_modules\\\\body-parser\",\r\n  \"author\": {\r\n    \"name\": \"Jonathan Ong\",\r\n    \"email\": \"me@jongleberry.com\",\r\n    \"url\": \"http://jongleberry.com\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/stream-utils/raw-body/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Douglas Christopher Wilson\",\r\n      \"email\": \"doug@somethingdoug.com\"\r\n    },\r\n    {\r\n      \"name\": \"Raynos\",\r\n      \"email\": \"raynos2@gmail.com\"\r\n    }\r\n  ],\r\n  \"dependencies\": {\r\n    \"bytes\": \"3.0.0\",\r\n    \"http-errors\": \"1.6.3\",\r\n    \"iconv-lite\": \"0.4.23\",\r\n    \"unpipe\": \"1.0.0\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"Get and validate the raw body of a readable stream.\",\r\n  \"devDependencies\": {\r\n    \"bluebird\": \"3.5.1\",\r\n    \"eslint\": \"4.19.1\",\r\n    \"eslint-config-standard\": \"11.0.0\",\r\n    \"eslint-plugin-import\": \"2.11.0\",\r\n    \"eslint-plugin-markdown\": \"1.0.0-beta.6\",\r\n    \"eslint-plugin-node\": \"6.0.1\",\r\n    \"eslint-plugin-promise\": \"3.7.0\",\r\n    \"eslint-plugin-standard\": \"3.1.0\",\r\n    \"istanbul\": \"0.4.5\",\r\n    \"mocha\": \"2.5.3\",\r\n    \"readable-stream\": \"2.3.6\",\r\n    \"safe-buffer\": \"5.1.2\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">= 0.8\"\r\n  },\r\n  \"files\": [\r\n    \"HISTORY.md\",\r\n    \"LICENSE\",\r\n    \"README.md\",\r\n    \"index.d.ts\",\r\n    \"index.js\"\r\n  ],\r\n  \"homepage\": \"https://github.com/stream-utils/raw-body#readme\",\r\n  \"license\": \"MIT\",\r\n  \"name\": \"raw-body\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/stream-utils/raw-body.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"lint\": \"eslint --plugin markdown --ext js,md .\",\r\n    \"test\": \"mocha --trace-deprecation --reporter spec --bail --check-leaks test/\",\r\n    \"test-cov\": \"istanbul cover node_modules/mocha/bin/_mocha -- --trace-deprecation --reporter dot --check-leaks test/\",\r\n    \"test-travis\": \"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --trace-deprecation --reporter spec --check-leaks test/\"\r\n  },\r\n  \"version\": \"2.3.3\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/raw-body/package.json b/node_modules/raw-body/package.json
--- a/node_modules/raw-body/package.json	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/raw-body/package.json	(date 1649271545175)
@@ -1,67 +1,33 @@
 {
-  "_from": "raw-body@2.3.3",
-  "_id": "raw-body@2.3.3",
-  "_inBundle": false,
-  "_integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
-  "_location": "/raw-body",
-  "_phantomChildren": {},
-  "_requested": {
-    "type": "version",
-    "registry": true,
-    "raw": "raw-body@2.3.3",
-    "name": "raw-body",
-    "escapedName": "raw-body",
-    "rawSpec": "2.3.3",
-    "saveSpec": null,
-    "fetchSpec": "2.3.3"
-  },
-  "_requiredBy": [
-    "/body-parser"
-  ],
-  "_resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
-  "_shasum": "1b324ece6b5706e153855bc1148c65bb7f6ea0c3",
-  "_spec": "raw-body@2.3.3",
-  "_where": "C:\\Users\\bsp5205\\WebstormProjects\\421Proj\\node_modules\\body-parser",
-  "author": {
-    "name": "Jonathan Ong",
-    "email": "me@jongleberry.com",
-    "url": "http://jongleberry.com"
-  },
-  "bugs": {
-    "url": "https://github.com/stream-utils/raw-body/issues"
-  },
-  "bundleDependencies": false,
+  "name": "raw-body",
+  "description": "Get and validate the raw body of a readable stream.",
+  "version": "2.5.1",
+  "author": "Jonathan Ong <me@jongleberry.com> (http://jongleberry.com)",
   "contributors": [
-    {
-      "name": "Douglas Christopher Wilson",
-      "email": "doug@somethingdoug.com"
-    },
-    {
-      "name": "Raynos",
-      "email": "raynos2@gmail.com"
-    }
+    "Douglas Christopher Wilson <doug@somethingdoug.com>",
+    "Raynos <raynos2@gmail.com>"
   ],
+  "license": "MIT",
+  "repository": "stream-utils/raw-body",
   "dependencies": {
-    "bytes": "3.0.0",
-    "http-errors": "1.6.3",
-    "iconv-lite": "0.4.23",
+    "bytes": "3.1.2",
+    "http-errors": "2.0.0",
+    "iconv-lite": "0.4.24",
     "unpipe": "1.0.0"
   },
-  "deprecated": false,
-  "description": "Get and validate the raw body of a readable stream.",
   "devDependencies": {
-    "bluebird": "3.5.1",
-    "eslint": "4.19.1",
-    "eslint-config-standard": "11.0.0",
-    "eslint-plugin-import": "2.11.0",
-    "eslint-plugin-markdown": "1.0.0-beta.6",
-    "eslint-plugin-node": "6.0.1",
-    "eslint-plugin-promise": "3.7.0",
-    "eslint-plugin-standard": "3.1.0",
-    "istanbul": "0.4.5",
-    "mocha": "2.5.3",
-    "readable-stream": "2.3.6",
-    "safe-buffer": "5.1.2"
+    "bluebird": "3.7.2",
+    "eslint": "7.32.0",
+    "eslint-config-standard": "14.1.1",
+    "eslint-plugin-import": "2.25.4",
+    "eslint-plugin-markdown": "2.2.1",
+    "eslint-plugin-node": "11.1.0",
+    "eslint-plugin-promise": "5.2.0",
+    "eslint-plugin-standard": "4.1.0",
+    "mocha": "9.2.1",
+    "nyc": "15.1.0",
+    "readable-stream": "2.3.7",
+    "safe-buffer": "5.2.1"
   },
   "engines": {
     "node": ">= 0.8"
@@ -70,21 +36,14 @@
     "HISTORY.md",
     "LICENSE",
     "README.md",
+    "SECURITY.md",
     "index.d.ts",
     "index.js"
   ],
-  "homepage": "https://github.com/stream-utils/raw-body#readme",
-  "license": "MIT",
-  "name": "raw-body",
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/stream-utils/raw-body.git"
-  },
   "scripts": {
-    "lint": "eslint --plugin markdown --ext js,md .",
+    "lint": "eslint .",
     "test": "mocha --trace-deprecation --reporter spec --bail --check-leaks test/",
-    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --trace-deprecation --reporter dot --check-leaks test/",
-    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --trace-deprecation --reporter spec --check-leaks test/"
-  },
-  "version": "2.3.3"
+    "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
+    "test-cov": "nyc --reporter=html --reporter=text npm test"
+  }
 }
Index: node_modules/raw-body/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># raw-body\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Node.js Version][node-version-image]][node-version-url]\r\n[![Build status][travis-image]][travis-url]\r\n[![Test coverage][coveralls-image]][coveralls-url]\r\n\r\nGets the entire buffer of a stream either as a `Buffer` or a string.\r\nValidates the stream's length against an expected length and maximum limit.\r\nIdeal for parsing request bodies.\r\n\r\n## Install\r\n\r\nThis is a [Node.js](https://nodejs.org/en/) module available through the\r\n[npm registry](https://www.npmjs.com/). Installation is done using the\r\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\r\n\r\n```sh\r\n$ npm install raw-body\r\n```\r\n\r\n### TypeScript\r\n\r\nThis module includes a [TypeScript](https://www.typescriptlang.org/)\r\ndeclaration file to enable auto complete in compatible editors and type\r\ninformation for TypeScript projects. This module depends on the Node.js\r\ntypes, so install `@types/node`:\r\n\r\n```sh\r\n$ npm install @types/node\r\n```\r\n\r\n## API\r\n\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n```js\r\nvar getRawBody = require('raw-body')\r\n```\r\n\r\n### getRawBody(stream, [options], [callback])\r\n\r\n**Returns a promise if no callback specified and global `Promise` exists.**\r\n\r\nOptions:\r\n\r\n- `length` - The length of the stream.\r\n  If the contents of the stream do not add up to this length,\r\n  an `400` error code is returned.\r\n- `limit` - The byte limit of the body.\r\n  This is the number of bytes or any string format supported by\r\n  [bytes](https://www.npmjs.com/package/bytes),\r\n  for example `1000`, `'500kb'` or `'3mb'`.\r\n  If the body ends up being larger than this limit,\r\n  a `413` error code is returned.\r\n- `encoding` - The encoding to use to decode the body into a string.\r\n  By default, a `Buffer` instance will be returned when no encoding is specified.\r\n  Most likely, you want `utf-8`, so setting `encoding` to `true` will decode as `utf-8`.\r\n  You can use any type of encoding supported by [iconv-lite](https://www.npmjs.org/package/iconv-lite#readme).\r\n\r\nYou can also pass a string in place of options to just specify the encoding.\r\n\r\nIf an error occurs, the stream will be paused, everything unpiped,\r\nand you are responsible for correctly disposing the stream.\r\nFor HTTP requests, no handling is required if you send a response.\r\nFor streams that use file descriptors, you should `stream.destroy()` or `stream.close()` to prevent leaks.\r\n\r\n## Errors\r\n\r\nThis module creates errors depending on the error condition during reading.\r\nThe error may be an error from the underlying Node.js implementation, but is\r\notherwise an error created by this module, which has the following attributes:\r\n\r\n  * `limit` - the limit in bytes\r\n  * `length` and `expected` - the expected length of the stream\r\n  * `received` - the received bytes\r\n  * `encoding` - the invalid encoding\r\n  * `status` and `statusCode` - the corresponding status code for the error\r\n  * `type` - the error type\r\n\r\n### Types\r\n\r\nThe errors from this module have a `type` property which allows for the progamatic\r\ndetermination of the type of error returned.\r\n\r\n#### encoding.unsupported\r\n\r\nThis error will occur when the `encoding` option is specified, but the value does\r\nnot map to an encoding supported by the [iconv-lite](https://www.npmjs.org/package/iconv-lite#readme)\r\nmodule.\r\n\r\n#### entity.too.large\r\n\r\nThis error will occur when the `limit` option is specified, but the stream has\r\nan entity that is larger.\r\n\r\n#### request.aborted\r\n\r\nThis error will occur when the request stream is aborted by the client before\r\nreading the body has finished.\r\n\r\n#### request.size.invalid\r\n\r\nThis error will occur when the `length` option is specified, but the stream has\r\nemitted more bytes.\r\n\r\n#### stream.encoding.set\r\n\r\nThis error will occur when the given stream has an encoding set on it, making it\r\na decoded stream. The stream should not have an encoding set and is expected to\r\nemit `Buffer` objects.\r\n\r\n## Examples\r\n\r\n### Simple Express example\r\n\r\n```js\r\nvar contentType = require('content-type')\r\nvar express = require('express')\r\nvar getRawBody = require('raw-body')\r\n\r\nvar app = express()\r\n\r\napp.use(function (req, res, next) {\r\n  getRawBody(req, {\r\n    length: req.headers['content-length'],\r\n    limit: '1mb',\r\n    encoding: contentType.parse(req).parameters.charset\r\n  }, function (err, string) {\r\n    if (err) return next(err)\r\n    req.text = string\r\n    next()\r\n  })\r\n})\r\n\r\n// now access req.text\r\n```\r\n\r\n### Simple Koa example\r\n\r\n```js\r\nvar contentType = require('content-type')\r\nvar getRawBody = require('raw-body')\r\nvar koa = require('koa')\r\n\r\nvar app = koa()\r\n\r\napp.use(function * (next) {\r\n  this.text = yield getRawBody(this.req, {\r\n    length: this.req.headers['content-length'],\r\n    limit: '1mb',\r\n    encoding: contentType.parse(this.req).parameters.charset\r\n  })\r\n  yield next\r\n})\r\n\r\n// now access this.text\r\n```\r\n\r\n### Using as a promise\r\n\r\nTo use this library as a promise, simply omit the `callback` and a promise is\r\nreturned, provided that a global `Promise` is defined.\r\n\r\n```js\r\nvar getRawBody = require('raw-body')\r\nvar http = require('http')\r\n\r\nvar server = http.createServer(function (req, res) {\r\n  getRawBody(req)\r\n    .then(function (buf) {\r\n      res.statusCode = 200\r\n      res.end(buf.length + ' bytes submitted')\r\n    })\r\n    .catch(function (err) {\r\n      res.statusCode = 500\r\n      res.end(err.message)\r\n    })\r\n})\r\n\r\nserver.listen(3000)\r\n```\r\n\r\n### Using with TypeScript\r\n\r\n```ts\r\nimport * as getRawBody from 'raw-body';\r\nimport * as http from 'http';\r\n\r\nconst server = http.createServer((req, res) => {\r\n  getRawBody(req)\r\n  .then((buf) => {\r\n    res.statusCode = 200;\r\n    res.end(buf.length + ' bytes submitted');\r\n  })\r\n  .catch((err) => {\r\n    res.statusCode = err.statusCode;\r\n    res.end(err.message);\r\n  });\r\n});\r\n\r\nserver.listen(3000);\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/raw-body.svg\r\n[npm-url]: https://npmjs.org/package/raw-body\r\n[node-version-image]: https://img.shields.io/node/v/raw-body.svg\r\n[node-version-url]: https://nodejs.org/en/download/\r\n[travis-image]: https://img.shields.io/travis/stream-utils/raw-body/master.svg\r\n[travis-url]: https://travis-ci.org/stream-utils/raw-body\r\n[coveralls-image]: https://img.shields.io/coveralls/stream-utils/raw-body/master.svg\r\n[coveralls-url]: https://coveralls.io/r/stream-utils/raw-body?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/raw-body.svg\r\n[downloads-url]: https://npmjs.org/package/raw-body\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/raw-body/README.md b/node_modules/raw-body/README.md
--- a/node_modules/raw-body/README.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/raw-body/README.md	(date 1649271545199)
@@ -3,7 +3,7 @@
 [![NPM Version][npm-image]][npm-url]
 [![NPM Downloads][downloads-image]][downloads-url]
 [![Node.js Version][node-version-image]][node-version-url]
-[![Build status][travis-image]][travis-url]
+[![Build status][github-actions-ci-image]][github-actions-ci-url]
 [![Test coverage][coveralls-image]][coveralls-url]
 
 Gets the entire buffer of a stream either as a `Buffer` or a string.
@@ -33,8 +33,6 @@
 
 ## API
 
-<!-- eslint-disable no-unused-vars -->
-
 ```js
 var getRawBody = require('raw-body')
 ```
@@ -63,8 +61,10 @@
 
 If an error occurs, the stream will be paused, everything unpiped,
 and you are responsible for correctly disposing the stream.
-For HTTP requests, no handling is required if you send a response.
-For streams that use file descriptors, you should `stream.destroy()` or `stream.close()` to prevent leaks.
+For HTTP requests, you may need to finish consuming the stream if
+you want to keep the socket open for future requests. For streams
+that use file descriptors, you should `stream.destroy()` or
+`stream.close()` to prevent leaks.
 
 ## Errors
 
@@ -81,7 +81,7 @@
 
 ### Types
 
-The errors from this module have a `type` property which allows for the progamatic
+The errors from this module have a `type` property which allows for the programmatic
 determination of the type of error returned.
 
 #### encoding.unsupported
@@ -111,6 +111,10 @@
 a decoded stream. The stream should not have an encoding set and is expected to
 emit `Buffer` objects.
 
+#### stream.not.readable
+
+This error will occur when the given stream is not readable.
+
 ## Examples
 
 ### Simple Express example
@@ -211,9 +215,9 @@
 [npm-url]: https://npmjs.org/package/raw-body
 [node-version-image]: https://img.shields.io/node/v/raw-body.svg
 [node-version-url]: https://nodejs.org/en/download/
-[travis-image]: https://img.shields.io/travis/stream-utils/raw-body/master.svg
-[travis-url]: https://travis-ci.org/stream-utils/raw-body
 [coveralls-image]: https://img.shields.io/coveralls/stream-utils/raw-body/master.svg
 [coveralls-url]: https://coveralls.io/r/stream-utils/raw-body?branch=master
 [downloads-image]: https://img.shields.io/npm/dm/raw-body.svg
 [downloads-url]: https://npmjs.org/package/raw-body
+[github-actions-ci-image]: https://img.shields.io/github/workflow/status/stream-utils/raw-body/ci/master?label=ci
+[github-actions-ci-url]: https://github.com/jshttp/stream-utils/raw-body?query=workflow%3Aci
Index: node_modules/raw-body/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>2.3.3 / 2018-05-08\r\n==================\r\n\r\n  * deps: http-errors@1.6.3\r\n    - deps: depd@~1.1.2\r\n    - deps: setprototypeof@1.1.0\r\n    - deps: statuses@'>= 1.3.1 < 2'\r\n  * deps: iconv-lite@0.4.23\r\n    - Fix loading encoding with year appended\r\n    - Fix deprecation warnings on Node.js 10+\r\n\r\n2.3.2 / 2017-09-09\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.19\r\n    - Fix ISO-8859-1regression\r\n    - Update Windows-1255\r\n\r\n2.3.1 / 2017-09-07\r\n==================\r\n\r\n  * deps: bytes@3.0.0\r\n  * deps: http-errors@1.6.2\r\n    - deps: depd@1.1.1\r\n  * perf: skip buffer decoding on overage chunk\r\n\r\n2.3.0 / 2017-08-04\r\n==================\r\n\r\n  * Add TypeScript definitions\r\n  * Use `http-errors` for standard emitted errors\r\n  * deps: bytes@2.5.0\r\n  * deps: iconv-lite@0.4.18\r\n    - Add support for React Native\r\n    - Add a warning if not loaded as utf-8\r\n    - Fix CESU-8 decoding in Node.js 8\r\n    - Improve speed of ISO-8859-1 encoding\r\n\r\n2.2.0 / 2017-01-02\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.15\r\n    - Added encoding MS-31J\r\n    - Added encoding MS-932\r\n    - Added encoding MS-936\r\n    - Added encoding MS-949\r\n    - Added encoding MS-950\r\n    - Fix GBK/GB18030 handling of Euro character\r\n\r\n2.1.7 / 2016-06-19\r\n==================\r\n\r\n  * deps: bytes@2.4.0\r\n  * perf: remove double-cleanup on happy path\r\n\r\n2.1.6 / 2016-03-07\r\n==================\r\n\r\n  * deps: bytes@2.3.0\r\n    - Drop partial bytes on all parsed units\r\n    - Fix parsing byte string that looks like hex\r\n\r\n2.1.5 / 2015-11-30\r\n==================\r\n\r\n  * deps: bytes@2.2.0\r\n  * deps: iconv-lite@0.4.13\r\n\r\n2.1.4 / 2015-09-27\r\n==================\r\n\r\n  * Fix masking critical errors from `iconv-lite`\r\n  * deps: iconv-lite@0.4.12\r\n    - Fix CESU-8 decoding in Node.js 4.x\r\n\r\n2.1.3 / 2015-09-12\r\n==================\r\n\r\n  * Fix sync callback when attaching data listener causes sync read\r\n    - Node.js 0.10 compatibility issue\r\n\r\n2.1.2 / 2015-07-05\r\n==================\r\n\r\n  * Fix error stack traces to skip `makeError`\r\n  * deps: iconv-lite@0.4.11\r\n    - Add encoding CESU-8\r\n\r\n2.1.1 / 2015-06-14\r\n==================\r\n\r\n  * Use `unpipe` module for unpiping requests\r\n\r\n2.1.0 / 2015-05-28\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.10\r\n    - Improved UTF-16 endianness detection\r\n    - Leading BOM is now removed when decoding\r\n    - The encoding UTF-16 without BOM now defaults to UTF-16LE when detection fails\r\n\r\n2.0.2 / 2015-05-21\r\n==================\r\n\r\n  * deps: bytes@2.1.0\r\n    - Slight optimizations\r\n\r\n2.0.1 / 2015-05-10\r\n==================\r\n\r\n  * Fix a false-positive when unpiping in Node.js 0.8\r\n\r\n2.0.0 / 2015-05-08\r\n==================\r\n\r\n  * Return a promise without callback instead of thunk\r\n  * deps: bytes@2.0.1\r\n    - units no longer case sensitive when parsing\r\n\r\n1.3.4 / 2015-04-15\r\n==================\r\n\r\n  * Fix hanging callback if request aborts during read\r\n  * deps: iconv-lite@0.4.8\r\n    - Add encoding alias UNICODE-1-1-UTF-7\r\n\r\n1.3.3 / 2015-02-08\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.7\r\n    - Gracefully support enumerables on `Object.prototype`\r\n\r\n1.3.2 / 2015-01-20\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.6\r\n    - Fix rare aliases of single-byte encodings\r\n\r\n1.3.1 / 2014-11-21\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.5\r\n    - Fix Windows-31J and X-SJIS encoding support\r\n\r\n1.3.0 / 2014-07-20\r\n==================\r\n\r\n  * Fully unpipe the stream on error\r\n    - Fixes `Cannot switch to old mode now` error on Node.js 0.10+\r\n\r\n1.2.3 / 2014-07-20\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.4\r\n    - Added encoding UTF-7\r\n\r\n1.2.2 / 2014-06-19\r\n==================\r\n\r\n  * Send invalid encoding error to callback\r\n\r\n1.2.1 / 2014-06-15\r\n==================\r\n\r\n  * deps: iconv-lite@0.4.3\r\n    - Added encodings UTF-16BE and UTF-16 with BOM\r\n\r\n1.2.0 / 2014-06-13\r\n==================\r\n\r\n  * Passing string as `options` interpreted as encoding\r\n  * Support all encodings from `iconv-lite`\r\n\r\n1.1.7 / 2014-06-12\r\n==================\r\n\r\n  * use `string_decoder` module from npm\r\n\r\n1.1.6 / 2014-05-27\r\n==================\r\n\r\n  * check encoding for old streams1\r\n  * support node.js < 0.10.6\r\n\r\n1.1.5 / 2014-05-14\r\n==================\r\n\r\n  * bump bytes\r\n\r\n1.1.4 / 2014-04-19\r\n==================\r\n\r\n  * allow true as an option\r\n  * bump bytes\r\n\r\n1.1.3 / 2014-03-02\r\n==================\r\n\r\n  * fix case when length=null\r\n\r\n1.1.2 / 2013-12-01\r\n==================\r\n\r\n  * be less strict on state.encoding check\r\n\r\n1.1.1 / 2013-11-27\r\n==================\r\n\r\n  * add engines\r\n\r\n1.1.0 / 2013-11-27\r\n==================\r\n\r\n  * add err.statusCode and err.type\r\n  * allow for encoding option to be true\r\n  * pause the stream instead of dumping on error\r\n  * throw if the stream's encoding is set\r\n\r\n1.0.1 / 2013-11-19\r\n==================\r\n\r\n  * dont support streams1, throw if dev set encoding\r\n\r\n1.0.0 / 2013-11-17\r\n==================\r\n\r\n  * rename `expected` option to `length`\r\n\r\n0.2.0 / 2013-11-15\r\n==================\r\n\r\n  * republish\r\n\r\n0.1.1 / 2013-11-15\r\n==================\r\n\r\n  * use bytes\r\n\r\n0.1.0 / 2013-11-11\r\n==================\r\n\r\n  * generator support\r\n\r\n0.0.3 / 2013-10-10\r\n==================\r\n\r\n  * update repo\r\n\r\n0.0.2 / 2013-09-14\r\n==================\r\n\r\n  * dump stream on bad headers\r\n  * listen to events after defining received and buffers\r\n\r\n0.0.1 / 2013-09-14\r\n==================\r\n\r\n  * Initial release\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/raw-body/HISTORY.md b/node_modules/raw-body/HISTORY.md
--- a/node_modules/raw-body/HISTORY.md	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/raw-body/HISTORY.md	(date 1649271545183)
@@ -1,3 +1,48 @@
+2.5.1 / 2022-02-28
+==================
+
+  * Fix error on early async hooks implementations
+
+2.5.0 / 2022-02-21
+==================
+
+  * Prevent loss of async hooks context
+  * Prevent hanging when stream is not readable
+  * deps: http-errors@2.0.0
+    - deps: depd@2.0.0
+    - deps: statuses@2.0.1
+
+2.4.3 / 2022-02-14
+==================
+
+  * deps: bytes@3.1.2
+
+2.4.2 / 2021-11-16
+==================
+
+  * deps: bytes@3.1.1
+  * deps: http-errors@1.8.1
+    - deps: setprototypeof@1.2.0
+    - deps: toidentifier@1.0.1
+
+2.4.1 / 2019-06-25
+==================
+
+  * deps: http-errors@1.7.3
+    - deps: inherits@2.0.4
+
+2.4.0 / 2019-04-17
+==================
+
+  * deps: bytes@3.1.0
+    - Add petabyte (`pb`) support
+  * deps: http-errors@1.7.2
+    - Set constructor name when possible
+    - deps: setprototypeof@1.1.1
+    - deps: statuses@'>= 1.5.0 < 2'
+  * deps: iconv-lite@0.4.24
+    - Added encoding MIK
+
 2.3.3 / 2018-05-08
 ==================
 
@@ -13,7 +58,7 @@
 ==================
 
   * deps: iconv-lite@0.4.19
-    - Fix ISO-8859-1regression
+    - Fix ISO-8859-1 regression
     - Update Windows-1255
 
 2.3.1 / 2017-09-07
Index: node_modules/raw-body/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*!\r\n * raw-body\r\n * Copyright(c) 2013-2014 Jonathan Ong\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar createError = require('http-errors')\r\nvar iconv = require('iconv-lite')\r\nvar unpipe = require('unpipe')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = getRawBody\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /\r\n\r\n/**\r\n * Get the decoder for a given encoding.\r\n *\r\n * @param {string} encoding\r\n * @private\r\n */\r\n\r\nfunction getDecoder (encoding) {\r\n  if (!encoding) return null\r\n\r\n  try {\r\n    return iconv.getDecoder(encoding)\r\n  } catch (e) {\r\n    // error getting decoder\r\n    if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e\r\n\r\n    // the encoding was not found\r\n    throw createError(415, 'specified encoding unsupported', {\r\n      encoding: encoding,\r\n      type: 'encoding.unsupported'\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the raw body of a stream (typically HTTP).\r\n *\r\n * @param {object} stream\r\n * @param {object|string|function} [options]\r\n * @param {function} [callback]\r\n * @public\r\n */\r\n\r\nfunction getRawBody (stream, options, callback) {\r\n  var done = callback\r\n  var opts = options || {}\r\n\r\n  if (options === true || typeof options === 'string') {\r\n    // short cut for encoding\r\n    opts = {\r\n      encoding: options\r\n    }\r\n  }\r\n\r\n  if (typeof options === 'function') {\r\n    done = options\r\n    opts = {}\r\n  }\r\n\r\n  // validate callback is a function, if provided\r\n  if (done !== undefined && typeof done !== 'function') {\r\n    throw new TypeError('argument callback must be a function')\r\n  }\r\n\r\n  // require the callback without promises\r\n  if (!done && !global.Promise) {\r\n    throw new TypeError('argument callback is required')\r\n  }\r\n\r\n  // get encoding\r\n  var encoding = opts.encoding !== true\r\n    ? opts.encoding\r\n    : 'utf-8'\r\n\r\n  // convert the limit to an integer\r\n  var limit = bytes.parse(opts.limit)\r\n\r\n  // convert the expected length to an integer\r\n  var length = opts.length != null && !isNaN(opts.length)\r\n    ? parseInt(opts.length, 10)\r\n    : null\r\n\r\n  if (done) {\r\n    // classic callback style\r\n    return readStream(stream, encoding, length, limit, done)\r\n  }\r\n\r\n  return new Promise(function executor (resolve, reject) {\r\n    readStream(stream, encoding, length, limit, function onRead (err, buf) {\r\n      if (err) return reject(err)\r\n      resolve(buf)\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Halt a stream.\r\n *\r\n * @param {Object} stream\r\n * @private\r\n */\r\n\r\nfunction halt (stream) {\r\n  // unpipe everything from the stream\r\n  unpipe(stream)\r\n\r\n  // pause stream\r\n  if (typeof stream.pause === 'function') {\r\n    stream.pause()\r\n  }\r\n}\r\n\r\n/**\r\n * Read the data from the stream.\r\n *\r\n * @param {object} stream\r\n * @param {string} encoding\r\n * @param {number} length\r\n * @param {number} limit\r\n * @param {function} callback\r\n * @public\r\n */\r\n\r\nfunction readStream (stream, encoding, length, limit, callback) {\r\n  var complete = false\r\n  var sync = true\r\n\r\n  // check the length and limit options.\r\n  // note: we intentionally leave the stream paused,\r\n  // so users should handle the stream themselves.\r\n  if (limit !== null && length !== null && length > limit) {\r\n    return done(createError(413, 'request entity too large', {\r\n      expected: length,\r\n      length: length,\r\n      limit: limit,\r\n      type: 'entity.too.large'\r\n    }))\r\n  }\r\n\r\n  // streams1: assert request encoding is buffer.\r\n  // streams2+: assert the stream encoding is buffer.\r\n  //   stream._decoder: streams1\r\n  //   state.encoding: streams2\r\n  //   state.decoder: streams2, specifically < 0.10.6\r\n  var state = stream._readableState\r\n  if (stream._decoder || (state && (state.encoding || state.decoder))) {\r\n    // developer error\r\n    return done(createError(500, 'stream encoding should not be set', {\r\n      type: 'stream.encoding.set'\r\n    }))\r\n  }\r\n\r\n  var received = 0\r\n  var decoder\r\n\r\n  try {\r\n    decoder = getDecoder(encoding)\r\n  } catch (err) {\r\n    return done(err)\r\n  }\r\n\r\n  var buffer = decoder\r\n    ? ''\r\n    : []\r\n\r\n  // attach listeners\r\n  stream.on('aborted', onAborted)\r\n  stream.on('close', cleanup)\r\n  stream.on('data', onData)\r\n  stream.on('end', onEnd)\r\n  stream.on('error', onEnd)\r\n\r\n  // mark sync section complete\r\n  sync = false\r\n\r\n  function done () {\r\n    var args = new Array(arguments.length)\r\n\r\n    // copy arguments\r\n    for (var i = 0; i < args.length; i++) {\r\n      args[i] = arguments[i]\r\n    }\r\n\r\n    // mark complete\r\n    complete = true\r\n\r\n    if (sync) {\r\n      process.nextTick(invokeCallback)\r\n    } else {\r\n      invokeCallback()\r\n    }\r\n\r\n    function invokeCallback () {\r\n      cleanup()\r\n\r\n      if (args[0]) {\r\n        // halt the stream on error\r\n        halt(stream)\r\n      }\r\n\r\n      callback.apply(null, args)\r\n    }\r\n  }\r\n\r\n  function onAborted () {\r\n    if (complete) return\r\n\r\n    done(createError(400, 'request aborted', {\r\n      code: 'ECONNABORTED',\r\n      expected: length,\r\n      length: length,\r\n      received: received,\r\n      type: 'request.aborted'\r\n    }))\r\n  }\r\n\r\n  function onData (chunk) {\r\n    if (complete) return\r\n\r\n    received += chunk.length\r\n\r\n    if (limit !== null && received > limit) {\r\n      done(createError(413, 'request entity too large', {\r\n        limit: limit,\r\n        received: received,\r\n        type: 'entity.too.large'\r\n      }))\r\n    } else if (decoder) {\r\n      buffer += decoder.write(chunk)\r\n    } else {\r\n      buffer.push(chunk)\r\n    }\r\n  }\r\n\r\n  function onEnd (err) {\r\n    if (complete) return\r\n    if (err) return done(err)\r\n\r\n    if (length !== null && received !== length) {\r\n      done(createError(400, 'request size did not match content length', {\r\n        expected: length,\r\n        length: length,\r\n        received: received,\r\n        type: 'request.size.invalid'\r\n      }))\r\n    } else {\r\n      var string = decoder\r\n        ? buffer + (decoder.end() || '')\r\n        : Buffer.concat(buffer)\r\n      done(null, string)\r\n    }\r\n  }\r\n\r\n  function cleanup () {\r\n    buffer = null\r\n\r\n    stream.removeListener('aborted', onAborted)\r\n    stream.removeListener('data', onData)\r\n    stream.removeListener('end', onEnd)\r\n    stream.removeListener('error', onEnd)\r\n    stream.removeListener('close', cleanup)\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/raw-body/index.js b/node_modules/raw-body/index.js
--- a/node_modules/raw-body/index.js	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/raw-body/index.js	(date 1649271545162)
@@ -1,7 +1,7 @@
 /*!
  * raw-body
  * Copyright(c) 2013-2014 Jonathan Ong
- * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * Copyright(c) 2014-2022 Douglas Christopher Wilson
  * MIT Licensed
  */
 
@@ -12,6 +12,7 @@
  * @private
  */
 
+var asyncHooks = tryRequireAsyncHooks()
 var bytes = require('bytes')
 var createError = require('http-errors')
 var iconv = require('iconv-lite')
@@ -105,7 +106,7 @@
 
   if (done) {
     // classic callback style
-    return readStream(stream, encoding, length, limit, done)
+    return readStream(stream, encoding, length, limit, wrap(done))
   }
 
   return new Promise(function executor (resolve, reject) {
@@ -173,6 +174,12 @@
     }))
   }
 
+  if (typeof stream.readable !== 'undefined' && !stream.readable) {
+    return done(createError(500, 'stream is not readable', {
+      type: 'stream.not.readable'
+    }))
+  }
+
   var received = 0
   var decoder
 
@@ -284,3 +291,39 @@
     stream.removeListener('close', cleanup)
   }
 }
+
+/**
+ * Try to require async_hooks
+ * @private
+ */
+
+function tryRequireAsyncHooks () {
+  try {
+    return require('async_hooks')
+  } catch (e) {
+    return {}
+  }
+}
+
+/**
+ * Wrap function with async resource, if possible.
+ * AsyncResource.bind static method backported.
+ * @private
+ */
+
+function wrap (fn) {
+  var res
+
+  // create anonymous resource
+  if (asyncHooks.AsyncResource) {
+    res = new asyncHooks.AsyncResource(fn.name || 'bound-anonymous-fn')
+  }
+
+  // incompatible node.js
+  if (!res || !res.runInAsyncScope) {
+    return fn
+  }
+
+  // return bound function
+  return res.runInAsyncScope.bind(res, fn, null)
+}
Index: node_modules/raw-body/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>The MIT License (MIT)\r\n\r\nCopyright (c) 2013-2014 Jonathan Ong <me@jongleberry.com>\r\nCopyright (c) 2014-2015 Douglas Christopher Wilson <doug@somethingdoug.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/raw-body/LICENSE b/node_modules/raw-body/LICENSE
--- a/node_modules/raw-body/LICENSE	(revision 7985a65c756692f27acd7a8b9f4cdfe2963019ca)
+++ b/node_modules/raw-body/LICENSE	(date 1649271545143)
@@ -1,7 +1,7 @@
 The MIT License (MIT)
 
 Copyright (c) 2013-2014 Jonathan Ong <me@jongleberry.com>
-Copyright (c) 2014-2015 Douglas Christopher Wilson <doug@somethingdoug.com>
+Copyright (c) 2014-2022 Douglas Christopher Wilson <doug@somethingdoug.com>
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
